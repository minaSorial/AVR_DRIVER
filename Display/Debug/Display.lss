
Display.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e58  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000090  00800060  00002e58  00002eec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  008000f0  008000f0  00002f7c  2**0
                  ALLOC
  3 .stab         000028b0  00000000  00000000  00002f7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000129d  00000000  00000000  0000582c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006ac9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006c09  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006d79  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000089c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000098ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a65c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a7bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000aa49  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b217  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e5       	ldi	r30, 0x58	; 88
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3f       	cpi	r26, 0xF0	; 240
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 ef       	ldi	r26, 0xF0	; 240
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 3f       	cpi	r26, 0xF4	; 244
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <main>
      8a:	0c 94 2a 17 	jmp	0x2e54	; 0x2e54 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f3 16 	jmp	0x2de6	; 0x2de6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 0f 17 	jmp	0x2e1e	; 0x2e1e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ff 16 	jmp	0x2dfe	; 0x2dfe <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 1b 17 	jmp	0x2e36	; 0x2e36 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ff 16 	jmp	0x2dfe	; 0x2dfe <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 1b 17 	jmp	0x2e36	; 0x2e36 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f3 16 	jmp	0x2de6	; 0x2de6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 0f 17 	jmp	0x2e1e	; 0x2e1e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ff 16 	jmp	0x2dfe	; 0x2dfe <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 1b 17 	jmp	0x2e36	; 0x2e36 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 ff 16 	jmp	0x2dfe	; 0x2dfe <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 1b 17 	jmp	0x2e36	; 0x2e36 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 ff 16 	jmp	0x2dfe	; 0x2dfe <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 1b 17 	jmp	0x2e36	; 0x2e36 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 03 17 	jmp	0x2e06	; 0x2e06 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 1f 17 	jmp	0x2e3e	; 0x2e3e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_vidInit>:
static u8*  const u8KarrPorts []={&PORTA, &PORTB, &PORTC, &PORTD};
static u8*  const u8KarrDdra  []={&DDRA, &DDRB, &DDRC, &DDRD};
static u8*  const u8KarrPins  []={&PINA, &PINB, &PINC, &PIND};


void DIO_vidInit(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	27 97       	sbiw	r28, 0x07	; 7
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61





	u8 u8PinIdxLoc=0;
     b5a:	1f 82       	std	Y+7, r1	; 0x07

	for (u8PinIdxLoc = 0; u8PinIdxLoc < DIO_PIN_NUM; ++u8PinIdxLoc) {
     b5c:	1f 82       	std	Y+7, r1	; 0x07
     b5e:	46 c1       	rjmp	.+652    	; 0xdec <DIO_vidInit+0x2a6>


		const DIO_tstrPIN * pstrCurrentPinLoc = & DIO_kastrPinCg[u8PinIdxLoc];
     b60:	8f 81       	ldd	r24, Y+7	; 0x07
     b62:	88 2f       	mov	r24, r24
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	88 0f       	add	r24, r24
     b68:	99 1f       	adc	r25, r25
     b6a:	84 54       	subi	r24, 0x44	; 68
     b6c:	9f 4f       	sbci	r25, 0xFF	; 255
     b6e:	9c 83       	std	Y+4, r25	; 0x04
     b70:	8b 83       	std	Y+3, r24	; 0x03

		if(pstrCurrentPinLoc->u8Direction==DIO_OUTPUT){
     b72:	eb 81       	ldd	r30, Y+3	; 0x03
     b74:	fc 81       	ldd	r31, Y+4	; 0x04
     b76:	80 81       	ld	r24, Z
     b78:	80 74       	andi	r24, 0x40	; 64
     b7a:	88 23       	and	r24, r24
     b7c:	09 f4       	brne	.+2      	; 0xb80 <DIO_vidInit+0x3a>
     b7e:	96 c0       	rjmp	.+300    	; 0xcac <DIO_vidInit+0x166>

			BIT_SET(* u8KarrDdra [pstrCurrentPinLoc->u8PortIdx ] ,  pstrCurrentPinLoc->u8PinIdx);
     b80:	eb 81       	ldd	r30, Y+3	; 0x03
     b82:	fc 81       	ldd	r31, Y+4	; 0x04
     b84:	80 81       	ld	r24, Z
     b86:	83 70       	andi	r24, 0x03	; 3
     b88:	88 2f       	mov	r24, r24
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	88 0f       	add	r24, r24
     b8e:	99 1f       	adc	r25, r25
     b90:	fc 01       	movw	r30, r24
     b92:	eb 52       	subi	r30, 0x2B	; 43
     b94:	ff 4f       	sbci	r31, 0xFF	; 255
     b96:	a0 81       	ld	r26, Z
     b98:	b1 81       	ldd	r27, Z+1	; 0x01
     b9a:	eb 81       	ldd	r30, Y+3	; 0x03
     b9c:	fc 81       	ldd	r31, Y+4	; 0x04
     b9e:	80 81       	ld	r24, Z
     ba0:	83 70       	andi	r24, 0x03	; 3
     ba2:	88 2f       	mov	r24, r24
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	88 0f       	add	r24, r24
     ba8:	99 1f       	adc	r25, r25
     baa:	fc 01       	movw	r30, r24
     bac:	eb 52       	subi	r30, 0x2B	; 43
     bae:	ff 4f       	sbci	r31, 0xFF	; 255
     bb0:	01 90       	ld	r0, Z+
     bb2:	f0 81       	ld	r31, Z
     bb4:	e0 2d       	mov	r30, r0
     bb6:	80 81       	ld	r24, Z
     bb8:	48 2f       	mov	r20, r24
     bba:	eb 81       	ldd	r30, Y+3	; 0x03
     bbc:	fc 81       	ldd	r31, Y+4	; 0x04
     bbe:	80 81       	ld	r24, Z
     bc0:	86 95       	lsr	r24
     bc2:	86 95       	lsr	r24
     bc4:	8f 70       	andi	r24, 0x0F	; 15
     bc6:	28 2f       	mov	r18, r24
     bc8:	30 e0       	ldi	r19, 0x00	; 0
     bca:	81 e0       	ldi	r24, 0x01	; 1
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	02 2e       	mov	r0, r18
     bd0:	02 c0       	rjmp	.+4      	; 0xbd6 <DIO_vidInit+0x90>
     bd2:	88 0f       	add	r24, r24
     bd4:	99 1f       	adc	r25, r25
     bd6:	0a 94       	dec	r0
     bd8:	e2 f7       	brpl	.-8      	; 0xbd2 <DIO_vidInit+0x8c>
     bda:	84 2b       	or	r24, r20
     bdc:	8c 93       	st	X, r24



			if(pstrCurrentPinLoc->u8InitValue==DIO_HIGH){
     bde:	eb 81       	ldd	r30, Y+3	; 0x03
     be0:	fc 81       	ldd	r31, Y+4	; 0x04
     be2:	80 81       	ld	r24, Z
     be4:	80 78       	andi	r24, 0x80	; 128
     be6:	88 23       	and	r24, r24
     be8:	81 f1       	breq	.+96     	; 0xc4a <DIO_vidInit+0x104>

				BIT_SET(* u8KarrPorts [pstrCurrentPinLoc->u8PortIdx ] ,  pstrCurrentPinLoc->u8PinIdx);
     bea:	eb 81       	ldd	r30, Y+3	; 0x03
     bec:	fc 81       	ldd	r31, Y+4	; 0x04
     bee:	80 81       	ld	r24, Z
     bf0:	83 70       	andi	r24, 0x03	; 3
     bf2:	88 2f       	mov	r24, r24
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	fc 01       	movw	r30, r24
     bfc:	e3 53       	subi	r30, 0x33	; 51
     bfe:	ff 4f       	sbci	r31, 0xFF	; 255
     c00:	a0 81       	ld	r26, Z
     c02:	b1 81       	ldd	r27, Z+1	; 0x01
     c04:	eb 81       	ldd	r30, Y+3	; 0x03
     c06:	fc 81       	ldd	r31, Y+4	; 0x04
     c08:	80 81       	ld	r24, Z
     c0a:	83 70       	andi	r24, 0x03	; 3
     c0c:	88 2f       	mov	r24, r24
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	88 0f       	add	r24, r24
     c12:	99 1f       	adc	r25, r25
     c14:	fc 01       	movw	r30, r24
     c16:	e3 53       	subi	r30, 0x33	; 51
     c18:	ff 4f       	sbci	r31, 0xFF	; 255
     c1a:	01 90       	ld	r0, Z+
     c1c:	f0 81       	ld	r31, Z
     c1e:	e0 2d       	mov	r30, r0
     c20:	80 81       	ld	r24, Z
     c22:	48 2f       	mov	r20, r24
     c24:	eb 81       	ldd	r30, Y+3	; 0x03
     c26:	fc 81       	ldd	r31, Y+4	; 0x04
     c28:	80 81       	ld	r24, Z
     c2a:	86 95       	lsr	r24
     c2c:	86 95       	lsr	r24
     c2e:	8f 70       	andi	r24, 0x0F	; 15
     c30:	28 2f       	mov	r18, r24
     c32:	30 e0       	ldi	r19, 0x00	; 0
     c34:	81 e0       	ldi	r24, 0x01	; 1
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	02 2e       	mov	r0, r18
     c3a:	02 c0       	rjmp	.+4      	; 0xc40 <DIO_vidInit+0xfa>
     c3c:	88 0f       	add	r24, r24
     c3e:	99 1f       	adc	r25, r25
     c40:	0a 94       	dec	r0
     c42:	e2 f7       	brpl	.-8      	; 0xc3c <DIO_vidInit+0xf6>
     c44:	84 2b       	or	r24, r20
     c46:	8c 93       	st	X, r24
     c48:	ce c0       	rjmp	.+412    	; 0xde6 <DIO_vidInit+0x2a0>

			}

			else{

				BIT_CLEAR(* u8KarrPorts [pstrCurrentPinLoc->u8PortIdx ] ,  pstrCurrentPinLoc->u8PinIdx);
     c4a:	eb 81       	ldd	r30, Y+3	; 0x03
     c4c:	fc 81       	ldd	r31, Y+4	; 0x04
     c4e:	80 81       	ld	r24, Z
     c50:	83 70       	andi	r24, 0x03	; 3
     c52:	88 2f       	mov	r24, r24
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	88 0f       	add	r24, r24
     c58:	99 1f       	adc	r25, r25
     c5a:	fc 01       	movw	r30, r24
     c5c:	e3 53       	subi	r30, 0x33	; 51
     c5e:	ff 4f       	sbci	r31, 0xFF	; 255
     c60:	a0 81       	ld	r26, Z
     c62:	b1 81       	ldd	r27, Z+1	; 0x01
     c64:	eb 81       	ldd	r30, Y+3	; 0x03
     c66:	fc 81       	ldd	r31, Y+4	; 0x04
     c68:	80 81       	ld	r24, Z
     c6a:	83 70       	andi	r24, 0x03	; 3
     c6c:	88 2f       	mov	r24, r24
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	88 0f       	add	r24, r24
     c72:	99 1f       	adc	r25, r25
     c74:	fc 01       	movw	r30, r24
     c76:	e3 53       	subi	r30, 0x33	; 51
     c78:	ff 4f       	sbci	r31, 0xFF	; 255
     c7a:	01 90       	ld	r0, Z+
     c7c:	f0 81       	ld	r31, Z
     c7e:	e0 2d       	mov	r30, r0
     c80:	80 81       	ld	r24, Z
     c82:	48 2f       	mov	r20, r24
     c84:	eb 81       	ldd	r30, Y+3	; 0x03
     c86:	fc 81       	ldd	r31, Y+4	; 0x04
     c88:	80 81       	ld	r24, Z
     c8a:	86 95       	lsr	r24
     c8c:	86 95       	lsr	r24
     c8e:	8f 70       	andi	r24, 0x0F	; 15
     c90:	28 2f       	mov	r18, r24
     c92:	30 e0       	ldi	r19, 0x00	; 0
     c94:	81 e0       	ldi	r24, 0x01	; 1
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	02 2e       	mov	r0, r18
     c9a:	02 c0       	rjmp	.+4      	; 0xca0 <DIO_vidInit+0x15a>
     c9c:	88 0f       	add	r24, r24
     c9e:	99 1f       	adc	r25, r25
     ca0:	0a 94       	dec	r0
     ca2:	e2 f7       	brpl	.-8      	; 0xc9c <DIO_vidInit+0x156>
     ca4:	80 95       	com	r24
     ca6:	84 23       	and	r24, r20
     ca8:	8c 93       	st	X, r24
     caa:	9d c0       	rjmp	.+314    	; 0xde6 <DIO_vidInit+0x2a0>

			}

		}

		else if(pstrCurrentPinLoc->u8Direction==DIO_INPUT){
     cac:	eb 81       	ldd	r30, Y+3	; 0x03
     cae:	fc 81       	ldd	r31, Y+4	; 0x04
     cb0:	80 81       	ld	r24, Z
     cb2:	80 74       	andi	r24, 0x40	; 64
     cb4:	88 23       	and	r24, r24
     cb6:	09 f0       	breq	.+2      	; 0xcba <DIO_vidInit+0x174>
     cb8:	96 c0       	rjmp	.+300    	; 0xde6 <DIO_vidInit+0x2a0>

			BIT_CLEAR(* u8KarrDdra [pstrCurrentPinLoc->u8PortIdx ] ,  pstrCurrentPinLoc->u8PinIdx);
     cba:	eb 81       	ldd	r30, Y+3	; 0x03
     cbc:	fc 81       	ldd	r31, Y+4	; 0x04
     cbe:	80 81       	ld	r24, Z
     cc0:	83 70       	andi	r24, 0x03	; 3
     cc2:	88 2f       	mov	r24, r24
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	88 0f       	add	r24, r24
     cc8:	99 1f       	adc	r25, r25
     cca:	fc 01       	movw	r30, r24
     ccc:	eb 52       	subi	r30, 0x2B	; 43
     cce:	ff 4f       	sbci	r31, 0xFF	; 255
     cd0:	a0 81       	ld	r26, Z
     cd2:	b1 81       	ldd	r27, Z+1	; 0x01
     cd4:	eb 81       	ldd	r30, Y+3	; 0x03
     cd6:	fc 81       	ldd	r31, Y+4	; 0x04
     cd8:	80 81       	ld	r24, Z
     cda:	83 70       	andi	r24, 0x03	; 3
     cdc:	88 2f       	mov	r24, r24
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	88 0f       	add	r24, r24
     ce2:	99 1f       	adc	r25, r25
     ce4:	fc 01       	movw	r30, r24
     ce6:	eb 52       	subi	r30, 0x2B	; 43
     ce8:	ff 4f       	sbci	r31, 0xFF	; 255
     cea:	01 90       	ld	r0, Z+
     cec:	f0 81       	ld	r31, Z
     cee:	e0 2d       	mov	r30, r0
     cf0:	80 81       	ld	r24, Z
     cf2:	48 2f       	mov	r20, r24
     cf4:	eb 81       	ldd	r30, Y+3	; 0x03
     cf6:	fc 81       	ldd	r31, Y+4	; 0x04
     cf8:	80 81       	ld	r24, Z
     cfa:	86 95       	lsr	r24
     cfc:	86 95       	lsr	r24
     cfe:	8f 70       	andi	r24, 0x0F	; 15
     d00:	28 2f       	mov	r18, r24
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	02 2e       	mov	r0, r18
     d0a:	02 c0       	rjmp	.+4      	; 0xd10 <DIO_vidInit+0x1ca>
     d0c:	88 0f       	add	r24, r24
     d0e:	99 1f       	adc	r25, r25
     d10:	0a 94       	dec	r0
     d12:	e2 f7       	brpl	.-8      	; 0xd0c <DIO_vidInit+0x1c6>
     d14:	80 95       	com	r24
     d16:	84 23       	and	r24, r20
     d18:	8c 93       	st	X, r24



			if(pstrCurrentPinLoc->u8InputMode==DIO_PULLUP){
     d1a:	eb 81       	ldd	r30, Y+3	; 0x03
     d1c:	fc 81       	ldd	r31, Y+4	; 0x04
     d1e:	81 81       	ldd	r24, Z+1	; 0x01
     d20:	81 70       	andi	r24, 0x01	; 1
     d22:	88 23       	and	r24, r24
     d24:	81 f1       	breq	.+96     	; 0xd86 <DIO_vidInit+0x240>

				BIT_SET(* u8KarrPorts [pstrCurrentPinLoc->u8PortIdx ] ,  pstrCurrentPinLoc->u8PinIdx);
     d26:	eb 81       	ldd	r30, Y+3	; 0x03
     d28:	fc 81       	ldd	r31, Y+4	; 0x04
     d2a:	80 81       	ld	r24, Z
     d2c:	83 70       	andi	r24, 0x03	; 3
     d2e:	88 2f       	mov	r24, r24
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	88 0f       	add	r24, r24
     d34:	99 1f       	adc	r25, r25
     d36:	fc 01       	movw	r30, r24
     d38:	e3 53       	subi	r30, 0x33	; 51
     d3a:	ff 4f       	sbci	r31, 0xFF	; 255
     d3c:	a0 81       	ld	r26, Z
     d3e:	b1 81       	ldd	r27, Z+1	; 0x01
     d40:	eb 81       	ldd	r30, Y+3	; 0x03
     d42:	fc 81       	ldd	r31, Y+4	; 0x04
     d44:	80 81       	ld	r24, Z
     d46:	83 70       	andi	r24, 0x03	; 3
     d48:	88 2f       	mov	r24, r24
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	88 0f       	add	r24, r24
     d4e:	99 1f       	adc	r25, r25
     d50:	fc 01       	movw	r30, r24
     d52:	e3 53       	subi	r30, 0x33	; 51
     d54:	ff 4f       	sbci	r31, 0xFF	; 255
     d56:	01 90       	ld	r0, Z+
     d58:	f0 81       	ld	r31, Z
     d5a:	e0 2d       	mov	r30, r0
     d5c:	80 81       	ld	r24, Z
     d5e:	48 2f       	mov	r20, r24
     d60:	eb 81       	ldd	r30, Y+3	; 0x03
     d62:	fc 81       	ldd	r31, Y+4	; 0x04
     d64:	80 81       	ld	r24, Z
     d66:	86 95       	lsr	r24
     d68:	86 95       	lsr	r24
     d6a:	8f 70       	andi	r24, 0x0F	; 15
     d6c:	28 2f       	mov	r18, r24
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	81 e0       	ldi	r24, 0x01	; 1
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	02 2e       	mov	r0, r18
     d76:	02 c0       	rjmp	.+4      	; 0xd7c <DIO_vidInit+0x236>
     d78:	88 0f       	add	r24, r24
     d7a:	99 1f       	adc	r25, r25
     d7c:	0a 94       	dec	r0
     d7e:	e2 f7       	brpl	.-8      	; 0xd78 <DIO_vidInit+0x232>
     d80:	84 2b       	or	r24, r20
     d82:	8c 93       	st	X, r24
     d84:	30 c0       	rjmp	.+96     	; 0xde6 <DIO_vidInit+0x2a0>

			}

			else{

				BIT_CLEAR(* u8KarrPorts [pstrCurrentPinLoc->u8PortIdx ] ,  pstrCurrentPinLoc->u8PinIdx);
     d86:	eb 81       	ldd	r30, Y+3	; 0x03
     d88:	fc 81       	ldd	r31, Y+4	; 0x04
     d8a:	80 81       	ld	r24, Z
     d8c:	83 70       	andi	r24, 0x03	; 3
     d8e:	88 2f       	mov	r24, r24
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	88 0f       	add	r24, r24
     d94:	99 1f       	adc	r25, r25
     d96:	fc 01       	movw	r30, r24
     d98:	e3 53       	subi	r30, 0x33	; 51
     d9a:	ff 4f       	sbci	r31, 0xFF	; 255
     d9c:	a0 81       	ld	r26, Z
     d9e:	b1 81       	ldd	r27, Z+1	; 0x01
     da0:	eb 81       	ldd	r30, Y+3	; 0x03
     da2:	fc 81       	ldd	r31, Y+4	; 0x04
     da4:	80 81       	ld	r24, Z
     da6:	83 70       	andi	r24, 0x03	; 3
     da8:	88 2f       	mov	r24, r24
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	88 0f       	add	r24, r24
     dae:	99 1f       	adc	r25, r25
     db0:	fc 01       	movw	r30, r24
     db2:	e3 53       	subi	r30, 0x33	; 51
     db4:	ff 4f       	sbci	r31, 0xFF	; 255
     db6:	01 90       	ld	r0, Z+
     db8:	f0 81       	ld	r31, Z
     dba:	e0 2d       	mov	r30, r0
     dbc:	80 81       	ld	r24, Z
     dbe:	48 2f       	mov	r20, r24
     dc0:	eb 81       	ldd	r30, Y+3	; 0x03
     dc2:	fc 81       	ldd	r31, Y+4	; 0x04
     dc4:	80 81       	ld	r24, Z
     dc6:	86 95       	lsr	r24
     dc8:	86 95       	lsr	r24
     dca:	8f 70       	andi	r24, 0x0F	; 15
     dcc:	28 2f       	mov	r18, r24
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	81 e0       	ldi	r24, 0x01	; 1
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	02 2e       	mov	r0, r18
     dd6:	02 c0       	rjmp	.+4      	; 0xddc <DIO_vidInit+0x296>
     dd8:	88 0f       	add	r24, r24
     dda:	99 1f       	adc	r25, r25
     ddc:	0a 94       	dec	r0
     dde:	e2 f7       	brpl	.-8      	; 0xdd8 <DIO_vidInit+0x292>
     de0:	80 95       	com	r24
     de2:	84 23       	and	r24, r20
     de4:	8c 93       	st	X, r24



	u8 u8PinIdxLoc=0;

	for (u8PinIdxLoc = 0; u8PinIdxLoc < DIO_PIN_NUM; ++u8PinIdxLoc) {
     de6:	8f 81       	ldd	r24, Y+7	; 0x07
     de8:	8f 5f       	subi	r24, 0xFF	; 255
     dea:	8f 83       	std	Y+7, r24	; 0x07
     dec:	8f 81       	ldd	r24, Y+7	; 0x07
     dee:	86 30       	cpi	r24, 0x06	; 6
     df0:	08 f4       	brcc	.+2      	; 0xdf4 <DIO_vidInit+0x2ae>
     df2:	b6 ce       	rjmp	.-660    	; 0xb60 <DIO_vidInit+0x1a>
	}




	u8 u8PortNumLoc=0;
     df4:	1e 82       	std	Y+6, r1	; 0x06

	    u8 u8BitIdx;

	    for (u8PortNumLoc = 0; u8PortNumLoc < DIO_PORT_NUM; ++u8PortNumLoc) {
     df6:	1e 82       	std	Y+6, r1	; 0x06
     df8:	bf c0       	rjmp	.+382    	; 0xf78 <DIO_vidInit+0x432>





	        const DIO_tstrPORT * pstrCurrentPortLoc = & DIO_kastrPortCg[u8PortNumLoc];
     dfa:	8e 81       	ldd	r24, Y+6	; 0x06
     dfc:	28 2f       	mov	r18, r24
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	c9 01       	movw	r24, r18
     e02:	88 0f       	add	r24, r24
     e04:	99 1f       	adc	r25, r25
     e06:	88 0f       	add	r24, r24
     e08:	99 1f       	adc	r25, r25
     e0a:	82 0f       	add	r24, r18
     e0c:	93 1f       	adc	r25, r19
     e0e:	88 53       	subi	r24, 0x38	; 56
     e10:	9f 4f       	sbci	r25, 0xFF	; 255
     e12:	9a 83       	std	Y+2, r25	; 0x02
     e14:	89 83       	std	Y+1, r24	; 0x01



	        *(u8KarrDdra[pstrCurrentPortLoc->u8PortIdx])= pstrCurrentPortLoc->u8Direction & pstrCurrentPortLoc->u8Mask;
     e16:	e9 81       	ldd	r30, Y+1	; 0x01
     e18:	fa 81       	ldd	r31, Y+2	; 0x02
     e1a:	80 81       	ld	r24, Z
     e1c:	88 2f       	mov	r24, r24
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	88 0f       	add	r24, r24
     e22:	99 1f       	adc	r25, r25
     e24:	fc 01       	movw	r30, r24
     e26:	eb 52       	subi	r30, 0x2B	; 43
     e28:	ff 4f       	sbci	r31, 0xFF	; 255
     e2a:	a0 81       	ld	r26, Z
     e2c:	b1 81       	ldd	r27, Z+1	; 0x01
     e2e:	e9 81       	ldd	r30, Y+1	; 0x01
     e30:	fa 81       	ldd	r31, Y+2	; 0x02
     e32:	92 81       	ldd	r25, Z+2	; 0x02
     e34:	e9 81       	ldd	r30, Y+1	; 0x01
     e36:	fa 81       	ldd	r31, Y+2	; 0x02
     e38:	81 81       	ldd	r24, Z+1	; 0x01
     e3a:	89 23       	and	r24, r25
     e3c:	8c 93       	st	X, r24



	        for(u8BitIdx=0;u8BitIdx<8;u8BitIdx++)
     e3e:	1d 82       	std	Y+5, r1	; 0x05
     e40:	94 c0       	rjmp	.+296    	; 0xf6a <DIO_vidInit+0x424>

	        {

	            if( (BIT_GET(((pstrCurrentPortLoc->u8Direction) & (pstrCurrentPortLoc->u8Mask)),u8BitIdx))==DIO_INPUT)
     e42:	e9 81       	ldd	r30, Y+1	; 0x01
     e44:	fa 81       	ldd	r31, Y+2	; 0x02
     e46:	92 81       	ldd	r25, Z+2	; 0x02
     e48:	e9 81       	ldd	r30, Y+1	; 0x01
     e4a:	fa 81       	ldd	r31, Y+2	; 0x02
     e4c:	81 81       	ldd	r24, Z+1	; 0x01
     e4e:	89 23       	and	r24, r25
     e50:	28 2f       	mov	r18, r24
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	8d 81       	ldd	r24, Y+5	; 0x05
     e56:	88 2f       	mov	r24, r24
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	a9 01       	movw	r20, r18
     e5c:	02 c0       	rjmp	.+4      	; 0xe62 <DIO_vidInit+0x31c>
     e5e:	55 95       	asr	r21
     e60:	47 95       	ror	r20
     e62:	8a 95       	dec	r24
     e64:	e2 f7       	brpl	.-8      	; 0xe5e <DIO_vidInit+0x318>
     e66:	ca 01       	movw	r24, r20
     e68:	81 70       	andi	r24, 0x01	; 1
     e6a:	90 70       	andi	r25, 0x00	; 0
     e6c:	00 97       	sbiw	r24, 0x00	; 0
     e6e:	09 f0       	breq	.+2      	; 0xe72 <DIO_vidInit+0x32c>
     e70:	3d c0       	rjmp	.+122    	; 0xeec <DIO_vidInit+0x3a6>

	            {

	                BIT_ASSGIN((*u8KarrPorts[pstrCurrentPortLoc->u8PortIdx]),u8BitIdx,(pstrCurrentPortLoc->u8InputMode & pstrCurrentPortLoc->u8Mask));
     e72:	e9 81       	ldd	r30, Y+1	; 0x01
     e74:	fa 81       	ldd	r31, Y+2	; 0x02
     e76:	80 81       	ld	r24, Z
     e78:	88 2f       	mov	r24, r24
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	fc 01       	movw	r30, r24
     e82:	e3 53       	subi	r30, 0x33	; 51
     e84:	ff 4f       	sbci	r31, 0xFF	; 255
     e86:	a0 81       	ld	r26, Z
     e88:	b1 81       	ldd	r27, Z+1	; 0x01
     e8a:	e9 81       	ldd	r30, Y+1	; 0x01
     e8c:	fa 81       	ldd	r31, Y+2	; 0x02
     e8e:	80 81       	ld	r24, Z
     e90:	88 2f       	mov	r24, r24
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	88 0f       	add	r24, r24
     e96:	99 1f       	adc	r25, r25
     e98:	fc 01       	movw	r30, r24
     e9a:	e3 53       	subi	r30, 0x33	; 51
     e9c:	ff 4f       	sbci	r31, 0xFF	; 255
     e9e:	01 90       	ld	r0, Z+
     ea0:	f0 81       	ld	r31, Z
     ea2:	e0 2d       	mov	r30, r0
     ea4:	80 81       	ld	r24, Z
     ea6:	48 2f       	mov	r20, r24
     ea8:	8d 81       	ldd	r24, Y+5	; 0x05
     eaa:	28 2f       	mov	r18, r24
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	02 c0       	rjmp	.+4      	; 0xeb8 <DIO_vidInit+0x372>
     eb4:	88 0f       	add	r24, r24
     eb6:	99 1f       	adc	r25, r25
     eb8:	2a 95       	dec	r18
     eba:	e2 f7       	brpl	.-8      	; 0xeb4 <DIO_vidInit+0x36e>
     ebc:	80 95       	com	r24
     ebe:	48 23       	and	r20, r24
     ec0:	e9 81       	ldd	r30, Y+1	; 0x01
     ec2:	fa 81       	ldd	r31, Y+2	; 0x02
     ec4:	94 81       	ldd	r25, Z+4	; 0x04
     ec6:	e9 81       	ldd	r30, Y+1	; 0x01
     ec8:	fa 81       	ldd	r31, Y+2	; 0x02
     eca:	81 81       	ldd	r24, Z+1	; 0x01
     ecc:	89 23       	and	r24, r25
     ece:	28 2f       	mov	r18, r24
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	8d 81       	ldd	r24, Y+5	; 0x05
     ed4:	88 2f       	mov	r24, r24
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	b9 01       	movw	r22, r18
     eda:	02 c0       	rjmp	.+4      	; 0xee0 <DIO_vidInit+0x39a>
     edc:	66 0f       	add	r22, r22
     ede:	77 1f       	adc	r23, r23
     ee0:	8a 95       	dec	r24
     ee2:	e2 f7       	brpl	.-8      	; 0xedc <DIO_vidInit+0x396>
     ee4:	cb 01       	movw	r24, r22
     ee6:	84 2b       	or	r24, r20
     ee8:	8c 93       	st	X, r24
     eea:	3c c0       	rjmp	.+120    	; 0xf64 <DIO_vidInit+0x41e>

	            }else{

	                BIT_ASSGIN((*u8KarrPorts[pstrCurrentPortLoc->u8PortIdx]),u8BitIdx,(pstrCurrentPortLoc->u8InitValue & pstrCurrentPortLoc->u8Mask));
     eec:	e9 81       	ldd	r30, Y+1	; 0x01
     eee:	fa 81       	ldd	r31, Y+2	; 0x02
     ef0:	80 81       	ld	r24, Z
     ef2:	88 2f       	mov	r24, r24
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	88 0f       	add	r24, r24
     ef8:	99 1f       	adc	r25, r25
     efa:	fc 01       	movw	r30, r24
     efc:	e3 53       	subi	r30, 0x33	; 51
     efe:	ff 4f       	sbci	r31, 0xFF	; 255
     f00:	a0 81       	ld	r26, Z
     f02:	b1 81       	ldd	r27, Z+1	; 0x01
     f04:	e9 81       	ldd	r30, Y+1	; 0x01
     f06:	fa 81       	ldd	r31, Y+2	; 0x02
     f08:	80 81       	ld	r24, Z
     f0a:	88 2f       	mov	r24, r24
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	88 0f       	add	r24, r24
     f10:	99 1f       	adc	r25, r25
     f12:	fc 01       	movw	r30, r24
     f14:	e3 53       	subi	r30, 0x33	; 51
     f16:	ff 4f       	sbci	r31, 0xFF	; 255
     f18:	01 90       	ld	r0, Z+
     f1a:	f0 81       	ld	r31, Z
     f1c:	e0 2d       	mov	r30, r0
     f1e:	80 81       	ld	r24, Z
     f20:	48 2f       	mov	r20, r24
     f22:	8d 81       	ldd	r24, Y+5	; 0x05
     f24:	28 2f       	mov	r18, r24
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	02 c0       	rjmp	.+4      	; 0xf32 <DIO_vidInit+0x3ec>
     f2e:	88 0f       	add	r24, r24
     f30:	99 1f       	adc	r25, r25
     f32:	2a 95       	dec	r18
     f34:	e2 f7       	brpl	.-8      	; 0xf2e <DIO_vidInit+0x3e8>
     f36:	80 95       	com	r24
     f38:	48 23       	and	r20, r24
     f3a:	e9 81       	ldd	r30, Y+1	; 0x01
     f3c:	fa 81       	ldd	r31, Y+2	; 0x02
     f3e:	93 81       	ldd	r25, Z+3	; 0x03
     f40:	e9 81       	ldd	r30, Y+1	; 0x01
     f42:	fa 81       	ldd	r31, Y+2	; 0x02
     f44:	81 81       	ldd	r24, Z+1	; 0x01
     f46:	89 23       	and	r24, r25
     f48:	28 2f       	mov	r18, r24
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	8d 81       	ldd	r24, Y+5	; 0x05
     f4e:	88 2f       	mov	r24, r24
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	b9 01       	movw	r22, r18
     f54:	02 c0       	rjmp	.+4      	; 0xf5a <DIO_vidInit+0x414>
     f56:	66 0f       	add	r22, r22
     f58:	77 1f       	adc	r23, r23
     f5a:	8a 95       	dec	r24
     f5c:	e2 f7       	brpl	.-8      	; 0xf56 <DIO_vidInit+0x410>
     f5e:	cb 01       	movw	r24, r22
     f60:	84 2b       	or	r24, r20
     f62:	8c 93       	st	X, r24

	        *(u8KarrDdra[pstrCurrentPortLoc->u8PortIdx])= pstrCurrentPortLoc->u8Direction & pstrCurrentPortLoc->u8Mask;



	        for(u8BitIdx=0;u8BitIdx<8;u8BitIdx++)
     f64:	8d 81       	ldd	r24, Y+5	; 0x05
     f66:	8f 5f       	subi	r24, 0xFF	; 255
     f68:	8d 83       	std	Y+5, r24	; 0x05
     f6a:	8d 81       	ldd	r24, Y+5	; 0x05
     f6c:	88 30       	cpi	r24, 0x08	; 8
     f6e:	08 f4       	brcc	.+2      	; 0xf72 <DIO_vidInit+0x42c>
     f70:	68 cf       	rjmp	.-304    	; 0xe42 <DIO_vidInit+0x2fc>

	u8 u8PortNumLoc=0;

	    u8 u8BitIdx;

	    for (u8PortNumLoc = 0; u8PortNumLoc < DIO_PORT_NUM; ++u8PortNumLoc) {
     f72:	8e 81       	ldd	r24, Y+6	; 0x06
     f74:	8f 5f       	subi	r24, 0xFF	; 255
     f76:	8e 83       	std	Y+6, r24	; 0x06
     f78:	8e 81       	ldd	r24, Y+6	; 0x06
     f7a:	88 23       	and	r24, r24
     f7c:	09 f4       	brne	.+2      	; 0xf80 <DIO_vidInit+0x43a>
     f7e:	3d cf       	rjmp	.-390    	; 0xdfa <DIO_vidInit+0x2b4>





}
     f80:	27 96       	adiw	r28, 0x07	; 7
     f82:	0f b6       	in	r0, 0x3f	; 63
     f84:	f8 94       	cli
     f86:	de bf       	out	0x3e, r29	; 62
     f88:	0f be       	out	0x3f, r0	; 63
     f8a:	cd bf       	out	0x3d, r28	; 61
     f8c:	cf 91       	pop	r28
     f8e:	df 91       	pop	r29
     f90:	08 95       	ret

00000f92 <DIO_enuSetPinValue>:


STD_tenuReturn DIO_enuSetPinValue(u8 u8PinIdxCpy,u8 u8ValueCpy){
     f92:	df 93       	push	r29
     f94:	cf 93       	push	r28
     f96:	00 d0       	rcall	.+0      	; 0xf98 <DIO_enuSetPinValue+0x6>
     f98:	00 d0       	rcall	.+0      	; 0xf9a <DIO_enuSetPinValue+0x8>
     f9a:	0f 92       	push	r0
     f9c:	cd b7       	in	r28, 0x3d	; 61
     f9e:	de b7       	in	r29, 0x3e	; 62
     fa0:	8c 83       	std	Y+4, r24	; 0x04
     fa2:	6d 83       	std	Y+5, r22	; 0x05



	STD_tenuReturn status;

	if( u8PinIdxCpy>=DIO_PIN_NUM  ){
     fa4:	8c 81       	ldd	r24, Y+4	; 0x04
     fa6:	86 30       	cpi	r24, 0x06	; 6
     fa8:	18 f0       	brcs	.+6      	; 0xfb0 <DIO_enuSetPinValue+0x1e>

		status=STD_enuOutOfRange;
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	8b 83       	std	Y+3, r24	; 0x03
     fae:	76 c0       	rjmp	.+236    	; 0x109c <DIO_enuSetPinValue+0x10a>

	}
	else if( (u8ValueCpy!=DIO_HIGH)&&(u8ValueCpy!=DIO_LOW) ){
     fb0:	8d 81       	ldd	r24, Y+5	; 0x05
     fb2:	81 30       	cpi	r24, 0x01	; 1
     fb4:	31 f0       	breq	.+12     	; 0xfc2 <DIO_enuSetPinValue+0x30>
     fb6:	8d 81       	ldd	r24, Y+5	; 0x05
     fb8:	88 23       	and	r24, r24
     fba:	19 f0       	breq	.+6      	; 0xfc2 <DIO_enuSetPinValue+0x30>

		status=STD_enuNOK;
     fbc:	82 e0       	ldi	r24, 0x02	; 2
     fbe:	8b 83       	std	Y+3, r24	; 0x03
     fc0:	6d c0       	rjmp	.+218    	; 0x109c <DIO_enuSetPinValue+0x10a>

	else
	{


		const DIO_tstrPIN *pstrCurrentPinLoc=&DIO_kastrPinCg[u8PinIdxCpy];
     fc2:	8c 81       	ldd	r24, Y+4	; 0x04
     fc4:	88 2f       	mov	r24, r24
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	88 0f       	add	r24, r24
     fca:	99 1f       	adc	r25, r25
     fcc:	84 54       	subi	r24, 0x44	; 68
     fce:	9f 4f       	sbci	r25, 0xFF	; 255
     fd0:	9a 83       	std	Y+2, r25	; 0x02
     fd2:	89 83       	std	Y+1, r24	; 0x01

		if(u8ValueCpy==DIO_HIGH){
     fd4:	8d 81       	ldd	r24, Y+5	; 0x05
     fd6:	81 30       	cpi	r24, 0x01	; 1
     fd8:	81 f5       	brne	.+96     	; 0x103a <DIO_enuSetPinValue+0xa8>
			BIT_SET(* u8KarrPorts [pstrCurrentPinLoc->u8PortIdx ] ,  pstrCurrentPinLoc->u8PinIdx);
     fda:	e9 81       	ldd	r30, Y+1	; 0x01
     fdc:	fa 81       	ldd	r31, Y+2	; 0x02
     fde:	80 81       	ld	r24, Z
     fe0:	83 70       	andi	r24, 0x03	; 3
     fe2:	88 2f       	mov	r24, r24
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	88 0f       	add	r24, r24
     fe8:	99 1f       	adc	r25, r25
     fea:	fc 01       	movw	r30, r24
     fec:	e3 53       	subi	r30, 0x33	; 51
     fee:	ff 4f       	sbci	r31, 0xFF	; 255
     ff0:	a0 81       	ld	r26, Z
     ff2:	b1 81       	ldd	r27, Z+1	; 0x01
     ff4:	e9 81       	ldd	r30, Y+1	; 0x01
     ff6:	fa 81       	ldd	r31, Y+2	; 0x02
     ff8:	80 81       	ld	r24, Z
     ffa:	83 70       	andi	r24, 0x03	; 3
     ffc:	88 2f       	mov	r24, r24
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	88 0f       	add	r24, r24
    1002:	99 1f       	adc	r25, r25
    1004:	fc 01       	movw	r30, r24
    1006:	e3 53       	subi	r30, 0x33	; 51
    1008:	ff 4f       	sbci	r31, 0xFF	; 255
    100a:	01 90       	ld	r0, Z+
    100c:	f0 81       	ld	r31, Z
    100e:	e0 2d       	mov	r30, r0
    1010:	80 81       	ld	r24, Z
    1012:	48 2f       	mov	r20, r24
    1014:	e9 81       	ldd	r30, Y+1	; 0x01
    1016:	fa 81       	ldd	r31, Y+2	; 0x02
    1018:	80 81       	ld	r24, Z
    101a:	86 95       	lsr	r24
    101c:	86 95       	lsr	r24
    101e:	8f 70       	andi	r24, 0x0F	; 15
    1020:	28 2f       	mov	r18, r24
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	81 e0       	ldi	r24, 0x01	; 1
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	02 2e       	mov	r0, r18
    102a:	02 c0       	rjmp	.+4      	; 0x1030 <DIO_enuSetPinValue+0x9e>
    102c:	88 0f       	add	r24, r24
    102e:	99 1f       	adc	r25, r25
    1030:	0a 94       	dec	r0
    1032:	e2 f7       	brpl	.-8      	; 0x102c <DIO_enuSetPinValue+0x9a>
    1034:	84 2b       	or	r24, r20
    1036:	8c 93       	st	X, r24
    1038:	30 c0       	rjmp	.+96     	; 0x109a <DIO_enuSetPinValue+0x108>
		}
		else{
			BIT_CLEAR(* u8KarrPorts [pstrCurrentPinLoc->u8PortIdx ] ,  pstrCurrentPinLoc->u8PinIdx);
    103a:	e9 81       	ldd	r30, Y+1	; 0x01
    103c:	fa 81       	ldd	r31, Y+2	; 0x02
    103e:	80 81       	ld	r24, Z
    1040:	83 70       	andi	r24, 0x03	; 3
    1042:	88 2f       	mov	r24, r24
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	88 0f       	add	r24, r24
    1048:	99 1f       	adc	r25, r25
    104a:	fc 01       	movw	r30, r24
    104c:	e3 53       	subi	r30, 0x33	; 51
    104e:	ff 4f       	sbci	r31, 0xFF	; 255
    1050:	a0 81       	ld	r26, Z
    1052:	b1 81       	ldd	r27, Z+1	; 0x01
    1054:	e9 81       	ldd	r30, Y+1	; 0x01
    1056:	fa 81       	ldd	r31, Y+2	; 0x02
    1058:	80 81       	ld	r24, Z
    105a:	83 70       	andi	r24, 0x03	; 3
    105c:	88 2f       	mov	r24, r24
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	88 0f       	add	r24, r24
    1062:	99 1f       	adc	r25, r25
    1064:	fc 01       	movw	r30, r24
    1066:	e3 53       	subi	r30, 0x33	; 51
    1068:	ff 4f       	sbci	r31, 0xFF	; 255
    106a:	01 90       	ld	r0, Z+
    106c:	f0 81       	ld	r31, Z
    106e:	e0 2d       	mov	r30, r0
    1070:	80 81       	ld	r24, Z
    1072:	48 2f       	mov	r20, r24
    1074:	e9 81       	ldd	r30, Y+1	; 0x01
    1076:	fa 81       	ldd	r31, Y+2	; 0x02
    1078:	80 81       	ld	r24, Z
    107a:	86 95       	lsr	r24
    107c:	86 95       	lsr	r24
    107e:	8f 70       	andi	r24, 0x0F	; 15
    1080:	28 2f       	mov	r18, r24
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	02 2e       	mov	r0, r18
    108a:	02 c0       	rjmp	.+4      	; 0x1090 <DIO_enuSetPinValue+0xfe>
    108c:	88 0f       	add	r24, r24
    108e:	99 1f       	adc	r25, r25
    1090:	0a 94       	dec	r0
    1092:	e2 f7       	brpl	.-8      	; 0x108c <DIO_enuSetPinValue+0xfa>
    1094:	80 95       	com	r24
    1096:	84 23       	and	r24, r20
    1098:	8c 93       	st	X, r24
		}

		status=STD_enuOK;
    109a:	1b 82       	std	Y+3, r1	; 0x03

	}



	return  status ;
    109c:	8b 81       	ldd	r24, Y+3	; 0x03
}
    109e:	0f 90       	pop	r0
    10a0:	0f 90       	pop	r0
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	0f 90       	pop	r0
    10a8:	cf 91       	pop	r28
    10aa:	df 91       	pop	r29
    10ac:	08 95       	ret

000010ae <DIO_enuGetPinValue>:




STD_tenuReturn DIO_enuGetPinValue(u8 u8PinIdxCpy,u8 * pu8ValueCpy){
    10ae:	df 93       	push	r29
    10b0:	cf 93       	push	r28
    10b2:	cd b7       	in	r28, 0x3d	; 61
    10b4:	de b7       	in	r29, 0x3e	; 62
    10b6:	27 97       	sbiw	r28, 0x07	; 7
    10b8:	0f b6       	in	r0, 0x3f	; 63
    10ba:	f8 94       	cli
    10bc:	de bf       	out	0x3e, r29	; 62
    10be:	0f be       	out	0x3f, r0	; 63
    10c0:	cd bf       	out	0x3d, r28	; 61
    10c2:	8d 83       	std	Y+5, r24	; 0x05
    10c4:	7f 83       	std	Y+7, r23	; 0x07
    10c6:	6e 83       	std	Y+6, r22	; 0x06

	STD_tenuReturn status;


	if( u8PinIdxCpy>=DIO_PIN_NUM  ){
    10c8:	8d 81       	ldd	r24, Y+5	; 0x05
    10ca:	86 30       	cpi	r24, 0x06	; 6
    10cc:	18 f0       	brcs	.+6      	; 0x10d4 <DIO_enuGetPinValue+0x26>

		status=STD_enuOutOfRange;
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	8c 83       	std	Y+4, r24	; 0x04
    10d2:	3e c0       	rjmp	.+124    	; 0x1150 <DIO_enuGetPinValue+0xa2>

	}else if(pu8ValueCpy==STD_NULL){
    10d4:	8e 81       	ldd	r24, Y+6	; 0x06
    10d6:	9f 81       	ldd	r25, Y+7	; 0x07
    10d8:	00 97       	sbiw	r24, 0x00	; 0
    10da:	19 f4       	brne	.+6      	; 0x10e2 <DIO_enuGetPinValue+0x34>

		status= STD_enuNullPtr;
    10dc:	83 e0       	ldi	r24, 0x03	; 3
    10de:	8c 83       	std	Y+4, r24	; 0x04
    10e0:	37 c0       	rjmp	.+110    	; 0x1150 <DIO_enuGetPinValue+0xa2>

	}
	else
	{
		const DIO_tstrPIN *pstrCurrentPinLoc=&DIO_kastrPinCg[u8PinIdxCpy];
    10e2:	8d 81       	ldd	r24, Y+5	; 0x05
    10e4:	88 2f       	mov	r24, r24
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	88 0f       	add	r24, r24
    10ea:	99 1f       	adc	r25, r25
    10ec:	84 54       	subi	r24, 0x44	; 68
    10ee:	9f 4f       	sbci	r25, 0xFF	; 255
    10f0:	9b 83       	std	Y+3, r25	; 0x03
    10f2:	8a 83       	std	Y+2, r24	; 0x02

		u8 temp = BIT_GET(*u8KarrPins [pstrCurrentPinLoc->u8PortIdx ] ,  pstrCurrentPinLoc->u8PinIdx);
    10f4:	ea 81       	ldd	r30, Y+2	; 0x02
    10f6:	fb 81       	ldd	r31, Y+3	; 0x03
    10f8:	80 81       	ld	r24, Z
    10fa:	83 70       	andi	r24, 0x03	; 3
    10fc:	88 2f       	mov	r24, r24
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	88 0f       	add	r24, r24
    1102:	99 1f       	adc	r25, r25
    1104:	fc 01       	movw	r30, r24
    1106:	e3 52       	subi	r30, 0x23	; 35
    1108:	ff 4f       	sbci	r31, 0xFF	; 255
    110a:	01 90       	ld	r0, Z+
    110c:	f0 81       	ld	r31, Z
    110e:	e0 2d       	mov	r30, r0
    1110:	80 81       	ld	r24, Z
    1112:	28 2f       	mov	r18, r24
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	ea 81       	ldd	r30, Y+2	; 0x02
    1118:	fb 81       	ldd	r31, Y+3	; 0x03
    111a:	80 81       	ld	r24, Z
    111c:	86 95       	lsr	r24
    111e:	86 95       	lsr	r24
    1120:	8f 70       	andi	r24, 0x0F	; 15
    1122:	88 2f       	mov	r24, r24
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	a9 01       	movw	r20, r18
    1128:	02 c0       	rjmp	.+4      	; 0x112e <DIO_enuGetPinValue+0x80>
    112a:	55 95       	asr	r21
    112c:	47 95       	ror	r20
    112e:	8a 95       	dec	r24
    1130:	e2 f7       	brpl	.-8      	; 0x112a <DIO_enuGetPinValue+0x7c>
    1132:	ca 01       	movw	r24, r20
    1134:	81 70       	andi	r24, 0x01	; 1
    1136:	89 83       	std	Y+1, r24	; 0x01



		if( (temp==0)){
    1138:	89 81       	ldd	r24, Y+1	; 0x01
    113a:	88 23       	and	r24, r24
    113c:	21 f4       	brne	.+8      	; 0x1146 <DIO_enuGetPinValue+0x98>

			*pu8ValueCpy=DIO_LOW;
    113e:	ee 81       	ldd	r30, Y+6	; 0x06
    1140:	ff 81       	ldd	r31, Y+7	; 0x07
    1142:	10 82       	st	Z, r1
    1144:	04 c0       	rjmp	.+8      	; 0x114e <DIO_enuGetPinValue+0xa0>

			//status=STD_enuNOK;

		}
		else{
			*pu8ValueCpy=DIO_HIGH;
    1146:	ee 81       	ldd	r30, Y+6	; 0x06
    1148:	ff 81       	ldd	r31, Y+7	; 0x07
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	80 83       	st	Z, r24



		}

		status=STD_enuOK;
    114e:	1c 82       	std	Y+4, r1	; 0x04

	}
	return  status ;
    1150:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1152:	27 96       	adiw	r28, 0x07	; 7
    1154:	0f b6       	in	r0, 0x3f	; 63
    1156:	f8 94       	cli
    1158:	de bf       	out	0x3e, r29	; 62
    115a:	0f be       	out	0x3f, r0	; 63
    115c:	cd bf       	out	0x3d, r28	; 61
    115e:	cf 91       	pop	r28
    1160:	df 91       	pop	r29
    1162:	08 95       	ret

00001164 <DIO_enuSetPinDirection>:
		STD_enuOK,
		STD_enuOutOfRange
		STD_enuNOK.

 */
STD_tenuReturn DIO_enuSetPinDirection(u8 u8PinIdxCpy,u8 u8DirCpy){
    1164:	df 93       	push	r29
    1166:	cf 93       	push	r28
    1168:	00 d0       	rcall	.+0      	; 0x116a <DIO_enuSetPinDirection+0x6>
    116a:	00 d0       	rcall	.+0      	; 0x116c <DIO_enuSetPinDirection+0x8>
    116c:	0f 92       	push	r0
    116e:	cd b7       	in	r28, 0x3d	; 61
    1170:	de b7       	in	r29, 0x3e	; 62
    1172:	8c 83       	std	Y+4, r24	; 0x04
    1174:	6d 83       	std	Y+5, r22	; 0x05

	STD_tenuReturn status;

	if( u8PinIdxCpy>=DIO_PIN_NUM  ){
    1176:	8c 81       	ldd	r24, Y+4	; 0x04
    1178:	86 30       	cpi	r24, 0x06	; 6
    117a:	18 f0       	brcs	.+6      	; 0x1182 <DIO_enuSetPinDirection+0x1e>

		status=STD_enuOutOfRange;
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	8b 83       	std	Y+3, r24	; 0x03
    1180:	76 c0       	rjmp	.+236    	; 0x126e <DIO_enuSetPinDirection+0x10a>

	}
	else if( (u8DirCpy!=DIO_INPUT)&&(u8DirCpy!=DIO_OUTPUT) ){
    1182:	8d 81       	ldd	r24, Y+5	; 0x05
    1184:	88 23       	and	r24, r24
    1186:	31 f0       	breq	.+12     	; 0x1194 <DIO_enuSetPinDirection+0x30>
    1188:	8d 81       	ldd	r24, Y+5	; 0x05
    118a:	81 30       	cpi	r24, 0x01	; 1
    118c:	19 f0       	breq	.+6      	; 0x1194 <DIO_enuSetPinDirection+0x30>

		status=STD_enuNOK;
    118e:	82 e0       	ldi	r24, 0x02	; 2
    1190:	8b 83       	std	Y+3, r24	; 0x03
    1192:	6d c0       	rjmp	.+218    	; 0x126e <DIO_enuSetPinDirection+0x10a>
	}

	else
	{

		const DIO_tstrPIN *pstrCurrentPinLoc=&DIO_kastrPinCg[u8PinIdxCpy];
    1194:	8c 81       	ldd	r24, Y+4	; 0x04
    1196:	88 2f       	mov	r24, r24
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	88 0f       	add	r24, r24
    119c:	99 1f       	adc	r25, r25
    119e:	84 54       	subi	r24, 0x44	; 68
    11a0:	9f 4f       	sbci	r25, 0xFF	; 255
    11a2:	9a 83       	std	Y+2, r25	; 0x02
    11a4:	89 83       	std	Y+1, r24	; 0x01

		if(u8DirCpy==DIO_OUTPUT){
    11a6:	8d 81       	ldd	r24, Y+5	; 0x05
    11a8:	81 30       	cpi	r24, 0x01	; 1
    11aa:	81 f5       	brne	.+96     	; 0x120c <DIO_enuSetPinDirection+0xa8>
			BIT_SET(* u8KarrDdra [pstrCurrentPinLoc->u8PortIdx ] ,  pstrCurrentPinLoc->u8PinIdx);
    11ac:	e9 81       	ldd	r30, Y+1	; 0x01
    11ae:	fa 81       	ldd	r31, Y+2	; 0x02
    11b0:	80 81       	ld	r24, Z
    11b2:	83 70       	andi	r24, 0x03	; 3
    11b4:	88 2f       	mov	r24, r24
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	88 0f       	add	r24, r24
    11ba:	99 1f       	adc	r25, r25
    11bc:	fc 01       	movw	r30, r24
    11be:	eb 52       	subi	r30, 0x2B	; 43
    11c0:	ff 4f       	sbci	r31, 0xFF	; 255
    11c2:	a0 81       	ld	r26, Z
    11c4:	b1 81       	ldd	r27, Z+1	; 0x01
    11c6:	e9 81       	ldd	r30, Y+1	; 0x01
    11c8:	fa 81       	ldd	r31, Y+2	; 0x02
    11ca:	80 81       	ld	r24, Z
    11cc:	83 70       	andi	r24, 0x03	; 3
    11ce:	88 2f       	mov	r24, r24
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	88 0f       	add	r24, r24
    11d4:	99 1f       	adc	r25, r25
    11d6:	fc 01       	movw	r30, r24
    11d8:	eb 52       	subi	r30, 0x2B	; 43
    11da:	ff 4f       	sbci	r31, 0xFF	; 255
    11dc:	01 90       	ld	r0, Z+
    11de:	f0 81       	ld	r31, Z
    11e0:	e0 2d       	mov	r30, r0
    11e2:	80 81       	ld	r24, Z
    11e4:	48 2f       	mov	r20, r24
    11e6:	e9 81       	ldd	r30, Y+1	; 0x01
    11e8:	fa 81       	ldd	r31, Y+2	; 0x02
    11ea:	80 81       	ld	r24, Z
    11ec:	86 95       	lsr	r24
    11ee:	86 95       	lsr	r24
    11f0:	8f 70       	andi	r24, 0x0F	; 15
    11f2:	28 2f       	mov	r18, r24
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	81 e0       	ldi	r24, 0x01	; 1
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	02 2e       	mov	r0, r18
    11fc:	02 c0       	rjmp	.+4      	; 0x1202 <DIO_enuSetPinDirection+0x9e>
    11fe:	88 0f       	add	r24, r24
    1200:	99 1f       	adc	r25, r25
    1202:	0a 94       	dec	r0
    1204:	e2 f7       	brpl	.-8      	; 0x11fe <DIO_enuSetPinDirection+0x9a>
    1206:	84 2b       	or	r24, r20
    1208:	8c 93       	st	X, r24
    120a:	30 c0       	rjmp	.+96     	; 0x126c <DIO_enuSetPinDirection+0x108>
			//pstrCurrentPinLoc->u8Direction=DIO_OUTPUT;
		}
		else{
			BIT_CLEAR(* u8KarrDdra [pstrCurrentPinLoc->u8PortIdx ] ,  pstrCurrentPinLoc->u8PinIdx);
    120c:	e9 81       	ldd	r30, Y+1	; 0x01
    120e:	fa 81       	ldd	r31, Y+2	; 0x02
    1210:	80 81       	ld	r24, Z
    1212:	83 70       	andi	r24, 0x03	; 3
    1214:	88 2f       	mov	r24, r24
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	88 0f       	add	r24, r24
    121a:	99 1f       	adc	r25, r25
    121c:	fc 01       	movw	r30, r24
    121e:	eb 52       	subi	r30, 0x2B	; 43
    1220:	ff 4f       	sbci	r31, 0xFF	; 255
    1222:	a0 81       	ld	r26, Z
    1224:	b1 81       	ldd	r27, Z+1	; 0x01
    1226:	e9 81       	ldd	r30, Y+1	; 0x01
    1228:	fa 81       	ldd	r31, Y+2	; 0x02
    122a:	80 81       	ld	r24, Z
    122c:	83 70       	andi	r24, 0x03	; 3
    122e:	88 2f       	mov	r24, r24
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	88 0f       	add	r24, r24
    1234:	99 1f       	adc	r25, r25
    1236:	fc 01       	movw	r30, r24
    1238:	eb 52       	subi	r30, 0x2B	; 43
    123a:	ff 4f       	sbci	r31, 0xFF	; 255
    123c:	01 90       	ld	r0, Z+
    123e:	f0 81       	ld	r31, Z
    1240:	e0 2d       	mov	r30, r0
    1242:	80 81       	ld	r24, Z
    1244:	48 2f       	mov	r20, r24
    1246:	e9 81       	ldd	r30, Y+1	; 0x01
    1248:	fa 81       	ldd	r31, Y+2	; 0x02
    124a:	80 81       	ld	r24, Z
    124c:	86 95       	lsr	r24
    124e:	86 95       	lsr	r24
    1250:	8f 70       	andi	r24, 0x0F	; 15
    1252:	28 2f       	mov	r18, r24
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	02 2e       	mov	r0, r18
    125c:	02 c0       	rjmp	.+4      	; 0x1262 <DIO_enuSetPinDirection+0xfe>
    125e:	88 0f       	add	r24, r24
    1260:	99 1f       	adc	r25, r25
    1262:	0a 94       	dec	r0
    1264:	e2 f7       	brpl	.-8      	; 0x125e <DIO_enuSetPinDirection+0xfa>
    1266:	80 95       	com	r24
    1268:	84 23       	and	r24, r20
    126a:	8c 93       	st	X, r24
			//pstrCurrentPinLoc->u8Direction=DIO_INPUT;

		}

		status=STD_enuOK;
    126c:	1b 82       	std	Y+3, r1	; 0x03

	}



	return  status ;
    126e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1270:	0f 90       	pop	r0
    1272:	0f 90       	pop	r0
    1274:	0f 90       	pop	r0
    1276:	0f 90       	pop	r0
    1278:	0f 90       	pop	r0
    127a:	cf 91       	pop	r28
    127c:	df 91       	pop	r29
    127e:	08 95       	ret

00001280 <DIO_enuSetPortValue>:



STD_tenuReturn DIO_enuSetPortValue(u8 u8PortIdxCpy,u8 u8ValueCpy){
    1280:	df 93       	push	r29
    1282:	cf 93       	push	r28
    1284:	00 d0       	rcall	.+0      	; 0x1286 <DIO_enuSetPortValue+0x6>
    1286:	00 d0       	rcall	.+0      	; 0x1288 <DIO_enuSetPortValue+0x8>
    1288:	0f 92       	push	r0
    128a:	cd b7       	in	r28, 0x3d	; 61
    128c:	de b7       	in	r29, 0x3e	; 62
    128e:	8c 83       	std	Y+4, r24	; 0x04
    1290:	6d 83       	std	Y+5, r22	; 0x05

	 */

	STD_tenuReturn status;

	if( u8PortIdxCpy>=DIO_PORT_NUM  ){
    1292:	8c 81       	ldd	r24, Y+4	; 0x04
    1294:	88 23       	and	r24, r24
    1296:	19 f0       	breq	.+6      	; 0x129e <DIO_enuSetPortValue+0x1e>

		status=STD_enuOutOfRange;
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	8b 83       	std	Y+3, r24	; 0x03
    129c:	21 c0       	rjmp	.+66     	; 0x12e0 <DIO_enuSetPortValue+0x60>

	}
	else{

		const DIO_tstrPORT *pstrCurrentPORTLoc= &DIO_kastrPortCg[u8PortIdxCpy];
    129e:	8c 81       	ldd	r24, Y+4	; 0x04
    12a0:	28 2f       	mov	r18, r24
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	c9 01       	movw	r24, r18
    12a6:	88 0f       	add	r24, r24
    12a8:	99 1f       	adc	r25, r25
    12aa:	88 0f       	add	r24, r24
    12ac:	99 1f       	adc	r25, r25
    12ae:	82 0f       	add	r24, r18
    12b0:	93 1f       	adc	r25, r19
    12b2:	88 53       	subi	r24, 0x38	; 56
    12b4:	9f 4f       	sbci	r25, 0xFF	; 255
    12b6:	9a 83       	std	Y+2, r25	; 0x02
    12b8:	89 83       	std	Y+1, r24	; 0x01

		* u8KarrPorts[pstrCurrentPORTLoc->u8PortIdx]= u8ValueCpy & pstrCurrentPORTLoc->u8Mask;
    12ba:	e9 81       	ldd	r30, Y+1	; 0x01
    12bc:	fa 81       	ldd	r31, Y+2	; 0x02
    12be:	80 81       	ld	r24, Z
    12c0:	88 2f       	mov	r24, r24
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	88 0f       	add	r24, r24
    12c6:	99 1f       	adc	r25, r25
    12c8:	fc 01       	movw	r30, r24
    12ca:	e3 53       	subi	r30, 0x33	; 51
    12cc:	ff 4f       	sbci	r31, 0xFF	; 255
    12ce:	a0 81       	ld	r26, Z
    12d0:	b1 81       	ldd	r27, Z+1	; 0x01
    12d2:	e9 81       	ldd	r30, Y+1	; 0x01
    12d4:	fa 81       	ldd	r31, Y+2	; 0x02
    12d6:	91 81       	ldd	r25, Z+1	; 0x01
    12d8:	8d 81       	ldd	r24, Y+5	; 0x05
    12da:	89 23       	and	r24, r25
    12dc:	8c 93       	st	X, r24
		status=STD_enuOK;
    12de:	1b 82       	std	Y+3, r1	; 0x03

	}

	return status;
    12e0:	8b 81       	ldd	r24, Y+3	; 0x03
}
    12e2:	0f 90       	pop	r0
    12e4:	0f 90       	pop	r0
    12e6:	0f 90       	pop	r0
    12e8:	0f 90       	pop	r0
    12ea:	0f 90       	pop	r0
    12ec:	cf 91       	pop	r28
    12ee:	df 91       	pop	r29
    12f0:	08 95       	ret

000012f2 <DIO_enuGetPortValue>:
			pu8ValueCpy: pointer to read the value.
		Return: retutn execution State.
				STD_enuOK,
				STD_enuOutOfRange*/

STD_tenuReturn DIO_enuGetPortValue(u8 u8PortIdxCpy,u8 * pu8ValueCpy){
    12f2:	df 93       	push	r29
    12f4:	cf 93       	push	r28
    12f6:	00 d0       	rcall	.+0      	; 0x12f8 <DIO_enuGetPortValue+0x6>
    12f8:	00 d0       	rcall	.+0      	; 0x12fa <DIO_enuGetPortValue+0x8>
    12fa:	00 d0       	rcall	.+0      	; 0x12fc <DIO_enuGetPortValue+0xa>
    12fc:	cd b7       	in	r28, 0x3d	; 61
    12fe:	de b7       	in	r29, 0x3e	; 62
    1300:	8c 83       	std	Y+4, r24	; 0x04
    1302:	7e 83       	std	Y+6, r23	; 0x06
    1304:	6d 83       	std	Y+5, r22	; 0x05

	STD_tenuReturn status;


	if( u8PortIdxCpy>=DIO_PORT_NUM  ){
    1306:	8c 81       	ldd	r24, Y+4	; 0x04
    1308:	88 23       	and	r24, r24
    130a:	19 f0       	breq	.+6      	; 0x1312 <DIO_enuGetPortValue+0x20>

		status=STD_enuOutOfRange;
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	8b 83       	std	Y+3, r24	; 0x03
    1310:	27 c0       	rjmp	.+78     	; 0x1360 <DIO_enuGetPortValue+0x6e>

	}
	else if(pu8ValueCpy==STD_NULL){
    1312:	8d 81       	ldd	r24, Y+5	; 0x05
    1314:	9e 81       	ldd	r25, Y+6	; 0x06
    1316:	00 97       	sbiw	r24, 0x00	; 0
    1318:	19 f4       	brne	.+6      	; 0x1320 <DIO_enuGetPortValue+0x2e>

		status= STD_enuNullPtr;
    131a:	83 e0       	ldi	r24, 0x03	; 3
    131c:	8b 83       	std	Y+3, r24	; 0x03
    131e:	20 c0       	rjmp	.+64     	; 0x1360 <DIO_enuGetPortValue+0x6e>

	}
	else {

		//u8 * temptr=
		const DIO_tstrPORT *pstrCurrentPORTLoc= &DIO_kastrPortCg[u8PortIdxCpy];
    1320:	8c 81       	ldd	r24, Y+4	; 0x04
    1322:	28 2f       	mov	r18, r24
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	c9 01       	movw	r24, r18
    1328:	88 0f       	add	r24, r24
    132a:	99 1f       	adc	r25, r25
    132c:	88 0f       	add	r24, r24
    132e:	99 1f       	adc	r25, r25
    1330:	82 0f       	add	r24, r18
    1332:	93 1f       	adc	r25, r19
    1334:	88 53       	subi	r24, 0x38	; 56
    1336:	9f 4f       	sbci	r25, 0xFF	; 255
    1338:	9a 83       	std	Y+2, r25	; 0x02
    133a:	89 83       	std	Y+1, r24	; 0x01

		*pu8ValueCpy= *u8KarrPins[pstrCurrentPORTLoc->u8PortIdx];
    133c:	e9 81       	ldd	r30, Y+1	; 0x01
    133e:	fa 81       	ldd	r31, Y+2	; 0x02
    1340:	80 81       	ld	r24, Z
    1342:	88 2f       	mov	r24, r24
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	88 0f       	add	r24, r24
    1348:	99 1f       	adc	r25, r25
    134a:	fc 01       	movw	r30, r24
    134c:	e3 52       	subi	r30, 0x23	; 35
    134e:	ff 4f       	sbci	r31, 0xFF	; 255
    1350:	01 90       	ld	r0, Z+
    1352:	f0 81       	ld	r31, Z
    1354:	e0 2d       	mov	r30, r0
    1356:	80 81       	ld	r24, Z
    1358:	ed 81       	ldd	r30, Y+5	; 0x05
    135a:	fe 81       	ldd	r31, Y+6	; 0x06
    135c:	80 83       	st	Z, r24
		status= STD_enuOK;
    135e:	1b 82       	std	Y+3, r1	; 0x03

	}

	return status;
    1360:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1362:	26 96       	adiw	r28, 0x06	; 6
    1364:	0f b6       	in	r0, 0x3f	; 63
    1366:	f8 94       	cli
    1368:	de bf       	out	0x3e, r29	; 62
    136a:	0f be       	out	0x3f, r0	; 63
    136c:	cd bf       	out	0x3d, r28	; 61
    136e:	cf 91       	pop	r28
    1370:	df 91       	pop	r29
    1372:	08 95       	ret

00001374 <DIO_enuSetPortDirecrion>:



STD_tenuReturn DIO_enuSetPortDirecrion(u8 u8PortIdxCpy,u8 u8DirCpy){
    1374:	df 93       	push	r29
    1376:	cf 93       	push	r28
    1378:	00 d0       	rcall	.+0      	; 0x137a <DIO_enuSetPortDirecrion+0x6>
    137a:	00 d0       	rcall	.+0      	; 0x137c <DIO_enuSetPortDirecrion+0x8>
    137c:	0f 92       	push	r0
    137e:	cd b7       	in	r28, 0x3d	; 61
    1380:	de b7       	in	r29, 0x3e	; 62
    1382:	8c 83       	std	Y+4, r24	; 0x04
    1384:	6d 83       	std	Y+5, r22	; 0x05
				STD_enuNOK.
	 */

	STD_tenuReturn status;

	if( u8PortIdxCpy>=DIO_PORT_NUM  ){
    1386:	8c 81       	ldd	r24, Y+4	; 0x04
    1388:	88 23       	and	r24, r24
    138a:	19 f0       	breq	.+6      	; 0x1392 <DIO_enuSetPortDirecrion+0x1e>

		status=STD_enuOutOfRange;
    138c:	81 e0       	ldi	r24, 0x01	; 1
    138e:	8b 83       	std	Y+3, r24	; 0x03
    1390:	21 c0       	rjmp	.+66     	; 0x13d4 <DIO_enuSetPortDirecrion+0x60>

	}
	else{

		const DIO_tstrPORT *pstrCurrentPORTLoc= &DIO_kastrPortCg[u8PortIdxCpy];
    1392:	8c 81       	ldd	r24, Y+4	; 0x04
    1394:	28 2f       	mov	r18, r24
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	c9 01       	movw	r24, r18
    139a:	88 0f       	add	r24, r24
    139c:	99 1f       	adc	r25, r25
    139e:	88 0f       	add	r24, r24
    13a0:	99 1f       	adc	r25, r25
    13a2:	82 0f       	add	r24, r18
    13a4:	93 1f       	adc	r25, r19
    13a6:	88 53       	subi	r24, 0x38	; 56
    13a8:	9f 4f       	sbci	r25, 0xFF	; 255
    13aa:	9a 83       	std	Y+2, r25	; 0x02
    13ac:	89 83       	std	Y+1, r24	; 0x01

		* u8KarrDdra[pstrCurrentPORTLoc->u8PortIdx]= u8DirCpy & pstrCurrentPORTLoc->u8Mask;
    13ae:	e9 81       	ldd	r30, Y+1	; 0x01
    13b0:	fa 81       	ldd	r31, Y+2	; 0x02
    13b2:	80 81       	ld	r24, Z
    13b4:	88 2f       	mov	r24, r24
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	88 0f       	add	r24, r24
    13ba:	99 1f       	adc	r25, r25
    13bc:	fc 01       	movw	r30, r24
    13be:	eb 52       	subi	r30, 0x2B	; 43
    13c0:	ff 4f       	sbci	r31, 0xFF	; 255
    13c2:	a0 81       	ld	r26, Z
    13c4:	b1 81       	ldd	r27, Z+1	; 0x01
    13c6:	e9 81       	ldd	r30, Y+1	; 0x01
    13c8:	fa 81       	ldd	r31, Y+2	; 0x02
    13ca:	91 81       	ldd	r25, Z+1	; 0x01
    13cc:	8d 81       	ldd	r24, Y+5	; 0x05
    13ce:	89 23       	and	r24, r25
    13d0:	8c 93       	st	X, r24
		status=STD_enuOK;
    13d2:	1b 82       	std	Y+3, r1	; 0x03


	}

	return status;
    13d4:	8b 81       	ldd	r24, Y+3	; 0x03

}
    13d6:	0f 90       	pop	r0
    13d8:	0f 90       	pop	r0
    13da:	0f 90       	pop	r0
    13dc:	0f 90       	pop	r0
    13de:	0f 90       	pop	r0
    13e0:	cf 91       	pop	r28
    13e2:	df 91       	pop	r29
    13e4:	08 95       	ret

000013e6 <SM_Init>:
#include "STD_TYPES.h"
#include "SM.h"



void SM_Init( State* SwitchStateTable,u8 SwitchStateSize, u8 initState ,u8* State){
    13e6:	df 93       	push	r29
    13e8:	cf 93       	push	r28
    13ea:	cd b7       	in	r28, 0x3d	; 61
    13ec:	de b7       	in	r29, 0x3e	; 62
    13ee:	27 97       	sbiw	r28, 0x07	; 7
    13f0:	0f b6       	in	r0, 0x3f	; 63
    13f2:	f8 94       	cli
    13f4:	de bf       	out	0x3e, r29	; 62
    13f6:	0f be       	out	0x3f, r0	; 63
    13f8:	cd bf       	out	0x3d, r28	; 61
    13fa:	9b 83       	std	Y+3, r25	; 0x03
    13fc:	8a 83       	std	Y+2, r24	; 0x02
    13fe:	6c 83       	std	Y+4, r22	; 0x04
    1400:	4d 83       	std	Y+5, r20	; 0x05
    1402:	3f 83       	std	Y+7, r19	; 0x07
    1404:	2e 83       	std	Y+6, r18	; 0x06

	u8 i = 0;
    1406:	19 82       	std	Y+1, r1	; 0x01
	for(i=0;i<SwitchStateSize;i++){
    1408:	19 82       	std	Y+1, r1	; 0x01
    140a:	56 c0       	rjmp	.+172    	; 0x14b8 <SM_Init+0xd2>

		if(SwitchStateTable[i].StateId== initState){
    140c:	89 81       	ldd	r24, Y+1	; 0x01
    140e:	88 2f       	mov	r24, r24
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	9c 01       	movw	r18, r24
    1414:	22 0f       	add	r18, r18
    1416:	33 1f       	adc	r19, r19
    1418:	c9 01       	movw	r24, r18
    141a:	88 0f       	add	r24, r24
    141c:	99 1f       	adc	r25, r25
    141e:	88 0f       	add	r24, r24
    1420:	99 1f       	adc	r25, r25
    1422:	88 0f       	add	r24, r24
    1424:	99 1f       	adc	r25, r25
    1426:	ac 01       	movw	r20, r24
    1428:	42 1b       	sub	r20, r18
    142a:	53 0b       	sbc	r21, r19
    142c:	9a 01       	movw	r18, r20
    142e:	8a 81       	ldd	r24, Y+2	; 0x02
    1430:	9b 81       	ldd	r25, Y+3	; 0x03
    1432:	fc 01       	movw	r30, r24
    1434:	e2 0f       	add	r30, r18
    1436:	f3 1f       	adc	r31, r19
    1438:	92 81       	ldd	r25, Z+2	; 0x02
    143a:	8d 81       	ldd	r24, Y+5	; 0x05
    143c:	98 17       	cp	r25, r24
    143e:	c9 f5       	brne	.+114    	; 0x14b2 <SM_Init+0xcc>

			*State=i;
    1440:	ee 81       	ldd	r30, Y+6	; 0x06
    1442:	ff 81       	ldd	r31, Y+7	; 0x07
    1444:	89 81       	ldd	r24, Y+1	; 0x01
    1446:	80 83       	st	Z, r24
			if(SwitchStateTable[i].SM_onEntry == STD_NULL){
    1448:	89 81       	ldd	r24, Y+1	; 0x01
    144a:	88 2f       	mov	r24, r24
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	9c 01       	movw	r18, r24
    1450:	22 0f       	add	r18, r18
    1452:	33 1f       	adc	r19, r19
    1454:	c9 01       	movw	r24, r18
    1456:	88 0f       	add	r24, r24
    1458:	99 1f       	adc	r25, r25
    145a:	88 0f       	add	r24, r24
    145c:	99 1f       	adc	r25, r25
    145e:	88 0f       	add	r24, r24
    1460:	99 1f       	adc	r25, r25
    1462:	ac 01       	movw	r20, r24
    1464:	42 1b       	sub	r20, r18
    1466:	53 0b       	sbc	r21, r19
    1468:	9a 01       	movw	r18, r20
    146a:	8a 81       	ldd	r24, Y+2	; 0x02
    146c:	9b 81       	ldd	r25, Y+3	; 0x03
    146e:	fc 01       	movw	r30, r24
    1470:	e2 0f       	add	r30, r18
    1472:	f3 1f       	adc	r31, r19
    1474:	83 81       	ldd	r24, Z+3	; 0x03
    1476:	94 81       	ldd	r25, Z+4	; 0x04
    1478:	00 97       	sbiw	r24, 0x00	; 0
    147a:	19 f1       	breq	.+70     	; 0x14c2 <SM_Init+0xdc>

			}
			else{
				SwitchStateTable[i].SM_onEntry();
    147c:	89 81       	ldd	r24, Y+1	; 0x01
    147e:	88 2f       	mov	r24, r24
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	9c 01       	movw	r18, r24
    1484:	22 0f       	add	r18, r18
    1486:	33 1f       	adc	r19, r19
    1488:	c9 01       	movw	r24, r18
    148a:	88 0f       	add	r24, r24
    148c:	99 1f       	adc	r25, r25
    148e:	88 0f       	add	r24, r24
    1490:	99 1f       	adc	r25, r25
    1492:	88 0f       	add	r24, r24
    1494:	99 1f       	adc	r25, r25
    1496:	ac 01       	movw	r20, r24
    1498:	42 1b       	sub	r20, r18
    149a:	53 0b       	sbc	r21, r19
    149c:	9a 01       	movw	r18, r20
    149e:	8a 81       	ldd	r24, Y+2	; 0x02
    14a0:	9b 81       	ldd	r25, Y+3	; 0x03
    14a2:	fc 01       	movw	r30, r24
    14a4:	e2 0f       	add	r30, r18
    14a6:	f3 1f       	adc	r31, r19
    14a8:	03 80       	ldd	r0, Z+3	; 0x03
    14aa:	f4 81       	ldd	r31, Z+4	; 0x04
    14ac:	e0 2d       	mov	r30, r0
    14ae:	09 95       	icall
    14b0:	08 c0       	rjmp	.+16     	; 0x14c2 <SM_Init+0xdc>


void SM_Init( State* SwitchStateTable,u8 SwitchStateSize, u8 initState ,u8* State){

	u8 i = 0;
	for(i=0;i<SwitchStateSize;i++){
    14b2:	89 81       	ldd	r24, Y+1	; 0x01
    14b4:	8f 5f       	subi	r24, 0xFF	; 255
    14b6:	89 83       	std	Y+1, r24	; 0x01
    14b8:	99 81       	ldd	r25, Y+1	; 0x01
    14ba:	8c 81       	ldd	r24, Y+4	; 0x04
    14bc:	98 17       	cp	r25, r24
    14be:	08 f4       	brcc	.+2      	; 0x14c2 <SM_Init+0xdc>
    14c0:	a5 cf       	rjmp	.-182    	; 0x140c <SM_Init+0x26>
		}
	}



}
    14c2:	27 96       	adiw	r28, 0x07	; 7
    14c4:	0f b6       	in	r0, 0x3f	; 63
    14c6:	f8 94       	cli
    14c8:	de bf       	out	0x3e, r29	; 62
    14ca:	0f be       	out	0x3f, r0	; 63
    14cc:	cd bf       	out	0x3d, r28	; 61
    14ce:	cf 91       	pop	r28
    14d0:	df 91       	pop	r29
    14d2:	08 95       	ret

000014d4 <SM_execute>:

void SM_execute(State*  SwitchStateTable ,u8* state){
    14d4:	df 93       	push	r29
    14d6:	cf 93       	push	r28
    14d8:	cd b7       	in	r28, 0x3d	; 61
    14da:	de b7       	in	r29, 0x3e	; 62
    14dc:	28 97       	sbiw	r28, 0x08	; 8
    14de:	0f b6       	in	r0, 0x3f	; 63
    14e0:	f8 94       	cli
    14e2:	de bf       	out	0x3e, r29	; 62
    14e4:	0f be       	out	0x3f, r0	; 63
    14e6:	cd bf       	out	0x3d, r28	; 61
    14e8:	9e 83       	std	Y+6, r25	; 0x06
    14ea:	8d 83       	std	Y+5, r24	; 0x05
    14ec:	78 87       	std	Y+8, r23	; 0x08
    14ee:	6f 83       	std	Y+7, r22	; 0x07

	State* Current_state = &SwitchStateTable[*state];
    14f0:	ef 81       	ldd	r30, Y+7	; 0x07
    14f2:	f8 85       	ldd	r31, Y+8	; 0x08
    14f4:	80 81       	ld	r24, Z
    14f6:	88 2f       	mov	r24, r24
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	9c 01       	movw	r18, r24
    14fc:	22 0f       	add	r18, r18
    14fe:	33 1f       	adc	r19, r19
    1500:	c9 01       	movw	r24, r18
    1502:	88 0f       	add	r24, r24
    1504:	99 1f       	adc	r25, r25
    1506:	88 0f       	add	r24, r24
    1508:	99 1f       	adc	r25, r25
    150a:	88 0f       	add	r24, r24
    150c:	99 1f       	adc	r25, r25
    150e:	ac 01       	movw	r20, r24
    1510:	42 1b       	sub	r20, r18
    1512:	53 0b       	sbc	r21, r19
    1514:	9a 01       	movw	r18, r20
    1516:	8d 81       	ldd	r24, Y+5	; 0x05
    1518:	9e 81       	ldd	r25, Y+6	; 0x06
    151a:	82 0f       	add	r24, r18
    151c:	93 1f       	adc	r25, r19
    151e:	9c 83       	std	Y+4, r25	; 0x04
    1520:	8b 83       	std	Y+3, r24	; 0x03
	;


	u8 i=0;
    1522:	1a 82       	std	Y+2, r1	; 0x02
	STD_Bool trasition=STD_false;
    1524:	19 82       	std	Y+1, r1	; 0x01

	for(i=0;i<Current_state->u8TransitonTableSize;i++){
    1526:	1a 82       	std	Y+2, r1	; 0x02
    1528:	93 c0       	rjmp	.+294    	; 0x1650 <SM_execute+0x17c>

		if(Current_state->aTransitionTable[i].pfnGaurd!=STD_NULL){
    152a:	eb 81       	ldd	r30, Y+3	; 0x03
    152c:	fc 81       	ldd	r31, Y+4	; 0x04
    152e:	42 85       	ldd	r20, Z+10	; 0x0a
    1530:	53 85       	ldd	r21, Z+11	; 0x0b
    1532:	8a 81       	ldd	r24, Y+2	; 0x02
    1534:	28 2f       	mov	r18, r24
    1536:	30 e0       	ldi	r19, 0x00	; 0
    1538:	c9 01       	movw	r24, r18
    153a:	88 0f       	add	r24, r24
    153c:	99 1f       	adc	r25, r25
    153e:	88 0f       	add	r24, r24
    1540:	99 1f       	adc	r25, r25
    1542:	88 0f       	add	r24, r24
    1544:	99 1f       	adc	r25, r25
    1546:	82 1b       	sub	r24, r18
    1548:	93 0b       	sbc	r25, r19
    154a:	fa 01       	movw	r30, r20
    154c:	e8 0f       	add	r30, r24
    154e:	f9 1f       	adc	r31, r25
    1550:	83 81       	ldd	r24, Z+3	; 0x03
    1552:	94 81       	ldd	r25, Z+4	; 0x04
    1554:	00 97       	sbiw	r24, 0x00	; 0
    1556:	09 f4       	brne	.+2      	; 0x155a <SM_execute+0x86>
    1558:	78 c0       	rjmp	.+240    	; 0x164a <SM_execute+0x176>

			if(Current_state->aTransitionTable[i].pfnGaurd()== STD_true){
    155a:	eb 81       	ldd	r30, Y+3	; 0x03
    155c:	fc 81       	ldd	r31, Y+4	; 0x04
    155e:	42 85       	ldd	r20, Z+10	; 0x0a
    1560:	53 85       	ldd	r21, Z+11	; 0x0b
    1562:	8a 81       	ldd	r24, Y+2	; 0x02
    1564:	28 2f       	mov	r18, r24
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	c9 01       	movw	r24, r18
    156a:	88 0f       	add	r24, r24
    156c:	99 1f       	adc	r25, r25
    156e:	88 0f       	add	r24, r24
    1570:	99 1f       	adc	r25, r25
    1572:	88 0f       	add	r24, r24
    1574:	99 1f       	adc	r25, r25
    1576:	82 1b       	sub	r24, r18
    1578:	93 0b       	sbc	r25, r19
    157a:	fa 01       	movw	r30, r20
    157c:	e8 0f       	add	r30, r24
    157e:	f9 1f       	adc	r31, r25
    1580:	03 80       	ldd	r0, Z+3	; 0x03
    1582:	f4 81       	ldd	r31, Z+4	; 0x04
    1584:	e0 2d       	mov	r30, r0
    1586:	09 95       	icall
    1588:	81 30       	cpi	r24, 0x01	; 1
    158a:	09 f0       	breq	.+2      	; 0x158e <SM_execute+0xba>
    158c:	5e c0       	rjmp	.+188    	; 0x164a <SM_execute+0x176>

				trasition=STD_true;
    158e:	81 e0       	ldi	r24, 0x01	; 1
    1590:	89 83       	std	Y+1, r24	; 0x01

				if(Current_state->SM_onExit == STD_NULL){
    1592:	eb 81       	ldd	r30, Y+3	; 0x03
    1594:	fc 81       	ldd	r31, Y+4	; 0x04
    1596:	87 81       	ldd	r24, Z+7	; 0x07
    1598:	90 85       	ldd	r25, Z+8	; 0x08
    159a:	00 97       	sbiw	r24, 0x00	; 0
    159c:	31 f0       	breq	.+12     	; 0x15aa <SM_execute+0xd6>

				}
				else{
					Current_state->SM_onExit();
    159e:	eb 81       	ldd	r30, Y+3	; 0x03
    15a0:	fc 81       	ldd	r31, Y+4	; 0x04
    15a2:	07 80       	ldd	r0, Z+7	; 0x07
    15a4:	f0 85       	ldd	r31, Z+8	; 0x08
    15a6:	e0 2d       	mov	r30, r0
    15a8:	09 95       	icall
				}

				*state=Current_state->aTransitionTable[i].u8NextStateIdx;
    15aa:	eb 81       	ldd	r30, Y+3	; 0x03
    15ac:	fc 81       	ldd	r31, Y+4	; 0x04
    15ae:	42 85       	ldd	r20, Z+10	; 0x0a
    15b0:	53 85       	ldd	r21, Z+11	; 0x0b
    15b2:	8a 81       	ldd	r24, Y+2	; 0x02
    15b4:	28 2f       	mov	r18, r24
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	c9 01       	movw	r24, r18
    15ba:	88 0f       	add	r24, r24
    15bc:	99 1f       	adc	r25, r25
    15be:	88 0f       	add	r24, r24
    15c0:	99 1f       	adc	r25, r25
    15c2:	88 0f       	add	r24, r24
    15c4:	99 1f       	adc	r25, r25
    15c6:	82 1b       	sub	r24, r18
    15c8:	93 0b       	sbc	r25, r19
    15ca:	fa 01       	movw	r30, r20
    15cc:	e8 0f       	add	r30, r24
    15ce:	f9 1f       	adc	r31, r25
    15d0:	82 81       	ldd	r24, Z+2	; 0x02
    15d2:	ef 81       	ldd	r30, Y+7	; 0x07
    15d4:	f8 85       	ldd	r31, Y+8	; 0x08
    15d6:	80 83       	st	Z, r24


				if(SwitchStateTable[*state].SM_onEntry == STD_NULL){
    15d8:	ef 81       	ldd	r30, Y+7	; 0x07
    15da:	f8 85       	ldd	r31, Y+8	; 0x08
    15dc:	80 81       	ld	r24, Z
    15de:	88 2f       	mov	r24, r24
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	9c 01       	movw	r18, r24
    15e4:	22 0f       	add	r18, r18
    15e6:	33 1f       	adc	r19, r19
    15e8:	c9 01       	movw	r24, r18
    15ea:	88 0f       	add	r24, r24
    15ec:	99 1f       	adc	r25, r25
    15ee:	88 0f       	add	r24, r24
    15f0:	99 1f       	adc	r25, r25
    15f2:	88 0f       	add	r24, r24
    15f4:	99 1f       	adc	r25, r25
    15f6:	ac 01       	movw	r20, r24
    15f8:	42 1b       	sub	r20, r18
    15fa:	53 0b       	sbc	r21, r19
    15fc:	9a 01       	movw	r18, r20
    15fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1600:	9e 81       	ldd	r25, Y+6	; 0x06
    1602:	fc 01       	movw	r30, r24
    1604:	e2 0f       	add	r30, r18
    1606:	f3 1f       	adc	r31, r19
    1608:	83 81       	ldd	r24, Z+3	; 0x03
    160a:	94 81       	ldd	r25, Z+4	; 0x04
    160c:	00 97       	sbiw	r24, 0x00	; 0
    160e:	39 f1       	breq	.+78     	; 0x165e <SM_execute+0x18a>

				}
				else{
					SwitchStateTable[*state].SM_onEntry();
    1610:	ef 81       	ldd	r30, Y+7	; 0x07
    1612:	f8 85       	ldd	r31, Y+8	; 0x08
    1614:	80 81       	ld	r24, Z
    1616:	88 2f       	mov	r24, r24
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	9c 01       	movw	r18, r24
    161c:	22 0f       	add	r18, r18
    161e:	33 1f       	adc	r19, r19
    1620:	c9 01       	movw	r24, r18
    1622:	88 0f       	add	r24, r24
    1624:	99 1f       	adc	r25, r25
    1626:	88 0f       	add	r24, r24
    1628:	99 1f       	adc	r25, r25
    162a:	88 0f       	add	r24, r24
    162c:	99 1f       	adc	r25, r25
    162e:	ac 01       	movw	r20, r24
    1630:	42 1b       	sub	r20, r18
    1632:	53 0b       	sbc	r21, r19
    1634:	9a 01       	movw	r18, r20
    1636:	8d 81       	ldd	r24, Y+5	; 0x05
    1638:	9e 81       	ldd	r25, Y+6	; 0x06
    163a:	fc 01       	movw	r30, r24
    163c:	e2 0f       	add	r30, r18
    163e:	f3 1f       	adc	r31, r19
    1640:	03 80       	ldd	r0, Z+3	; 0x03
    1642:	f4 81       	ldd	r31, Z+4	; 0x04
    1644:	e0 2d       	mov	r30, r0
    1646:	09 95       	icall
    1648:	0a c0       	rjmp	.+20     	; 0x165e <SM_execute+0x18a>


	u8 i=0;
	STD_Bool trasition=STD_false;

	for(i=0;i<Current_state->u8TransitonTableSize;i++){
    164a:	8a 81       	ldd	r24, Y+2	; 0x02
    164c:	8f 5f       	subi	r24, 0xFF	; 255
    164e:	8a 83       	std	Y+2, r24	; 0x02
    1650:	eb 81       	ldd	r30, Y+3	; 0x03
    1652:	fc 81       	ldd	r31, Y+4	; 0x04
    1654:	91 85       	ldd	r25, Z+9	; 0x09
    1656:	8a 81       	ldd	r24, Y+2	; 0x02
    1658:	89 17       	cp	r24, r25
    165a:	08 f4       	brcc	.+2      	; 0x165e <SM_execute+0x18a>
    165c:	66 cf       	rjmp	.-308    	; 0x152a <SM_execute+0x56>
		}else{

		}

	}
	if(trasition==STD_false){
    165e:	89 81       	ldd	r24, Y+1	; 0x01
    1660:	88 23       	and	r24, r24
    1662:	61 f4       	brne	.+24     	; 0x167c <SM_execute+0x1a8>

		if (Current_state->SM_doAction == STD_NULL) {
    1664:	eb 81       	ldd	r30, Y+3	; 0x03
    1666:	fc 81       	ldd	r31, Y+4	; 0x04
    1668:	85 81       	ldd	r24, Z+5	; 0x05
    166a:	96 81       	ldd	r25, Z+6	; 0x06
    166c:	00 97       	sbiw	r24, 0x00	; 0
    166e:	31 f0       	breq	.+12     	; 0x167c <SM_execute+0x1a8>

		}
		else {
			Current_state->SM_doAction();
    1670:	eb 81       	ldd	r30, Y+3	; 0x03
    1672:	fc 81       	ldd	r31, Y+4	; 0x04
    1674:	05 80       	ldd	r0, Z+5	; 0x05
    1676:	f6 81       	ldd	r31, Z+6	; 0x06
    1678:	e0 2d       	mov	r30, r0
    167a:	09 95       	icall
	}



	return;
}
    167c:	28 96       	adiw	r28, 0x08	; 8
    167e:	0f b6       	in	r0, 0x3f	; 63
    1680:	f8 94       	cli
    1682:	de bf       	out	0x3e, r29	; 62
    1684:	0f be       	out	0x3f, r0	; 63
    1686:	cd bf       	out	0x3d, r28	; 61
    1688:	cf 91       	pop	r28
    168a:	df 91       	pop	r29
    168c:	08 95       	ret

0000168e <init>:

typedef enum { first, oper, second, result} stateId;
//static  u8 u8ArrCalcData[3];

void init()
{
    168e:	df 93       	push	r29
    1690:	cf 93       	push	r28
    1692:	cd b7       	in	r28, 0x3d	; 61
    1694:	de b7       	in	r29, 0x3e	; 62
    1696:	e8 97       	sbiw	r28, 0x38	; 56
    1698:	0f b6       	in	r0, 0x3f	; 63
    169a:	f8 94       	cli
    169c:	de bf       	out	0x3e, r29	; 62
    169e:	0f be       	out	0x3f, r0	; 63
    16a0:	cd bf       	out	0x3d, r28	; 61
    16a2:	80 e0       	ldi	r24, 0x00	; 0
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	a8 e4       	ldi	r26, 0x48	; 72
    16a8:	b2 e4       	ldi	r27, 0x42	; 66
    16aa:	8d ab       	std	Y+53, r24	; 0x35
    16ac:	9e ab       	std	Y+54, r25	; 0x36
    16ae:	af ab       	std	Y+55, r26	; 0x37
    16b0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16b2:	6d a9       	ldd	r22, Y+53	; 0x35
    16b4:	7e a9       	ldd	r23, Y+54	; 0x36
    16b6:	8f a9       	ldd	r24, Y+55	; 0x37
    16b8:	98 ad       	ldd	r25, Y+56	; 0x38
    16ba:	20 e0       	ldi	r18, 0x00	; 0
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	4a ef       	ldi	r20, 0xFA	; 250
    16c0:	54 e4       	ldi	r21, 0x44	; 68
    16c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16c6:	dc 01       	movw	r26, r24
    16c8:	cb 01       	movw	r24, r22
    16ca:	89 ab       	std	Y+49, r24	; 0x31
    16cc:	9a ab       	std	Y+50, r25	; 0x32
    16ce:	ab ab       	std	Y+51, r26	; 0x33
    16d0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    16d2:	69 a9       	ldd	r22, Y+49	; 0x31
    16d4:	7a a9       	ldd	r23, Y+50	; 0x32
    16d6:	8b a9       	ldd	r24, Y+51	; 0x33
    16d8:	9c a9       	ldd	r25, Y+52	; 0x34
    16da:	20 e0       	ldi	r18, 0x00	; 0
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	40 e8       	ldi	r20, 0x80	; 128
    16e0:	5f e3       	ldi	r21, 0x3F	; 63
    16e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16e6:	88 23       	and	r24, r24
    16e8:	2c f4       	brge	.+10     	; 0x16f4 <init+0x66>
		__ticks = 1;
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	98 ab       	std	Y+48, r25	; 0x30
    16f0:	8f a7       	std	Y+47, r24	; 0x2f
    16f2:	3f c0       	rjmp	.+126    	; 0x1772 <init+0xe4>
	else if (__tmp > 65535)
    16f4:	69 a9       	ldd	r22, Y+49	; 0x31
    16f6:	7a a9       	ldd	r23, Y+50	; 0x32
    16f8:	8b a9       	ldd	r24, Y+51	; 0x33
    16fa:	9c a9       	ldd	r25, Y+52	; 0x34
    16fc:	20 e0       	ldi	r18, 0x00	; 0
    16fe:	3f ef       	ldi	r19, 0xFF	; 255
    1700:	4f e7       	ldi	r20, 0x7F	; 127
    1702:	57 e4       	ldi	r21, 0x47	; 71
    1704:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1708:	18 16       	cp	r1, r24
    170a:	4c f5       	brge	.+82     	; 0x175e <init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    170c:	6d a9       	ldd	r22, Y+53	; 0x35
    170e:	7e a9       	ldd	r23, Y+54	; 0x36
    1710:	8f a9       	ldd	r24, Y+55	; 0x37
    1712:	98 ad       	ldd	r25, Y+56	; 0x38
    1714:	20 e0       	ldi	r18, 0x00	; 0
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	40 e2       	ldi	r20, 0x20	; 32
    171a:	51 e4       	ldi	r21, 0x41	; 65
    171c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1720:	dc 01       	movw	r26, r24
    1722:	cb 01       	movw	r24, r22
    1724:	bc 01       	movw	r22, r24
    1726:	cd 01       	movw	r24, r26
    1728:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    172c:	dc 01       	movw	r26, r24
    172e:	cb 01       	movw	r24, r22
    1730:	98 ab       	std	Y+48, r25	; 0x30
    1732:	8f a7       	std	Y+47, r24	; 0x2f
    1734:	0f c0       	rjmp	.+30     	; 0x1754 <init+0xc6>
    1736:	88 ec       	ldi	r24, 0xC8	; 200
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	9e a7       	std	Y+46, r25	; 0x2e
    173c:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    173e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1740:	9e a5       	ldd	r25, Y+46	; 0x2e
    1742:	01 97       	sbiw	r24, 0x01	; 1
    1744:	f1 f7       	brne	.-4      	; 0x1742 <init+0xb4>
    1746:	9e a7       	std	Y+46, r25	; 0x2e
    1748:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    174a:	8f a5       	ldd	r24, Y+47	; 0x2f
    174c:	98 a9       	ldd	r25, Y+48	; 0x30
    174e:	01 97       	sbiw	r24, 0x01	; 1
    1750:	98 ab       	std	Y+48, r25	; 0x30
    1752:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1754:	8f a5       	ldd	r24, Y+47	; 0x2f
    1756:	98 a9       	ldd	r25, Y+48	; 0x30
    1758:	00 97       	sbiw	r24, 0x00	; 0
    175a:	69 f7       	brne	.-38     	; 0x1736 <init+0xa8>
    175c:	14 c0       	rjmp	.+40     	; 0x1786 <init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    175e:	69 a9       	ldd	r22, Y+49	; 0x31
    1760:	7a a9       	ldd	r23, Y+50	; 0x32
    1762:	8b a9       	ldd	r24, Y+51	; 0x33
    1764:	9c a9       	ldd	r25, Y+52	; 0x34
    1766:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    176a:	dc 01       	movw	r26, r24
    176c:	cb 01       	movw	r24, r22
    176e:	98 ab       	std	Y+48, r25	; 0x30
    1770:	8f a7       	std	Y+47, r24	; 0x2f
    1772:	8f a5       	ldd	r24, Y+47	; 0x2f
    1774:	98 a9       	ldd	r25, Y+48	; 0x30
    1776:	9c a7       	std	Y+44, r25	; 0x2c
    1778:	8b a7       	std	Y+43, r24	; 0x2b
    177a:	8b a5       	ldd	r24, Y+43	; 0x2b
    177c:	9c a5       	ldd	r25, Y+44	; 0x2c
    177e:	01 97       	sbiw	r24, 0x01	; 1
    1780:	f1 f7       	brne	.-4      	; 0x177e <init+0xf0>
    1782:	9c a7       	std	Y+44, r25	; 0x2c
    1784:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(50);

	write_command(0b00111000);
    1786:	88 e3       	ldi	r24, 0x38	; 56
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <write_command>
    178e:	80 e0       	ldi	r24, 0x00	; 0
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	a0 ea       	ldi	r26, 0xA0	; 160
    1794:	b0 e4       	ldi	r27, 0x40	; 64
    1796:	8f a3       	std	Y+39, r24	; 0x27
    1798:	98 a7       	std	Y+40, r25	; 0x28
    179a:	a9 a7       	std	Y+41, r26	; 0x29
    179c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    179e:	6f a1       	ldd	r22, Y+39	; 0x27
    17a0:	78 a5       	ldd	r23, Y+40	; 0x28
    17a2:	89 a5       	ldd	r24, Y+41	; 0x29
    17a4:	9a a5       	ldd	r25, Y+42	; 0x2a
    17a6:	20 e0       	ldi	r18, 0x00	; 0
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	4a ef       	ldi	r20, 0xFA	; 250
    17ac:	54 e4       	ldi	r21, 0x44	; 68
    17ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17b2:	dc 01       	movw	r26, r24
    17b4:	cb 01       	movw	r24, r22
    17b6:	8b a3       	std	Y+35, r24	; 0x23
    17b8:	9c a3       	std	Y+36, r25	; 0x24
    17ba:	ad a3       	std	Y+37, r26	; 0x25
    17bc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    17be:	6b a1       	ldd	r22, Y+35	; 0x23
    17c0:	7c a1       	ldd	r23, Y+36	; 0x24
    17c2:	8d a1       	ldd	r24, Y+37	; 0x25
    17c4:	9e a1       	ldd	r25, Y+38	; 0x26
    17c6:	20 e0       	ldi	r18, 0x00	; 0
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	40 e8       	ldi	r20, 0x80	; 128
    17cc:	5f e3       	ldi	r21, 0x3F	; 63
    17ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17d2:	88 23       	and	r24, r24
    17d4:	2c f4       	brge	.+10     	; 0x17e0 <init+0x152>
		__ticks = 1;
    17d6:	81 e0       	ldi	r24, 0x01	; 1
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	9a a3       	std	Y+34, r25	; 0x22
    17dc:	89 a3       	std	Y+33, r24	; 0x21
    17de:	3f c0       	rjmp	.+126    	; 0x185e <init+0x1d0>
	else if (__tmp > 65535)
    17e0:	6b a1       	ldd	r22, Y+35	; 0x23
    17e2:	7c a1       	ldd	r23, Y+36	; 0x24
    17e4:	8d a1       	ldd	r24, Y+37	; 0x25
    17e6:	9e a1       	ldd	r25, Y+38	; 0x26
    17e8:	20 e0       	ldi	r18, 0x00	; 0
    17ea:	3f ef       	ldi	r19, 0xFF	; 255
    17ec:	4f e7       	ldi	r20, 0x7F	; 127
    17ee:	57 e4       	ldi	r21, 0x47	; 71
    17f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17f4:	18 16       	cp	r1, r24
    17f6:	4c f5       	brge	.+82     	; 0x184a <init+0x1bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17f8:	6f a1       	ldd	r22, Y+39	; 0x27
    17fa:	78 a5       	ldd	r23, Y+40	; 0x28
    17fc:	89 a5       	ldd	r24, Y+41	; 0x29
    17fe:	9a a5       	ldd	r25, Y+42	; 0x2a
    1800:	20 e0       	ldi	r18, 0x00	; 0
    1802:	30 e0       	ldi	r19, 0x00	; 0
    1804:	40 e2       	ldi	r20, 0x20	; 32
    1806:	51 e4       	ldi	r21, 0x41	; 65
    1808:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    180c:	dc 01       	movw	r26, r24
    180e:	cb 01       	movw	r24, r22
    1810:	bc 01       	movw	r22, r24
    1812:	cd 01       	movw	r24, r26
    1814:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1818:	dc 01       	movw	r26, r24
    181a:	cb 01       	movw	r24, r22
    181c:	9a a3       	std	Y+34, r25	; 0x22
    181e:	89 a3       	std	Y+33, r24	; 0x21
    1820:	0f c0       	rjmp	.+30     	; 0x1840 <init+0x1b2>
    1822:	88 ec       	ldi	r24, 0xC8	; 200
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	98 a3       	std	Y+32, r25	; 0x20
    1828:	8f 8f       	std	Y+31, r24	; 0x1f
    182a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    182c:	98 a1       	ldd	r25, Y+32	; 0x20
    182e:	01 97       	sbiw	r24, 0x01	; 1
    1830:	f1 f7       	brne	.-4      	; 0x182e <init+0x1a0>
    1832:	98 a3       	std	Y+32, r25	; 0x20
    1834:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1836:	89 a1       	ldd	r24, Y+33	; 0x21
    1838:	9a a1       	ldd	r25, Y+34	; 0x22
    183a:	01 97       	sbiw	r24, 0x01	; 1
    183c:	9a a3       	std	Y+34, r25	; 0x22
    183e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1840:	89 a1       	ldd	r24, Y+33	; 0x21
    1842:	9a a1       	ldd	r25, Y+34	; 0x22
    1844:	00 97       	sbiw	r24, 0x00	; 0
    1846:	69 f7       	brne	.-38     	; 0x1822 <init+0x194>
    1848:	14 c0       	rjmp	.+40     	; 0x1872 <init+0x1e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    184a:	6b a1       	ldd	r22, Y+35	; 0x23
    184c:	7c a1       	ldd	r23, Y+36	; 0x24
    184e:	8d a1       	ldd	r24, Y+37	; 0x25
    1850:	9e a1       	ldd	r25, Y+38	; 0x26
    1852:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1856:	dc 01       	movw	r26, r24
    1858:	cb 01       	movw	r24, r22
    185a:	9a a3       	std	Y+34, r25	; 0x22
    185c:	89 a3       	std	Y+33, r24	; 0x21
    185e:	89 a1       	ldd	r24, Y+33	; 0x21
    1860:	9a a1       	ldd	r25, Y+34	; 0x22
    1862:	9e 8f       	std	Y+30, r25	; 0x1e
    1864:	8d 8f       	std	Y+29, r24	; 0x1d
    1866:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1868:	9e 8d       	ldd	r25, Y+30	; 0x1e
    186a:	01 97       	sbiw	r24, 0x01	; 1
    186c:	f1 f7       	brne	.-4      	; 0x186a <init+0x1dc>
    186e:	9e 8f       	std	Y+30, r25	; 0x1e
    1870:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(5);
	//enable display,no curser,not blinking

	write_command(0b00001100);
    1872:	8c e0       	ldi	r24, 0x0C	; 12
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <write_command>
    187a:	80 e0       	ldi	r24, 0x00	; 0
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	a0 ea       	ldi	r26, 0xA0	; 160
    1880:	b0 e4       	ldi	r27, 0x40	; 64
    1882:	89 8f       	std	Y+25, r24	; 0x19
    1884:	9a 8f       	std	Y+26, r25	; 0x1a
    1886:	ab 8f       	std	Y+27, r26	; 0x1b
    1888:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    188a:	69 8d       	ldd	r22, Y+25	; 0x19
    188c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    188e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1890:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1892:	20 e0       	ldi	r18, 0x00	; 0
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	4a ef       	ldi	r20, 0xFA	; 250
    1898:	54 e4       	ldi	r21, 0x44	; 68
    189a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    189e:	dc 01       	movw	r26, r24
    18a0:	cb 01       	movw	r24, r22
    18a2:	8d 8b       	std	Y+21, r24	; 0x15
    18a4:	9e 8b       	std	Y+22, r25	; 0x16
    18a6:	af 8b       	std	Y+23, r26	; 0x17
    18a8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18aa:	6d 89       	ldd	r22, Y+21	; 0x15
    18ac:	7e 89       	ldd	r23, Y+22	; 0x16
    18ae:	8f 89       	ldd	r24, Y+23	; 0x17
    18b0:	98 8d       	ldd	r25, Y+24	; 0x18
    18b2:	20 e0       	ldi	r18, 0x00	; 0
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	40 e8       	ldi	r20, 0x80	; 128
    18b8:	5f e3       	ldi	r21, 0x3F	; 63
    18ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18be:	88 23       	and	r24, r24
    18c0:	2c f4       	brge	.+10     	; 0x18cc <init+0x23e>
		__ticks = 1;
    18c2:	81 e0       	ldi	r24, 0x01	; 1
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	9c 8b       	std	Y+20, r25	; 0x14
    18c8:	8b 8b       	std	Y+19, r24	; 0x13
    18ca:	3f c0       	rjmp	.+126    	; 0x194a <init+0x2bc>
	else if (__tmp > 65535)
    18cc:	6d 89       	ldd	r22, Y+21	; 0x15
    18ce:	7e 89       	ldd	r23, Y+22	; 0x16
    18d0:	8f 89       	ldd	r24, Y+23	; 0x17
    18d2:	98 8d       	ldd	r25, Y+24	; 0x18
    18d4:	20 e0       	ldi	r18, 0x00	; 0
    18d6:	3f ef       	ldi	r19, 0xFF	; 255
    18d8:	4f e7       	ldi	r20, 0x7F	; 127
    18da:	57 e4       	ldi	r21, 0x47	; 71
    18dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18e0:	18 16       	cp	r1, r24
    18e2:	4c f5       	brge	.+82     	; 0x1936 <init+0x2a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18e4:	69 8d       	ldd	r22, Y+25	; 0x19
    18e6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18ec:	20 e0       	ldi	r18, 0x00	; 0
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	40 e2       	ldi	r20, 0x20	; 32
    18f2:	51 e4       	ldi	r21, 0x41	; 65
    18f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18f8:	dc 01       	movw	r26, r24
    18fa:	cb 01       	movw	r24, r22
    18fc:	bc 01       	movw	r22, r24
    18fe:	cd 01       	movw	r24, r26
    1900:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1904:	dc 01       	movw	r26, r24
    1906:	cb 01       	movw	r24, r22
    1908:	9c 8b       	std	Y+20, r25	; 0x14
    190a:	8b 8b       	std	Y+19, r24	; 0x13
    190c:	0f c0       	rjmp	.+30     	; 0x192c <init+0x29e>
    190e:	88 ec       	ldi	r24, 0xC8	; 200
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	9a 8b       	std	Y+18, r25	; 0x12
    1914:	89 8b       	std	Y+17, r24	; 0x11
    1916:	89 89       	ldd	r24, Y+17	; 0x11
    1918:	9a 89       	ldd	r25, Y+18	; 0x12
    191a:	01 97       	sbiw	r24, 0x01	; 1
    191c:	f1 f7       	brne	.-4      	; 0x191a <init+0x28c>
    191e:	9a 8b       	std	Y+18, r25	; 0x12
    1920:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1922:	8b 89       	ldd	r24, Y+19	; 0x13
    1924:	9c 89       	ldd	r25, Y+20	; 0x14
    1926:	01 97       	sbiw	r24, 0x01	; 1
    1928:	9c 8b       	std	Y+20, r25	; 0x14
    192a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    192c:	8b 89       	ldd	r24, Y+19	; 0x13
    192e:	9c 89       	ldd	r25, Y+20	; 0x14
    1930:	00 97       	sbiw	r24, 0x00	; 0
    1932:	69 f7       	brne	.-38     	; 0x190e <init+0x280>
    1934:	14 c0       	rjmp	.+40     	; 0x195e <init+0x2d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1936:	6d 89       	ldd	r22, Y+21	; 0x15
    1938:	7e 89       	ldd	r23, Y+22	; 0x16
    193a:	8f 89       	ldd	r24, Y+23	; 0x17
    193c:	98 8d       	ldd	r25, Y+24	; 0x18
    193e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1942:	dc 01       	movw	r26, r24
    1944:	cb 01       	movw	r24, r22
    1946:	9c 8b       	std	Y+20, r25	; 0x14
    1948:	8b 8b       	std	Y+19, r24	; 0x13
    194a:	8b 89       	ldd	r24, Y+19	; 0x13
    194c:	9c 89       	ldd	r25, Y+20	; 0x14
    194e:	98 8b       	std	Y+16, r25	; 0x10
    1950:	8f 87       	std	Y+15, r24	; 0x0f
    1952:	8f 85       	ldd	r24, Y+15	; 0x0f
    1954:	98 89       	ldd	r25, Y+16	; 0x10
    1956:	01 97       	sbiw	r24, 0x01	; 1
    1958:	f1 f7       	brne	.-4      	; 0x1956 <init+0x2c8>
    195a:	98 8b       	std	Y+16, r25	; 0x10
    195c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);

	//clear display
	write_command(0b00000001);
    195e:	81 e0       	ldi	r24, 0x01	; 1
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <write_command>
    1966:	80 e0       	ldi	r24, 0x00	; 0
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	a0 ea       	ldi	r26, 0xA0	; 160
    196c:	b0 e4       	ldi	r27, 0x40	; 64
    196e:	8b 87       	std	Y+11, r24	; 0x0b
    1970:	9c 87       	std	Y+12, r25	; 0x0c
    1972:	ad 87       	std	Y+13, r26	; 0x0d
    1974:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1976:	6b 85       	ldd	r22, Y+11	; 0x0b
    1978:	7c 85       	ldd	r23, Y+12	; 0x0c
    197a:	8d 85       	ldd	r24, Y+13	; 0x0d
    197c:	9e 85       	ldd	r25, Y+14	; 0x0e
    197e:	20 e0       	ldi	r18, 0x00	; 0
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	4a ef       	ldi	r20, 0xFA	; 250
    1984:	54 e4       	ldi	r21, 0x44	; 68
    1986:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    198a:	dc 01       	movw	r26, r24
    198c:	cb 01       	movw	r24, r22
    198e:	8f 83       	std	Y+7, r24	; 0x07
    1990:	98 87       	std	Y+8, r25	; 0x08
    1992:	a9 87       	std	Y+9, r26	; 0x09
    1994:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1996:	6f 81       	ldd	r22, Y+7	; 0x07
    1998:	78 85       	ldd	r23, Y+8	; 0x08
    199a:	89 85       	ldd	r24, Y+9	; 0x09
    199c:	9a 85       	ldd	r25, Y+10	; 0x0a
    199e:	20 e0       	ldi	r18, 0x00	; 0
    19a0:	30 e0       	ldi	r19, 0x00	; 0
    19a2:	40 e8       	ldi	r20, 0x80	; 128
    19a4:	5f e3       	ldi	r21, 0x3F	; 63
    19a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19aa:	88 23       	and	r24, r24
    19ac:	2c f4       	brge	.+10     	; 0x19b8 <init+0x32a>
		__ticks = 1;
    19ae:	81 e0       	ldi	r24, 0x01	; 1
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	9e 83       	std	Y+6, r25	; 0x06
    19b4:	8d 83       	std	Y+5, r24	; 0x05
    19b6:	3f c0       	rjmp	.+126    	; 0x1a36 <init+0x3a8>
	else if (__tmp > 65535)
    19b8:	6f 81       	ldd	r22, Y+7	; 0x07
    19ba:	78 85       	ldd	r23, Y+8	; 0x08
    19bc:	89 85       	ldd	r24, Y+9	; 0x09
    19be:	9a 85       	ldd	r25, Y+10	; 0x0a
    19c0:	20 e0       	ldi	r18, 0x00	; 0
    19c2:	3f ef       	ldi	r19, 0xFF	; 255
    19c4:	4f e7       	ldi	r20, 0x7F	; 127
    19c6:	57 e4       	ldi	r21, 0x47	; 71
    19c8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19cc:	18 16       	cp	r1, r24
    19ce:	4c f5       	brge	.+82     	; 0x1a22 <init+0x394>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    19d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    19d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    19d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    19d8:	20 e0       	ldi	r18, 0x00	; 0
    19da:	30 e0       	ldi	r19, 0x00	; 0
    19dc:	40 e2       	ldi	r20, 0x20	; 32
    19de:	51 e4       	ldi	r21, 0x41	; 65
    19e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19e4:	dc 01       	movw	r26, r24
    19e6:	cb 01       	movw	r24, r22
    19e8:	bc 01       	movw	r22, r24
    19ea:	cd 01       	movw	r24, r26
    19ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19f0:	dc 01       	movw	r26, r24
    19f2:	cb 01       	movw	r24, r22
    19f4:	9e 83       	std	Y+6, r25	; 0x06
    19f6:	8d 83       	std	Y+5, r24	; 0x05
    19f8:	0f c0       	rjmp	.+30     	; 0x1a18 <init+0x38a>
    19fa:	88 ec       	ldi	r24, 0xC8	; 200
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	9c 83       	std	Y+4, r25	; 0x04
    1a00:	8b 83       	std	Y+3, r24	; 0x03
    1a02:	8b 81       	ldd	r24, Y+3	; 0x03
    1a04:	9c 81       	ldd	r25, Y+4	; 0x04
    1a06:	01 97       	sbiw	r24, 0x01	; 1
    1a08:	f1 f7       	brne	.-4      	; 0x1a06 <init+0x378>
    1a0a:	9c 83       	std	Y+4, r25	; 0x04
    1a0c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a10:	9e 81       	ldd	r25, Y+6	; 0x06
    1a12:	01 97       	sbiw	r24, 0x01	; 1
    1a14:	9e 83       	std	Y+6, r25	; 0x06
    1a16:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a18:	8d 81       	ldd	r24, Y+5	; 0x05
    1a1a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a1c:	00 97       	sbiw	r24, 0x00	; 0
    1a1e:	69 f7       	brne	.-38     	; 0x19fa <init+0x36c>
    1a20:	14 c0       	rjmp	.+40     	; 0x1a4a <init+0x3bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a22:	6f 81       	ldd	r22, Y+7	; 0x07
    1a24:	78 85       	ldd	r23, Y+8	; 0x08
    1a26:	89 85       	ldd	r24, Y+9	; 0x09
    1a28:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a2e:	dc 01       	movw	r26, r24
    1a30:	cb 01       	movw	r24, r22
    1a32:	9e 83       	std	Y+6, r25	; 0x06
    1a34:	8d 83       	std	Y+5, r24	; 0x05
    1a36:	8d 81       	ldd	r24, Y+5	; 0x05
    1a38:	9e 81       	ldd	r25, Y+6	; 0x06
    1a3a:	9a 83       	std	Y+2, r25	; 0x02
    1a3c:	89 83       	std	Y+1, r24	; 0x01
    1a3e:	89 81       	ldd	r24, Y+1	; 0x01
    1a40:	9a 81       	ldd	r25, Y+2	; 0x02
    1a42:	01 97       	sbiw	r24, 0x01	; 1
    1a44:	f1 f7       	brne	.-4      	; 0x1a42 <init+0x3b4>
    1a46:	9a 83       	std	Y+2, r25	; 0x02
    1a48:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);


}
    1a4a:	e8 96       	adiw	r28, 0x38	; 56
    1a4c:	0f b6       	in	r0, 0x3f	; 63
    1a4e:	f8 94       	cli
    1a50:	de bf       	out	0x3e, r29	; 62
    1a52:	0f be       	out	0x3f, r0	; 63
    1a54:	cd bf       	out	0x3d, r28	; 61
    1a56:	cf 91       	pop	r28
    1a58:	df 91       	pop	r29
    1a5a:	08 95       	ret

00001a5c <write_command>:


void write_command(u8 command)
{
    1a5c:	df 93       	push	r29
    1a5e:	cf 93       	push	r28
    1a60:	cd b7       	in	r28, 0x3d	; 61
    1a62:	de b7       	in	r29, 0x3e	; 62
    1a64:	2f 97       	sbiw	r28, 0x0f	; 15
    1a66:	0f b6       	in	r0, 0x3f	; 63
    1a68:	f8 94       	cli
    1a6a:	de bf       	out	0x3e, r29	; 62
    1a6c:	0f be       	out	0x3f, r0	; 63
    1a6e:	cd bf       	out	0x3d, r28	; 61
    1a70:	8f 87       	std	Y+15, r24	; 0x0f
	// enable
	DIO_enuSetPinValue(5, DIO_LOW);
    1a72:	85 e0       	ldi	r24, 0x05	; 5
    1a74:	60 e0       	ldi	r22, 0x00	; 0
    1a76:	0e 94 c9 07 	call	0xf92	; 0xf92 <DIO_enuSetPinValue>

	//RS
	DIO_enuSetPinValue(3,DIO_LOW);
    1a7a:	83 e0       	ldi	r24, 0x03	; 3
    1a7c:	60 e0       	ldi	r22, 0x00	; 0
    1a7e:	0e 94 c9 07 	call	0xf92	; 0xf92 <DIO_enuSetPinValue>
	//RW
	DIO_enuSetPinValue(4,DIO_LOW);
    1a82:	84 e0       	ldi	r24, 0x04	; 4
    1a84:	60 e0       	ldi	r22, 0x00	; 0
    1a86:	0e 94 c9 07 	call	0xf92	; 0xf92 <DIO_enuSetPinValue>


	DIO_enuSetPortValue(0,command);
    1a8a:	80 e0       	ldi	r24, 0x00	; 0
    1a8c:	6f 85       	ldd	r22, Y+15	; 0x0f
    1a8e:	0e 94 40 09 	call	0x1280	; 0x1280 <DIO_enuSetPortValue>


	DIO_enuSetPinValue(5, DIO_HIGH);
    1a92:	85 e0       	ldi	r24, 0x05	; 5
    1a94:	61 e0       	ldi	r22, 0x01	; 1
    1a96:	0e 94 c9 07 	call	0xf92	; 0xf92 <DIO_enuSetPinValue>
    1a9a:	80 e0       	ldi	r24, 0x00	; 0
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	a0 ea       	ldi	r26, 0xA0	; 160
    1aa0:	b0 e4       	ldi	r27, 0x40	; 64
    1aa2:	8b 87       	std	Y+11, r24	; 0x0b
    1aa4:	9c 87       	std	Y+12, r25	; 0x0c
    1aa6:	ad 87       	std	Y+13, r26	; 0x0d
    1aa8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aaa:	6b 85       	ldd	r22, Y+11	; 0x0b
    1aac:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aae:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ab0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ab2:	20 e0       	ldi	r18, 0x00	; 0
    1ab4:	30 e0       	ldi	r19, 0x00	; 0
    1ab6:	4a ef       	ldi	r20, 0xFA	; 250
    1ab8:	54 e4       	ldi	r21, 0x44	; 68
    1aba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1abe:	dc 01       	movw	r26, r24
    1ac0:	cb 01       	movw	r24, r22
    1ac2:	8f 83       	std	Y+7, r24	; 0x07
    1ac4:	98 87       	std	Y+8, r25	; 0x08
    1ac6:	a9 87       	std	Y+9, r26	; 0x09
    1ac8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1aca:	6f 81       	ldd	r22, Y+7	; 0x07
    1acc:	78 85       	ldd	r23, Y+8	; 0x08
    1ace:	89 85       	ldd	r24, Y+9	; 0x09
    1ad0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ad2:	20 e0       	ldi	r18, 0x00	; 0
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	40 e8       	ldi	r20, 0x80	; 128
    1ad8:	5f e3       	ldi	r21, 0x3F	; 63
    1ada:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ade:	88 23       	and	r24, r24
    1ae0:	2c f4       	brge	.+10     	; 0x1aec <write_command+0x90>
		__ticks = 1;
    1ae2:	81 e0       	ldi	r24, 0x01	; 1
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	9e 83       	std	Y+6, r25	; 0x06
    1ae8:	8d 83       	std	Y+5, r24	; 0x05
    1aea:	3f c0       	rjmp	.+126    	; 0x1b6a <write_command+0x10e>
	else if (__tmp > 65535)
    1aec:	6f 81       	ldd	r22, Y+7	; 0x07
    1aee:	78 85       	ldd	r23, Y+8	; 0x08
    1af0:	89 85       	ldd	r24, Y+9	; 0x09
    1af2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1af4:	20 e0       	ldi	r18, 0x00	; 0
    1af6:	3f ef       	ldi	r19, 0xFF	; 255
    1af8:	4f e7       	ldi	r20, 0x7F	; 127
    1afa:	57 e4       	ldi	r21, 0x47	; 71
    1afc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b00:	18 16       	cp	r1, r24
    1b02:	4c f5       	brge	.+82     	; 0x1b56 <write_command+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b04:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b06:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b08:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b0c:	20 e0       	ldi	r18, 0x00	; 0
    1b0e:	30 e0       	ldi	r19, 0x00	; 0
    1b10:	40 e2       	ldi	r20, 0x20	; 32
    1b12:	51 e4       	ldi	r21, 0x41	; 65
    1b14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b18:	dc 01       	movw	r26, r24
    1b1a:	cb 01       	movw	r24, r22
    1b1c:	bc 01       	movw	r22, r24
    1b1e:	cd 01       	movw	r24, r26
    1b20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b24:	dc 01       	movw	r26, r24
    1b26:	cb 01       	movw	r24, r22
    1b28:	9e 83       	std	Y+6, r25	; 0x06
    1b2a:	8d 83       	std	Y+5, r24	; 0x05
    1b2c:	0f c0       	rjmp	.+30     	; 0x1b4c <write_command+0xf0>
    1b2e:	88 ec       	ldi	r24, 0xC8	; 200
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	9c 83       	std	Y+4, r25	; 0x04
    1b34:	8b 83       	std	Y+3, r24	; 0x03
    1b36:	8b 81       	ldd	r24, Y+3	; 0x03
    1b38:	9c 81       	ldd	r25, Y+4	; 0x04
    1b3a:	01 97       	sbiw	r24, 0x01	; 1
    1b3c:	f1 f7       	brne	.-4      	; 0x1b3a <write_command+0xde>
    1b3e:	9c 83       	std	Y+4, r25	; 0x04
    1b40:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b42:	8d 81       	ldd	r24, Y+5	; 0x05
    1b44:	9e 81       	ldd	r25, Y+6	; 0x06
    1b46:	01 97       	sbiw	r24, 0x01	; 1
    1b48:	9e 83       	std	Y+6, r25	; 0x06
    1b4a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b50:	00 97       	sbiw	r24, 0x00	; 0
    1b52:	69 f7       	brne	.-38     	; 0x1b2e <write_command+0xd2>
    1b54:	14 c0       	rjmp	.+40     	; 0x1b7e <write_command+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b56:	6f 81       	ldd	r22, Y+7	; 0x07
    1b58:	78 85       	ldd	r23, Y+8	; 0x08
    1b5a:	89 85       	ldd	r24, Y+9	; 0x09
    1b5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b62:	dc 01       	movw	r26, r24
    1b64:	cb 01       	movw	r24, r22
    1b66:	9e 83       	std	Y+6, r25	; 0x06
    1b68:	8d 83       	std	Y+5, r24	; 0x05
    1b6a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b6c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b6e:	9a 83       	std	Y+2, r25	; 0x02
    1b70:	89 83       	std	Y+1, r24	; 0x01
    1b72:	89 81       	ldd	r24, Y+1	; 0x01
    1b74:	9a 81       	ldd	r25, Y+2	; 0x02
    1b76:	01 97       	sbiw	r24, 0x01	; 1
    1b78:	f1 f7       	brne	.-4      	; 0x1b76 <write_command+0x11a>
    1b7a:	9a 83       	std	Y+2, r25	; 0x02
    1b7c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	DIO_enuSetPinValue(5, DIO_LOW);
    1b7e:	85 e0       	ldi	r24, 0x05	; 5
    1b80:	60 e0       	ldi	r22, 0x00	; 0
    1b82:	0e 94 c9 07 	call	0xf92	; 0xf92 <DIO_enuSetPinValue>


}
    1b86:	2f 96       	adiw	r28, 0x0f	; 15
    1b88:	0f b6       	in	r0, 0x3f	; 63
    1b8a:	f8 94       	cli
    1b8c:	de bf       	out	0x3e, r29	; 62
    1b8e:	0f be       	out	0x3f, r0	; 63
    1b90:	cd bf       	out	0x3d, r28	; 61
    1b92:	cf 91       	pop	r28
    1b94:	df 91       	pop	r29
    1b96:	08 95       	ret

00001b98 <write_data>:




void write_data(u8 data)
{
    1b98:	df 93       	push	r29
    1b9a:	cf 93       	push	r28
    1b9c:	cd b7       	in	r28, 0x3d	; 61
    1b9e:	de b7       	in	r29, 0x3e	; 62
    1ba0:	2f 97       	sbiw	r28, 0x0f	; 15
    1ba2:	0f b6       	in	r0, 0x3f	; 63
    1ba4:	f8 94       	cli
    1ba6:	de bf       	out	0x3e, r29	; 62
    1ba8:	0f be       	out	0x3f, r0	; 63
    1baa:	cd bf       	out	0x3d, r28	; 61
    1bac:	8f 87       	std	Y+15, r24	; 0x0f


	// enable
	DIO_enuSetPinValue(5, DIO_LOW);
    1bae:	85 e0       	ldi	r24, 0x05	; 5
    1bb0:	60 e0       	ldi	r22, 0x00	; 0
    1bb2:	0e 94 c9 07 	call	0xf92	; 0xf92 <DIO_enuSetPinValue>

	//RS
	DIO_enuSetPinValue(3,DIO_HIGH);
    1bb6:	83 e0       	ldi	r24, 0x03	; 3
    1bb8:	61 e0       	ldi	r22, 0x01	; 1
    1bba:	0e 94 c9 07 	call	0xf92	; 0xf92 <DIO_enuSetPinValue>
	//RW
	DIO_enuSetPinValue(4,DIO_LOW);
    1bbe:	84 e0       	ldi	r24, 0x04	; 4
    1bc0:	60 e0       	ldi	r22, 0x00	; 0
    1bc2:	0e 94 c9 07 	call	0xf92	; 0xf92 <DIO_enuSetPinValue>


	DIO_enuSetPortValue(0,data);
    1bc6:	80 e0       	ldi	r24, 0x00	; 0
    1bc8:	6f 85       	ldd	r22, Y+15	; 0x0f
    1bca:	0e 94 40 09 	call	0x1280	; 0x1280 <DIO_enuSetPortValue>


	DIO_enuSetPinValue(5, DIO_HIGH);
    1bce:	85 e0       	ldi	r24, 0x05	; 5
    1bd0:	61 e0       	ldi	r22, 0x01	; 1
    1bd2:	0e 94 c9 07 	call	0xf92	; 0xf92 <DIO_enuSetPinValue>
    1bd6:	80 e0       	ldi	r24, 0x00	; 0
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	a0 ea       	ldi	r26, 0xA0	; 160
    1bdc:	b0 e4       	ldi	r27, 0x40	; 64
    1bde:	8b 87       	std	Y+11, r24	; 0x0b
    1be0:	9c 87       	std	Y+12, r25	; 0x0c
    1be2:	ad 87       	std	Y+13, r26	; 0x0d
    1be4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1be6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1be8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bea:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bec:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bee:	20 e0       	ldi	r18, 0x00	; 0
    1bf0:	30 e0       	ldi	r19, 0x00	; 0
    1bf2:	4a ef       	ldi	r20, 0xFA	; 250
    1bf4:	54 e4       	ldi	r21, 0x44	; 68
    1bf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bfa:	dc 01       	movw	r26, r24
    1bfc:	cb 01       	movw	r24, r22
    1bfe:	8f 83       	std	Y+7, r24	; 0x07
    1c00:	98 87       	std	Y+8, r25	; 0x08
    1c02:	a9 87       	std	Y+9, r26	; 0x09
    1c04:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c06:	6f 81       	ldd	r22, Y+7	; 0x07
    1c08:	78 85       	ldd	r23, Y+8	; 0x08
    1c0a:	89 85       	ldd	r24, Y+9	; 0x09
    1c0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c0e:	20 e0       	ldi	r18, 0x00	; 0
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	40 e8       	ldi	r20, 0x80	; 128
    1c14:	5f e3       	ldi	r21, 0x3F	; 63
    1c16:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c1a:	88 23       	and	r24, r24
    1c1c:	2c f4       	brge	.+10     	; 0x1c28 <write_data+0x90>
		__ticks = 1;
    1c1e:	81 e0       	ldi	r24, 0x01	; 1
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	9e 83       	std	Y+6, r25	; 0x06
    1c24:	8d 83       	std	Y+5, r24	; 0x05
    1c26:	3f c0       	rjmp	.+126    	; 0x1ca6 <write_data+0x10e>
	else if (__tmp > 65535)
    1c28:	6f 81       	ldd	r22, Y+7	; 0x07
    1c2a:	78 85       	ldd	r23, Y+8	; 0x08
    1c2c:	89 85       	ldd	r24, Y+9	; 0x09
    1c2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c30:	20 e0       	ldi	r18, 0x00	; 0
    1c32:	3f ef       	ldi	r19, 0xFF	; 255
    1c34:	4f e7       	ldi	r20, 0x7F	; 127
    1c36:	57 e4       	ldi	r21, 0x47	; 71
    1c38:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c3c:	18 16       	cp	r1, r24
    1c3e:	4c f5       	brge	.+82     	; 0x1c92 <write_data+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c40:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c42:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c44:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c46:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c48:	20 e0       	ldi	r18, 0x00	; 0
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	40 e2       	ldi	r20, 0x20	; 32
    1c4e:	51 e4       	ldi	r21, 0x41	; 65
    1c50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c54:	dc 01       	movw	r26, r24
    1c56:	cb 01       	movw	r24, r22
    1c58:	bc 01       	movw	r22, r24
    1c5a:	cd 01       	movw	r24, r26
    1c5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c60:	dc 01       	movw	r26, r24
    1c62:	cb 01       	movw	r24, r22
    1c64:	9e 83       	std	Y+6, r25	; 0x06
    1c66:	8d 83       	std	Y+5, r24	; 0x05
    1c68:	0f c0       	rjmp	.+30     	; 0x1c88 <write_data+0xf0>
    1c6a:	88 ec       	ldi	r24, 0xC8	; 200
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	9c 83       	std	Y+4, r25	; 0x04
    1c70:	8b 83       	std	Y+3, r24	; 0x03
    1c72:	8b 81       	ldd	r24, Y+3	; 0x03
    1c74:	9c 81       	ldd	r25, Y+4	; 0x04
    1c76:	01 97       	sbiw	r24, 0x01	; 1
    1c78:	f1 f7       	brne	.-4      	; 0x1c76 <write_data+0xde>
    1c7a:	9c 83       	std	Y+4, r25	; 0x04
    1c7c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c7e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c80:	9e 81       	ldd	r25, Y+6	; 0x06
    1c82:	01 97       	sbiw	r24, 0x01	; 1
    1c84:	9e 83       	std	Y+6, r25	; 0x06
    1c86:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c88:	8d 81       	ldd	r24, Y+5	; 0x05
    1c8a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c8c:	00 97       	sbiw	r24, 0x00	; 0
    1c8e:	69 f7       	brne	.-38     	; 0x1c6a <write_data+0xd2>
    1c90:	14 c0       	rjmp	.+40     	; 0x1cba <write_data+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c92:	6f 81       	ldd	r22, Y+7	; 0x07
    1c94:	78 85       	ldd	r23, Y+8	; 0x08
    1c96:	89 85       	ldd	r24, Y+9	; 0x09
    1c98:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c9e:	dc 01       	movw	r26, r24
    1ca0:	cb 01       	movw	r24, r22
    1ca2:	9e 83       	std	Y+6, r25	; 0x06
    1ca4:	8d 83       	std	Y+5, r24	; 0x05
    1ca6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ca8:	9e 81       	ldd	r25, Y+6	; 0x06
    1caa:	9a 83       	std	Y+2, r25	; 0x02
    1cac:	89 83       	std	Y+1, r24	; 0x01
    1cae:	89 81       	ldd	r24, Y+1	; 0x01
    1cb0:	9a 81       	ldd	r25, Y+2	; 0x02
    1cb2:	01 97       	sbiw	r24, 0x01	; 1
    1cb4:	f1 f7       	brne	.-4      	; 0x1cb2 <write_data+0x11a>
    1cb6:	9a 83       	std	Y+2, r25	; 0x02
    1cb8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	DIO_enuSetPinValue(5, DIO_LOW);
    1cba:	85 e0       	ldi	r24, 0x05	; 5
    1cbc:	60 e0       	ldi	r22, 0x00	; 0
    1cbe:	0e 94 c9 07 	call	0xf92	; 0xf92 <DIO_enuSetPinValue>

}
    1cc2:	2f 96       	adiw	r28, 0x0f	; 15
    1cc4:	0f b6       	in	r0, 0x3f	; 63
    1cc6:	f8 94       	cli
    1cc8:	de bf       	out	0x3e, r29	; 62
    1cca:	0f be       	out	0x3f, r0	; 63
    1ccc:	cd bf       	out	0x3d, r28	; 61
    1cce:	cf 91       	pop	r28
    1cd0:	df 91       	pop	r29
    1cd2:	08 95       	ret

00001cd4 <incrementDecrement>:

void incrementDecrement(u8*num){
    1cd4:	df 93       	push	r29
    1cd6:	cf 93       	push	r28
    1cd8:	cd b7       	in	r28, 0x3d	; 61
    1cda:	de b7       	in	r29, 0x3e	; 62
    1cdc:	a0 97       	sbiw	r28, 0x20	; 32
    1cde:	0f b6       	in	r0, 0x3f	; 63
    1ce0:	f8 94       	cli
    1ce2:	de bf       	out	0x3e, r29	; 62
    1ce4:	0f be       	out	0x3f, r0	; 63
    1ce6:	cd bf       	out	0x3d, r28	; 61
    1ce8:	98 a3       	std	Y+32, r25	; 0x20
    1cea:	8f 8f       	std	Y+31, r24	; 0x1f
	u8 u8Switch1;

	u8 u8Switch2;
	DIO_enuGetPinValue(0,&u8Switch1);
    1cec:	9e 01       	movw	r18, r28
    1cee:	23 5e       	subi	r18, 0xE3	; 227
    1cf0:	3f 4f       	sbci	r19, 0xFF	; 255
    1cf2:	80 e0       	ldi	r24, 0x00	; 0
    1cf4:	b9 01       	movw	r22, r18
    1cf6:	0e 94 57 08 	call	0x10ae	; 0x10ae <DIO_enuGetPinValue>
	DIO_enuGetPinValue(1,&u8Switch2);
    1cfa:	9e 01       	movw	r18, r28
    1cfc:	22 5e       	subi	r18, 0xE2	; 226
    1cfe:	3f 4f       	sbci	r19, 0xFF	; 255
    1d00:	81 e0       	ldi	r24, 0x01	; 1
    1d02:	b9 01       	movw	r22, r18
    1d04:	0e 94 57 08 	call	0x10ae	; 0x10ae <DIO_enuGetPinValue>
	//DIO_enuGetPinValue(2,&u8Switch3);


	if(u8Switch1==DIO_LOW)
    1d08:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d0a:	88 23       	and	r24, r24
    1d0c:	09 f0       	breq	.+2      	; 0x1d10 <incrementDecrement+0x3c>
    1d0e:	83 c0       	rjmp	.+262    	; 0x1e16 <incrementDecrement+0x142>
    1d10:	80 e0       	ldi	r24, 0x00	; 0
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	a6 e9       	ldi	r26, 0x96	; 150
    1d16:	b3 e4       	ldi	r27, 0x43	; 67
    1d18:	89 8f       	std	Y+25, r24	; 0x19
    1d1a:	9a 8f       	std	Y+26, r25	; 0x1a
    1d1c:	ab 8f       	std	Y+27, r26	; 0x1b
    1d1e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d20:	69 8d       	ldd	r22, Y+25	; 0x19
    1d22:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d24:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d26:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d28:	20 e0       	ldi	r18, 0x00	; 0
    1d2a:	30 e0       	ldi	r19, 0x00	; 0
    1d2c:	4a ef       	ldi	r20, 0xFA	; 250
    1d2e:	54 e4       	ldi	r21, 0x44	; 68
    1d30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d34:	dc 01       	movw	r26, r24
    1d36:	cb 01       	movw	r24, r22
    1d38:	8d 8b       	std	Y+21, r24	; 0x15
    1d3a:	9e 8b       	std	Y+22, r25	; 0x16
    1d3c:	af 8b       	std	Y+23, r26	; 0x17
    1d3e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d40:	6d 89       	ldd	r22, Y+21	; 0x15
    1d42:	7e 89       	ldd	r23, Y+22	; 0x16
    1d44:	8f 89       	ldd	r24, Y+23	; 0x17
    1d46:	98 8d       	ldd	r25, Y+24	; 0x18
    1d48:	20 e0       	ldi	r18, 0x00	; 0
    1d4a:	30 e0       	ldi	r19, 0x00	; 0
    1d4c:	40 e8       	ldi	r20, 0x80	; 128
    1d4e:	5f e3       	ldi	r21, 0x3F	; 63
    1d50:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d54:	88 23       	and	r24, r24
    1d56:	2c f4       	brge	.+10     	; 0x1d62 <incrementDecrement+0x8e>
		__ticks = 1;
    1d58:	81 e0       	ldi	r24, 0x01	; 1
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	9c 8b       	std	Y+20, r25	; 0x14
    1d5e:	8b 8b       	std	Y+19, r24	; 0x13
    1d60:	3f c0       	rjmp	.+126    	; 0x1de0 <incrementDecrement+0x10c>
	else if (__tmp > 65535)
    1d62:	6d 89       	ldd	r22, Y+21	; 0x15
    1d64:	7e 89       	ldd	r23, Y+22	; 0x16
    1d66:	8f 89       	ldd	r24, Y+23	; 0x17
    1d68:	98 8d       	ldd	r25, Y+24	; 0x18
    1d6a:	20 e0       	ldi	r18, 0x00	; 0
    1d6c:	3f ef       	ldi	r19, 0xFF	; 255
    1d6e:	4f e7       	ldi	r20, 0x7F	; 127
    1d70:	57 e4       	ldi	r21, 0x47	; 71
    1d72:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d76:	18 16       	cp	r1, r24
    1d78:	4c f5       	brge	.+82     	; 0x1dcc <incrementDecrement+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d7a:	69 8d       	ldd	r22, Y+25	; 0x19
    1d7c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d7e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d80:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d82:	20 e0       	ldi	r18, 0x00	; 0
    1d84:	30 e0       	ldi	r19, 0x00	; 0
    1d86:	40 e2       	ldi	r20, 0x20	; 32
    1d88:	51 e4       	ldi	r21, 0x41	; 65
    1d8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d8e:	dc 01       	movw	r26, r24
    1d90:	cb 01       	movw	r24, r22
    1d92:	bc 01       	movw	r22, r24
    1d94:	cd 01       	movw	r24, r26
    1d96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d9a:	dc 01       	movw	r26, r24
    1d9c:	cb 01       	movw	r24, r22
    1d9e:	9c 8b       	std	Y+20, r25	; 0x14
    1da0:	8b 8b       	std	Y+19, r24	; 0x13
    1da2:	0f c0       	rjmp	.+30     	; 0x1dc2 <incrementDecrement+0xee>
    1da4:	88 ec       	ldi	r24, 0xC8	; 200
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	9a 8b       	std	Y+18, r25	; 0x12
    1daa:	89 8b       	std	Y+17, r24	; 0x11
    1dac:	89 89       	ldd	r24, Y+17	; 0x11
    1dae:	9a 89       	ldd	r25, Y+18	; 0x12
    1db0:	01 97       	sbiw	r24, 0x01	; 1
    1db2:	f1 f7       	brne	.-4      	; 0x1db0 <incrementDecrement+0xdc>
    1db4:	9a 8b       	std	Y+18, r25	; 0x12
    1db6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1db8:	8b 89       	ldd	r24, Y+19	; 0x13
    1dba:	9c 89       	ldd	r25, Y+20	; 0x14
    1dbc:	01 97       	sbiw	r24, 0x01	; 1
    1dbe:	9c 8b       	std	Y+20, r25	; 0x14
    1dc0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dc2:	8b 89       	ldd	r24, Y+19	; 0x13
    1dc4:	9c 89       	ldd	r25, Y+20	; 0x14
    1dc6:	00 97       	sbiw	r24, 0x00	; 0
    1dc8:	69 f7       	brne	.-38     	; 0x1da4 <incrementDecrement+0xd0>
    1dca:	14 c0       	rjmp	.+40     	; 0x1df4 <incrementDecrement+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dcc:	6d 89       	ldd	r22, Y+21	; 0x15
    1dce:	7e 89       	ldd	r23, Y+22	; 0x16
    1dd0:	8f 89       	ldd	r24, Y+23	; 0x17
    1dd2:	98 8d       	ldd	r25, Y+24	; 0x18
    1dd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dd8:	dc 01       	movw	r26, r24
    1dda:	cb 01       	movw	r24, r22
    1ddc:	9c 8b       	std	Y+20, r25	; 0x14
    1dde:	8b 8b       	std	Y+19, r24	; 0x13
    1de0:	8b 89       	ldd	r24, Y+19	; 0x13
    1de2:	9c 89       	ldd	r25, Y+20	; 0x14
    1de4:	98 8b       	std	Y+16, r25	; 0x10
    1de6:	8f 87       	std	Y+15, r24	; 0x0f
    1de8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dea:	98 89       	ldd	r25, Y+16	; 0x10
    1dec:	01 97       	sbiw	r24, 0x01	; 1
    1dee:	f1 f7       	brne	.-4      	; 0x1dec <incrementDecrement+0x118>
    1df0:	98 8b       	std	Y+16, r25	; 0x10
    1df2:	8f 87       	std	Y+15, r24	; 0x0f

	{
		_delay_ms(300);

		(*num)++;
    1df4:	ef 8d       	ldd	r30, Y+31	; 0x1f
    1df6:	f8 a1       	ldd	r31, Y+32	; 0x20
    1df8:	80 81       	ld	r24, Z
    1dfa:	8f 5f       	subi	r24, 0xFF	; 255
    1dfc:	ef 8d       	ldd	r30, Y+31	; 0x1f
    1dfe:	f8 a1       	ldd	r31, Y+32	; 0x20
    1e00:	80 83       	st	Z, r24

		if((*num)>=10)
    1e02:	ef 8d       	ldd	r30, Y+31	; 0x1f
    1e04:	f8 a1       	ldd	r31, Y+32	; 0x20
    1e06:	80 81       	ld	r24, Z
    1e08:	8a 30       	cpi	r24, 0x0A	; 10
    1e0a:	08 f4       	brcc	.+2      	; 0x1e0e <incrementDecrement+0x13a>
    1e0c:	8b c0       	rjmp	.+278    	; 0x1f24 <incrementDecrement+0x250>

		{

			(*num)=0;
    1e0e:	ef 8d       	ldd	r30, Y+31	; 0x1f
    1e10:	f8 a1       	ldd	r31, Y+32	; 0x20
    1e12:	10 82       	st	Z, r1
    1e14:	87 c0       	rjmp	.+270    	; 0x1f24 <incrementDecrement+0x250>

			//Do Nothing

		}

	}else if(u8Switch2==DIO_LOW)
    1e16:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1e18:	88 23       	and	r24, r24
    1e1a:	09 f0       	breq	.+2      	; 0x1e1e <incrementDecrement+0x14a>
    1e1c:	83 c0       	rjmp	.+262    	; 0x1f24 <incrementDecrement+0x250>
    1e1e:	80 e0       	ldi	r24, 0x00	; 0
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	a6 e9       	ldi	r26, 0x96	; 150
    1e24:	b3 e4       	ldi	r27, 0x43	; 67
    1e26:	8b 87       	std	Y+11, r24	; 0x0b
    1e28:	9c 87       	std	Y+12, r25	; 0x0c
    1e2a:	ad 87       	std	Y+13, r26	; 0x0d
    1e2c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e2e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e30:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e32:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e34:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e36:	20 e0       	ldi	r18, 0x00	; 0
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	4a ef       	ldi	r20, 0xFA	; 250
    1e3c:	54 e4       	ldi	r21, 0x44	; 68
    1e3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e42:	dc 01       	movw	r26, r24
    1e44:	cb 01       	movw	r24, r22
    1e46:	8f 83       	std	Y+7, r24	; 0x07
    1e48:	98 87       	std	Y+8, r25	; 0x08
    1e4a:	a9 87       	std	Y+9, r26	; 0x09
    1e4c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e4e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e50:	78 85       	ldd	r23, Y+8	; 0x08
    1e52:	89 85       	ldd	r24, Y+9	; 0x09
    1e54:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e56:	20 e0       	ldi	r18, 0x00	; 0
    1e58:	30 e0       	ldi	r19, 0x00	; 0
    1e5a:	40 e8       	ldi	r20, 0x80	; 128
    1e5c:	5f e3       	ldi	r21, 0x3F	; 63
    1e5e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e62:	88 23       	and	r24, r24
    1e64:	2c f4       	brge	.+10     	; 0x1e70 <incrementDecrement+0x19c>
		__ticks = 1;
    1e66:	81 e0       	ldi	r24, 0x01	; 1
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	9e 83       	std	Y+6, r25	; 0x06
    1e6c:	8d 83       	std	Y+5, r24	; 0x05
    1e6e:	3f c0       	rjmp	.+126    	; 0x1eee <incrementDecrement+0x21a>
	else if (__tmp > 65535)
    1e70:	6f 81       	ldd	r22, Y+7	; 0x07
    1e72:	78 85       	ldd	r23, Y+8	; 0x08
    1e74:	89 85       	ldd	r24, Y+9	; 0x09
    1e76:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e78:	20 e0       	ldi	r18, 0x00	; 0
    1e7a:	3f ef       	ldi	r19, 0xFF	; 255
    1e7c:	4f e7       	ldi	r20, 0x7F	; 127
    1e7e:	57 e4       	ldi	r21, 0x47	; 71
    1e80:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e84:	18 16       	cp	r1, r24
    1e86:	4c f5       	brge	.+82     	; 0x1eda <incrementDecrement+0x206>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e88:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e8a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e90:	20 e0       	ldi	r18, 0x00	; 0
    1e92:	30 e0       	ldi	r19, 0x00	; 0
    1e94:	40 e2       	ldi	r20, 0x20	; 32
    1e96:	51 e4       	ldi	r21, 0x41	; 65
    1e98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e9c:	dc 01       	movw	r26, r24
    1e9e:	cb 01       	movw	r24, r22
    1ea0:	bc 01       	movw	r22, r24
    1ea2:	cd 01       	movw	r24, r26
    1ea4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ea8:	dc 01       	movw	r26, r24
    1eaa:	cb 01       	movw	r24, r22
    1eac:	9e 83       	std	Y+6, r25	; 0x06
    1eae:	8d 83       	std	Y+5, r24	; 0x05
    1eb0:	0f c0       	rjmp	.+30     	; 0x1ed0 <incrementDecrement+0x1fc>
    1eb2:	88 ec       	ldi	r24, 0xC8	; 200
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	9c 83       	std	Y+4, r25	; 0x04
    1eb8:	8b 83       	std	Y+3, r24	; 0x03
    1eba:	8b 81       	ldd	r24, Y+3	; 0x03
    1ebc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ebe:	01 97       	sbiw	r24, 0x01	; 1
    1ec0:	f1 f7       	brne	.-4      	; 0x1ebe <incrementDecrement+0x1ea>
    1ec2:	9c 83       	std	Y+4, r25	; 0x04
    1ec4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ec6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ec8:	9e 81       	ldd	r25, Y+6	; 0x06
    1eca:	01 97       	sbiw	r24, 0x01	; 1
    1ecc:	9e 83       	std	Y+6, r25	; 0x06
    1ece:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ed0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ed2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ed4:	00 97       	sbiw	r24, 0x00	; 0
    1ed6:	69 f7       	brne	.-38     	; 0x1eb2 <incrementDecrement+0x1de>
    1ed8:	14 c0       	rjmp	.+40     	; 0x1f02 <incrementDecrement+0x22e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eda:	6f 81       	ldd	r22, Y+7	; 0x07
    1edc:	78 85       	ldd	r23, Y+8	; 0x08
    1ede:	89 85       	ldd	r24, Y+9	; 0x09
    1ee0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ee2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ee6:	dc 01       	movw	r26, r24
    1ee8:	cb 01       	movw	r24, r22
    1eea:	9e 83       	std	Y+6, r25	; 0x06
    1eec:	8d 83       	std	Y+5, r24	; 0x05
    1eee:	8d 81       	ldd	r24, Y+5	; 0x05
    1ef0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ef2:	9a 83       	std	Y+2, r25	; 0x02
    1ef4:	89 83       	std	Y+1, r24	; 0x01
    1ef6:	89 81       	ldd	r24, Y+1	; 0x01
    1ef8:	9a 81       	ldd	r25, Y+2	; 0x02
    1efa:	01 97       	sbiw	r24, 0x01	; 1
    1efc:	f1 f7       	brne	.-4      	; 0x1efa <incrementDecrement+0x226>
    1efe:	9a 83       	std	Y+2, r25	; 0x02
    1f00:	89 83       	std	Y+1, r24	; 0x01
	{

		_delay_ms(300);


		if((*num)>0)
    1f02:	ef 8d       	ldd	r30, Y+31	; 0x1f
    1f04:	f8 a1       	ldd	r31, Y+32	; 0x20
    1f06:	80 81       	ld	r24, Z
    1f08:	88 23       	and	r24, r24
    1f0a:	41 f0       	breq	.+16     	; 0x1f1c <incrementDecrement+0x248>

		{

			(*num)--;
    1f0c:	ef 8d       	ldd	r30, Y+31	; 0x1f
    1f0e:	f8 a1       	ldd	r31, Y+32	; 0x20
    1f10:	80 81       	ld	r24, Z
    1f12:	81 50       	subi	r24, 0x01	; 1
    1f14:	ef 8d       	ldd	r30, Y+31	; 0x1f
    1f16:	f8 a1       	ldd	r31, Y+32	; 0x20
    1f18:	80 83       	st	Z, r24
    1f1a:	04 c0       	rjmp	.+8      	; 0x1f24 <incrementDecrement+0x250>

		}else

		{

			(*num)=9;
    1f1c:	ef 8d       	ldd	r30, Y+31	; 0x1f
    1f1e:	f8 a1       	ldd	r31, Y+32	; 0x20
    1f20:	89 e0       	ldi	r24, 0x09	; 9
    1f22:	80 83       	st	Z, r24





}
    1f24:	a0 96       	adiw	r28, 0x20	; 32
    1f26:	0f b6       	in	r0, 0x3f	; 63
    1f28:	f8 94       	cli
    1f2a:	de bf       	out	0x3e, r29	; 62
    1f2c:	0f be       	out	0x3f, r0	; 63
    1f2e:	cd bf       	out	0x3d, r28	; 61
    1f30:	cf 91       	pop	r28
    1f32:	df 91       	pop	r29
    1f34:	08 95       	ret

00001f36 <choseOperation>:

void choseOperation(operation * op){
    1f36:	df 93       	push	r29
    1f38:	cf 93       	push	r28
    1f3a:	cd b7       	in	r28, 0x3d	; 61
    1f3c:	de b7       	in	r29, 0x3e	; 62
    1f3e:	a3 97       	sbiw	r28, 0x23	; 35
    1f40:	0f b6       	in	r0, 0x3f	; 63
    1f42:	f8 94       	cli
    1f44:	de bf       	out	0x3e, r29	; 62
    1f46:	0f be       	out	0x3f, r0	; 63
    1f48:	cd bf       	out	0x3d, r28	; 61
    1f4a:	99 a3       	std	Y+33, r25	; 0x21
    1f4c:	88 a3       	std	Y+32, r24	; 0x20

	u8 u8Switch1;

	u8 u8Switch2;
	DIO_enuGetPinValue(0,&u8Switch1);
    1f4e:	9e 01       	movw	r18, r28
    1f50:	22 5e       	subi	r18, 0xE2	; 226
    1f52:	3f 4f       	sbci	r19, 0xFF	; 255
    1f54:	80 e0       	ldi	r24, 0x00	; 0
    1f56:	b9 01       	movw	r22, r18
    1f58:	0e 94 57 08 	call	0x10ae	; 0x10ae <DIO_enuGetPinValue>
	DIO_enuGetPinValue(1,&u8Switch2);
    1f5c:	9e 01       	movw	r18, r28
    1f5e:	21 5e       	subi	r18, 0xE1	; 225
    1f60:	3f 4f       	sbci	r19, 0xFF	; 255
    1f62:	81 e0       	ldi	r24, 0x01	; 1
    1f64:	b9 01       	movw	r22, r18
    1f66:	0e 94 57 08 	call	0x10ae	; 0x10ae <DIO_enuGetPinValue>
	//DIO_enuGetPinValue(2,&u8Switch3);
	u8 index=(u8)(*op);
    1f6a:	e8 a1       	ldd	r30, Y+32	; 0x20
    1f6c:	f9 a1       	ldd	r31, Y+33	; 0x21
    1f6e:	80 81       	ld	r24, Z
    1f70:	8d 8f       	std	Y+29, r24	; 0x1d


	if(u8Switch1==DIO_LOW)
    1f72:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f74:	88 23       	and	r24, r24
    1f76:	09 f0       	breq	.+2      	; 0x1f7a <choseOperation+0x44>
    1f78:	7b c0       	rjmp	.+246    	; 0x2070 <choseOperation+0x13a>
    1f7a:	80 e0       	ldi	r24, 0x00	; 0
    1f7c:	90 e0       	ldi	r25, 0x00	; 0
    1f7e:	a6 e9       	ldi	r26, 0x96	; 150
    1f80:	b3 e4       	ldi	r27, 0x43	; 67
    1f82:	89 8f       	std	Y+25, r24	; 0x19
    1f84:	9a 8f       	std	Y+26, r25	; 0x1a
    1f86:	ab 8f       	std	Y+27, r26	; 0x1b
    1f88:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f8a:	69 8d       	ldd	r22, Y+25	; 0x19
    1f8c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f8e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f90:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f92:	20 e0       	ldi	r18, 0x00	; 0
    1f94:	30 e0       	ldi	r19, 0x00	; 0
    1f96:	4a ef       	ldi	r20, 0xFA	; 250
    1f98:	54 e4       	ldi	r21, 0x44	; 68
    1f9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f9e:	dc 01       	movw	r26, r24
    1fa0:	cb 01       	movw	r24, r22
    1fa2:	8d 8b       	std	Y+21, r24	; 0x15
    1fa4:	9e 8b       	std	Y+22, r25	; 0x16
    1fa6:	af 8b       	std	Y+23, r26	; 0x17
    1fa8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1faa:	6d 89       	ldd	r22, Y+21	; 0x15
    1fac:	7e 89       	ldd	r23, Y+22	; 0x16
    1fae:	8f 89       	ldd	r24, Y+23	; 0x17
    1fb0:	98 8d       	ldd	r25, Y+24	; 0x18
    1fb2:	20 e0       	ldi	r18, 0x00	; 0
    1fb4:	30 e0       	ldi	r19, 0x00	; 0
    1fb6:	40 e8       	ldi	r20, 0x80	; 128
    1fb8:	5f e3       	ldi	r21, 0x3F	; 63
    1fba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fbe:	88 23       	and	r24, r24
    1fc0:	2c f4       	brge	.+10     	; 0x1fcc <choseOperation+0x96>
		__ticks = 1;
    1fc2:	81 e0       	ldi	r24, 0x01	; 1
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	9c 8b       	std	Y+20, r25	; 0x14
    1fc8:	8b 8b       	std	Y+19, r24	; 0x13
    1fca:	3f c0       	rjmp	.+126    	; 0x204a <choseOperation+0x114>
	else if (__tmp > 65535)
    1fcc:	6d 89       	ldd	r22, Y+21	; 0x15
    1fce:	7e 89       	ldd	r23, Y+22	; 0x16
    1fd0:	8f 89       	ldd	r24, Y+23	; 0x17
    1fd2:	98 8d       	ldd	r25, Y+24	; 0x18
    1fd4:	20 e0       	ldi	r18, 0x00	; 0
    1fd6:	3f ef       	ldi	r19, 0xFF	; 255
    1fd8:	4f e7       	ldi	r20, 0x7F	; 127
    1fda:	57 e4       	ldi	r21, 0x47	; 71
    1fdc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fe0:	18 16       	cp	r1, r24
    1fe2:	4c f5       	brge	.+82     	; 0x2036 <choseOperation+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fe4:	69 8d       	ldd	r22, Y+25	; 0x19
    1fe6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fe8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fec:	20 e0       	ldi	r18, 0x00	; 0
    1fee:	30 e0       	ldi	r19, 0x00	; 0
    1ff0:	40 e2       	ldi	r20, 0x20	; 32
    1ff2:	51 e4       	ldi	r21, 0x41	; 65
    1ff4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ff8:	dc 01       	movw	r26, r24
    1ffa:	cb 01       	movw	r24, r22
    1ffc:	bc 01       	movw	r22, r24
    1ffe:	cd 01       	movw	r24, r26
    2000:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2004:	dc 01       	movw	r26, r24
    2006:	cb 01       	movw	r24, r22
    2008:	9c 8b       	std	Y+20, r25	; 0x14
    200a:	8b 8b       	std	Y+19, r24	; 0x13
    200c:	0f c0       	rjmp	.+30     	; 0x202c <choseOperation+0xf6>
    200e:	88 ec       	ldi	r24, 0xC8	; 200
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	9a 8b       	std	Y+18, r25	; 0x12
    2014:	89 8b       	std	Y+17, r24	; 0x11
    2016:	89 89       	ldd	r24, Y+17	; 0x11
    2018:	9a 89       	ldd	r25, Y+18	; 0x12
    201a:	01 97       	sbiw	r24, 0x01	; 1
    201c:	f1 f7       	brne	.-4      	; 0x201a <choseOperation+0xe4>
    201e:	9a 8b       	std	Y+18, r25	; 0x12
    2020:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2022:	8b 89       	ldd	r24, Y+19	; 0x13
    2024:	9c 89       	ldd	r25, Y+20	; 0x14
    2026:	01 97       	sbiw	r24, 0x01	; 1
    2028:	9c 8b       	std	Y+20, r25	; 0x14
    202a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    202c:	8b 89       	ldd	r24, Y+19	; 0x13
    202e:	9c 89       	ldd	r25, Y+20	; 0x14
    2030:	00 97       	sbiw	r24, 0x00	; 0
    2032:	69 f7       	brne	.-38     	; 0x200e <choseOperation+0xd8>
    2034:	14 c0       	rjmp	.+40     	; 0x205e <choseOperation+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2036:	6d 89       	ldd	r22, Y+21	; 0x15
    2038:	7e 89       	ldd	r23, Y+22	; 0x16
    203a:	8f 89       	ldd	r24, Y+23	; 0x17
    203c:	98 8d       	ldd	r25, Y+24	; 0x18
    203e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2042:	dc 01       	movw	r26, r24
    2044:	cb 01       	movw	r24, r22
    2046:	9c 8b       	std	Y+20, r25	; 0x14
    2048:	8b 8b       	std	Y+19, r24	; 0x13
    204a:	8b 89       	ldd	r24, Y+19	; 0x13
    204c:	9c 89       	ldd	r25, Y+20	; 0x14
    204e:	98 8b       	std	Y+16, r25	; 0x10
    2050:	8f 87       	std	Y+15, r24	; 0x0f
    2052:	8f 85       	ldd	r24, Y+15	; 0x0f
    2054:	98 89       	ldd	r25, Y+16	; 0x10
    2056:	01 97       	sbiw	r24, 0x01	; 1
    2058:	f1 f7       	brne	.-4      	; 0x2056 <choseOperation+0x120>
    205a:	98 8b       	std	Y+16, r25	; 0x10
    205c:	8f 87       	std	Y+15, r24	; 0x0f

	{
		_delay_ms(300);

		index++;
    205e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2060:	8f 5f       	subi	r24, 0xFF	; 255
    2062:	8d 8f       	std	Y+29, r24	; 0x1d

		if((index)>=4)
    2064:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2066:	84 30       	cpi	r24, 0x04	; 4
    2068:	08 f4       	brcc	.+2      	; 0x206c <choseOperation+0x136>
    206a:	81 c0       	rjmp	.+258    	; 0x216e <choseOperation+0x238>

		{

			(index)=0;
    206c:	1d 8e       	std	Y+29, r1	; 0x1d
    206e:	7f c0       	rjmp	.+254    	; 0x216e <choseOperation+0x238>

			//Do Nothing

		}

	}else if(u8Switch2==DIO_LOW)
    2070:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2072:	88 23       	and	r24, r24
    2074:	09 f0       	breq	.+2      	; 0x2078 <choseOperation+0x142>
    2076:	7b c0       	rjmp	.+246    	; 0x216e <choseOperation+0x238>
    2078:	80 e0       	ldi	r24, 0x00	; 0
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	a6 e9       	ldi	r26, 0x96	; 150
    207e:	b3 e4       	ldi	r27, 0x43	; 67
    2080:	8b 87       	std	Y+11, r24	; 0x0b
    2082:	9c 87       	std	Y+12, r25	; 0x0c
    2084:	ad 87       	std	Y+13, r26	; 0x0d
    2086:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2088:	6b 85       	ldd	r22, Y+11	; 0x0b
    208a:	7c 85       	ldd	r23, Y+12	; 0x0c
    208c:	8d 85       	ldd	r24, Y+13	; 0x0d
    208e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2090:	20 e0       	ldi	r18, 0x00	; 0
    2092:	30 e0       	ldi	r19, 0x00	; 0
    2094:	4a ef       	ldi	r20, 0xFA	; 250
    2096:	54 e4       	ldi	r21, 0x44	; 68
    2098:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    209c:	dc 01       	movw	r26, r24
    209e:	cb 01       	movw	r24, r22
    20a0:	8f 83       	std	Y+7, r24	; 0x07
    20a2:	98 87       	std	Y+8, r25	; 0x08
    20a4:	a9 87       	std	Y+9, r26	; 0x09
    20a6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20a8:	6f 81       	ldd	r22, Y+7	; 0x07
    20aa:	78 85       	ldd	r23, Y+8	; 0x08
    20ac:	89 85       	ldd	r24, Y+9	; 0x09
    20ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    20b0:	20 e0       	ldi	r18, 0x00	; 0
    20b2:	30 e0       	ldi	r19, 0x00	; 0
    20b4:	40 e8       	ldi	r20, 0x80	; 128
    20b6:	5f e3       	ldi	r21, 0x3F	; 63
    20b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20bc:	88 23       	and	r24, r24
    20be:	2c f4       	brge	.+10     	; 0x20ca <choseOperation+0x194>
		__ticks = 1;
    20c0:	81 e0       	ldi	r24, 0x01	; 1
    20c2:	90 e0       	ldi	r25, 0x00	; 0
    20c4:	9e 83       	std	Y+6, r25	; 0x06
    20c6:	8d 83       	std	Y+5, r24	; 0x05
    20c8:	3f c0       	rjmp	.+126    	; 0x2148 <choseOperation+0x212>
	else if (__tmp > 65535)
    20ca:	6f 81       	ldd	r22, Y+7	; 0x07
    20cc:	78 85       	ldd	r23, Y+8	; 0x08
    20ce:	89 85       	ldd	r24, Y+9	; 0x09
    20d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    20d2:	20 e0       	ldi	r18, 0x00	; 0
    20d4:	3f ef       	ldi	r19, 0xFF	; 255
    20d6:	4f e7       	ldi	r20, 0x7F	; 127
    20d8:	57 e4       	ldi	r21, 0x47	; 71
    20da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20de:	18 16       	cp	r1, r24
    20e0:	4c f5       	brge	.+82     	; 0x2134 <choseOperation+0x1fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    20e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    20e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    20e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    20ea:	20 e0       	ldi	r18, 0x00	; 0
    20ec:	30 e0       	ldi	r19, 0x00	; 0
    20ee:	40 e2       	ldi	r20, 0x20	; 32
    20f0:	51 e4       	ldi	r21, 0x41	; 65
    20f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20f6:	dc 01       	movw	r26, r24
    20f8:	cb 01       	movw	r24, r22
    20fa:	bc 01       	movw	r22, r24
    20fc:	cd 01       	movw	r24, r26
    20fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2102:	dc 01       	movw	r26, r24
    2104:	cb 01       	movw	r24, r22
    2106:	9e 83       	std	Y+6, r25	; 0x06
    2108:	8d 83       	std	Y+5, r24	; 0x05
    210a:	0f c0       	rjmp	.+30     	; 0x212a <choseOperation+0x1f4>
    210c:	88 ec       	ldi	r24, 0xC8	; 200
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	9c 83       	std	Y+4, r25	; 0x04
    2112:	8b 83       	std	Y+3, r24	; 0x03
    2114:	8b 81       	ldd	r24, Y+3	; 0x03
    2116:	9c 81       	ldd	r25, Y+4	; 0x04
    2118:	01 97       	sbiw	r24, 0x01	; 1
    211a:	f1 f7       	brne	.-4      	; 0x2118 <choseOperation+0x1e2>
    211c:	9c 83       	std	Y+4, r25	; 0x04
    211e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2120:	8d 81       	ldd	r24, Y+5	; 0x05
    2122:	9e 81       	ldd	r25, Y+6	; 0x06
    2124:	01 97       	sbiw	r24, 0x01	; 1
    2126:	9e 83       	std	Y+6, r25	; 0x06
    2128:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    212a:	8d 81       	ldd	r24, Y+5	; 0x05
    212c:	9e 81       	ldd	r25, Y+6	; 0x06
    212e:	00 97       	sbiw	r24, 0x00	; 0
    2130:	69 f7       	brne	.-38     	; 0x210c <choseOperation+0x1d6>
    2132:	14 c0       	rjmp	.+40     	; 0x215c <choseOperation+0x226>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2134:	6f 81       	ldd	r22, Y+7	; 0x07
    2136:	78 85       	ldd	r23, Y+8	; 0x08
    2138:	89 85       	ldd	r24, Y+9	; 0x09
    213a:	9a 85       	ldd	r25, Y+10	; 0x0a
    213c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2140:	dc 01       	movw	r26, r24
    2142:	cb 01       	movw	r24, r22
    2144:	9e 83       	std	Y+6, r25	; 0x06
    2146:	8d 83       	std	Y+5, r24	; 0x05
    2148:	8d 81       	ldd	r24, Y+5	; 0x05
    214a:	9e 81       	ldd	r25, Y+6	; 0x06
    214c:	9a 83       	std	Y+2, r25	; 0x02
    214e:	89 83       	std	Y+1, r24	; 0x01
    2150:	89 81       	ldd	r24, Y+1	; 0x01
    2152:	9a 81       	ldd	r25, Y+2	; 0x02
    2154:	01 97       	sbiw	r24, 0x01	; 1
    2156:	f1 f7       	brne	.-4      	; 0x2154 <choseOperation+0x21e>
    2158:	9a 83       	std	Y+2, r25	; 0x02
    215a:	89 83       	std	Y+1, r24	; 0x01
	{

		_delay_ms(300);


		if((index)>0)
    215c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    215e:	88 23       	and	r24, r24
    2160:	21 f0       	breq	.+8      	; 0x216a <choseOperation+0x234>

		{

			(index)--;
    2162:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2164:	81 50       	subi	r24, 0x01	; 1
    2166:	8d 8f       	std	Y+29, r24	; 0x1d
    2168:	02 c0       	rjmp	.+4      	; 0x216e <choseOperation+0x238>

		}else

		{

			(index)=3;
    216a:	83 e0       	ldi	r24, 0x03	; 3
    216c:	8d 8f       	std	Y+29, r24	; 0x1d
		}

	}


	switch (index){
    216e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2170:	28 2f       	mov	r18, r24
    2172:	30 e0       	ldi	r19, 0x00	; 0
    2174:	3b a3       	std	Y+35, r19	; 0x23
    2176:	2a a3       	std	Y+34, r18	; 0x22
    2178:	8a a1       	ldd	r24, Y+34	; 0x22
    217a:	9b a1       	ldd	r25, Y+35	; 0x23
    217c:	81 30       	cpi	r24, 0x01	; 1
    217e:	91 05       	cpc	r25, r1
    2180:	c9 f0       	breq	.+50     	; 0x21b4 <choseOperation+0x27e>
    2182:	2a a1       	ldd	r18, Y+34	; 0x22
    2184:	3b a1       	ldd	r19, Y+35	; 0x23
    2186:	22 30       	cpi	r18, 0x02	; 2
    2188:	31 05       	cpc	r19, r1
    218a:	2c f4       	brge	.+10     	; 0x2196 <choseOperation+0x260>
    218c:	8a a1       	ldd	r24, Y+34	; 0x22
    218e:	9b a1       	ldd	r25, Y+35	; 0x23
    2190:	00 97       	sbiw	r24, 0x00	; 0
    2192:	61 f0       	breq	.+24     	; 0x21ac <choseOperation+0x276>
    2194:	1d c0       	rjmp	.+58     	; 0x21d0 <choseOperation+0x29a>
    2196:	2a a1       	ldd	r18, Y+34	; 0x22
    2198:	3b a1       	ldd	r19, Y+35	; 0x23
    219a:	22 30       	cpi	r18, 0x02	; 2
    219c:	31 05       	cpc	r19, r1
    219e:	79 f0       	breq	.+30     	; 0x21be <choseOperation+0x288>
    21a0:	8a a1       	ldd	r24, Y+34	; 0x22
    21a2:	9b a1       	ldd	r25, Y+35	; 0x23
    21a4:	83 30       	cpi	r24, 0x03	; 3
    21a6:	91 05       	cpc	r25, r1
    21a8:	79 f0       	breq	.+30     	; 0x21c8 <choseOperation+0x292>
    21aa:	12 c0       	rjmp	.+36     	; 0x21d0 <choseOperation+0x29a>

	case 0 :
		*op = add;
    21ac:	e8 a1       	ldd	r30, Y+32	; 0x20
    21ae:	f9 a1       	ldd	r31, Y+33	; 0x21
    21b0:	10 82       	st	Z, r1
    21b2:	0e c0       	rjmp	.+28     	; 0x21d0 <choseOperation+0x29a>
		break;
	case 1 :
		*op = sub;
    21b4:	e8 a1       	ldd	r30, Y+32	; 0x20
    21b6:	f9 a1       	ldd	r31, Y+33	; 0x21
    21b8:	81 e0       	ldi	r24, 0x01	; 1
    21ba:	80 83       	st	Z, r24
    21bc:	09 c0       	rjmp	.+18     	; 0x21d0 <choseOperation+0x29a>
		break;
	case 2 :
		*op = multi;
    21be:	e8 a1       	ldd	r30, Y+32	; 0x20
    21c0:	f9 a1       	ldd	r31, Y+33	; 0x21
    21c2:	82 e0       	ldi	r24, 0x02	; 2
    21c4:	80 83       	st	Z, r24
    21c6:	04 c0       	rjmp	.+8      	; 0x21d0 <choseOperation+0x29a>
		break;
	case 3 :
		*op = div;
    21c8:	e8 a1       	ldd	r30, Y+32	; 0x20
    21ca:	f9 a1       	ldd	r31, Y+33	; 0x21
    21cc:	83 e0       	ldi	r24, 0x03	; 3
    21ce:	80 83       	st	Z, r24


	}

	return;
}
    21d0:	a3 96       	adiw	r28, 0x23	; 35
    21d2:	0f b6       	in	r0, 0x3f	; 63
    21d4:	f8 94       	cli
    21d6:	de bf       	out	0x3e, r29	; 62
    21d8:	0f be       	out	0x3f, r0	; 63
    21da:	cd bf       	out	0x3d, r28	; 61
    21dc:	cf 91       	pop	r28
    21de:	df 91       	pop	r29
    21e0:	08 95       	ret

000021e2 <opToChar>:

s8 opToChar(operation op){
    21e2:	df 93       	push	r29
    21e4:	cf 93       	push	r28
    21e6:	00 d0       	rcall	.+0      	; 0x21e8 <opToChar+0x6>
    21e8:	00 d0       	rcall	.+0      	; 0x21ea <opToChar+0x8>
    21ea:	cd b7       	in	r28, 0x3d	; 61
    21ec:	de b7       	in	r29, 0x3e	; 62
    21ee:	8a 83       	std	Y+2, r24	; 0x02

	s8 c='0';
    21f0:	80 e3       	ldi	r24, 0x30	; 48
    21f2:	89 83       	std	Y+1, r24	; 0x01

	switch (op){
    21f4:	8a 81       	ldd	r24, Y+2	; 0x02
    21f6:	28 2f       	mov	r18, r24
    21f8:	30 e0       	ldi	r19, 0x00	; 0
    21fa:	3c 83       	std	Y+4, r19	; 0x04
    21fc:	2b 83       	std	Y+3, r18	; 0x03
    21fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2200:	9c 81       	ldd	r25, Y+4	; 0x04
    2202:	81 30       	cpi	r24, 0x01	; 1
    2204:	91 05       	cpc	r25, r1
    2206:	c1 f0       	breq	.+48     	; 0x2238 <opToChar+0x56>
    2208:	2b 81       	ldd	r18, Y+3	; 0x03
    220a:	3c 81       	ldd	r19, Y+4	; 0x04
    220c:	22 30       	cpi	r18, 0x02	; 2
    220e:	31 05       	cpc	r19, r1
    2210:	2c f4       	brge	.+10     	; 0x221c <opToChar+0x3a>
    2212:	8b 81       	ldd	r24, Y+3	; 0x03
    2214:	9c 81       	ldd	r25, Y+4	; 0x04
    2216:	00 97       	sbiw	r24, 0x00	; 0
    2218:	61 f0       	breq	.+24     	; 0x2232 <opToChar+0x50>
    221a:	17 c0       	rjmp	.+46     	; 0x224a <opToChar+0x68>
    221c:	2b 81       	ldd	r18, Y+3	; 0x03
    221e:	3c 81       	ldd	r19, Y+4	; 0x04
    2220:	22 30       	cpi	r18, 0x02	; 2
    2222:	31 05       	cpc	r19, r1
    2224:	61 f0       	breq	.+24     	; 0x223e <opToChar+0x5c>
    2226:	8b 81       	ldd	r24, Y+3	; 0x03
    2228:	9c 81       	ldd	r25, Y+4	; 0x04
    222a:	83 30       	cpi	r24, 0x03	; 3
    222c:	91 05       	cpc	r25, r1
    222e:	51 f0       	breq	.+20     	; 0x2244 <opToChar+0x62>
    2230:	0c c0       	rjmp	.+24     	; 0x224a <opToChar+0x68>

	case add :
		c = '+';
    2232:	8b e2       	ldi	r24, 0x2B	; 43
    2234:	89 83       	std	Y+1, r24	; 0x01
    2236:	0b c0       	rjmp	.+22     	; 0x224e <opToChar+0x6c>
		break;
	case sub :
		c = '-';
    2238:	8d e2       	ldi	r24, 0x2D	; 45
    223a:	89 83       	std	Y+1, r24	; 0x01
    223c:	08 c0       	rjmp	.+16     	; 0x224e <opToChar+0x6c>
		break;
	case multi :
		c = '*';
    223e:	8a e2       	ldi	r24, 0x2A	; 42
    2240:	89 83       	std	Y+1, r24	; 0x01
    2242:	05 c0       	rjmp	.+10     	; 0x224e <opToChar+0x6c>
		break;
	case div :
		c = '/';
    2244:	8f e2       	ldi	r24, 0x2F	; 47
    2246:	89 83       	std	Y+1, r24	; 0x01
    2248:	02 c0       	rjmp	.+4      	; 0x224e <opToChar+0x6c>
		break;
	default:
		c = '0';
    224a:	80 e3       	ldi	r24, 0x30	; 48
    224c:	89 83       	std	Y+1, r24	; 0x01

	}



	return c;
    224e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2250:	0f 90       	pop	r0
    2252:	0f 90       	pop	r0
    2254:	0f 90       	pop	r0
    2256:	0f 90       	pop	r0
    2258:	cf 91       	pop	r28
    225a:	df 91       	pop	r29
    225c:	08 95       	ret

0000225e <transition_gurad>:
STD_Bool transition_gurad( ){
    225e:	df 93       	push	r29
    2260:	cf 93       	push	r28
    2262:	cd b7       	in	r28, 0x3d	; 61
    2264:	de b7       	in	r29, 0x3e	; 62
    2266:	60 97       	sbiw	r28, 0x10	; 16
    2268:	0f b6       	in	r0, 0x3f	; 63
    226a:	f8 94       	cli
    226c:	de bf       	out	0x3e, r29	; 62
    226e:	0f be       	out	0x3f, r0	; 63
    2270:	cd bf       	out	0x3d, r28	; 61

	STD_Bool result = STD_false;
    2272:	1f 86       	std	Y+15, r1	; 0x0f
	u8 u8Switch3;
	DIO_enuGetPinValue(2,&u8Switch3);
    2274:	9e 01       	movw	r18, r28
    2276:	20 5f       	subi	r18, 0xF0	; 240
    2278:	3f 4f       	sbci	r19, 0xFF	; 255
    227a:	82 e0       	ldi	r24, 0x02	; 2
    227c:	b9 01       	movw	r22, r18
    227e:	0e 94 57 08 	call	0x10ae	; 0x10ae <DIO_enuGetPinValue>
	if(u8Switch3==DIO_LOW){
    2282:	88 89       	ldd	r24, Y+16	; 0x10
    2284:	88 23       	and	r24, r24
    2286:	09 f0       	breq	.+2      	; 0x228a <transition_gurad+0x2c>
    2288:	74 c0       	rjmp	.+232    	; 0x2372 <transition_gurad+0x114>
    228a:	80 e0       	ldi	r24, 0x00	; 0
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	a6 e9       	ldi	r26, 0x96	; 150
    2290:	b3 e4       	ldi	r27, 0x43	; 67
    2292:	8b 87       	std	Y+11, r24	; 0x0b
    2294:	9c 87       	std	Y+12, r25	; 0x0c
    2296:	ad 87       	std	Y+13, r26	; 0x0d
    2298:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    229a:	6b 85       	ldd	r22, Y+11	; 0x0b
    229c:	7c 85       	ldd	r23, Y+12	; 0x0c
    229e:	8d 85       	ldd	r24, Y+13	; 0x0d
    22a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    22a2:	20 e0       	ldi	r18, 0x00	; 0
    22a4:	30 e0       	ldi	r19, 0x00	; 0
    22a6:	4a ef       	ldi	r20, 0xFA	; 250
    22a8:	54 e4       	ldi	r21, 0x44	; 68
    22aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ae:	dc 01       	movw	r26, r24
    22b0:	cb 01       	movw	r24, r22
    22b2:	8f 83       	std	Y+7, r24	; 0x07
    22b4:	98 87       	std	Y+8, r25	; 0x08
    22b6:	a9 87       	std	Y+9, r26	; 0x09
    22b8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22ba:	6f 81       	ldd	r22, Y+7	; 0x07
    22bc:	78 85       	ldd	r23, Y+8	; 0x08
    22be:	89 85       	ldd	r24, Y+9	; 0x09
    22c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    22c2:	20 e0       	ldi	r18, 0x00	; 0
    22c4:	30 e0       	ldi	r19, 0x00	; 0
    22c6:	40 e8       	ldi	r20, 0x80	; 128
    22c8:	5f e3       	ldi	r21, 0x3F	; 63
    22ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22ce:	88 23       	and	r24, r24
    22d0:	2c f4       	brge	.+10     	; 0x22dc <transition_gurad+0x7e>
		__ticks = 1;
    22d2:	81 e0       	ldi	r24, 0x01	; 1
    22d4:	90 e0       	ldi	r25, 0x00	; 0
    22d6:	9e 83       	std	Y+6, r25	; 0x06
    22d8:	8d 83       	std	Y+5, r24	; 0x05
    22da:	3f c0       	rjmp	.+126    	; 0x235a <transition_gurad+0xfc>
	else if (__tmp > 65535)
    22dc:	6f 81       	ldd	r22, Y+7	; 0x07
    22de:	78 85       	ldd	r23, Y+8	; 0x08
    22e0:	89 85       	ldd	r24, Y+9	; 0x09
    22e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    22e4:	20 e0       	ldi	r18, 0x00	; 0
    22e6:	3f ef       	ldi	r19, 0xFF	; 255
    22e8:	4f e7       	ldi	r20, 0x7F	; 127
    22ea:	57 e4       	ldi	r21, 0x47	; 71
    22ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22f0:	18 16       	cp	r1, r24
    22f2:	4c f5       	brge	.+82     	; 0x2346 <transition_gurad+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    22f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    22f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    22fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    22fc:	20 e0       	ldi	r18, 0x00	; 0
    22fe:	30 e0       	ldi	r19, 0x00	; 0
    2300:	40 e2       	ldi	r20, 0x20	; 32
    2302:	51 e4       	ldi	r21, 0x41	; 65
    2304:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2308:	dc 01       	movw	r26, r24
    230a:	cb 01       	movw	r24, r22
    230c:	bc 01       	movw	r22, r24
    230e:	cd 01       	movw	r24, r26
    2310:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2314:	dc 01       	movw	r26, r24
    2316:	cb 01       	movw	r24, r22
    2318:	9e 83       	std	Y+6, r25	; 0x06
    231a:	8d 83       	std	Y+5, r24	; 0x05
    231c:	0f c0       	rjmp	.+30     	; 0x233c <transition_gurad+0xde>
    231e:	88 ec       	ldi	r24, 0xC8	; 200
    2320:	90 e0       	ldi	r25, 0x00	; 0
    2322:	9c 83       	std	Y+4, r25	; 0x04
    2324:	8b 83       	std	Y+3, r24	; 0x03
    2326:	8b 81       	ldd	r24, Y+3	; 0x03
    2328:	9c 81       	ldd	r25, Y+4	; 0x04
    232a:	01 97       	sbiw	r24, 0x01	; 1
    232c:	f1 f7       	brne	.-4      	; 0x232a <transition_gurad+0xcc>
    232e:	9c 83       	std	Y+4, r25	; 0x04
    2330:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2332:	8d 81       	ldd	r24, Y+5	; 0x05
    2334:	9e 81       	ldd	r25, Y+6	; 0x06
    2336:	01 97       	sbiw	r24, 0x01	; 1
    2338:	9e 83       	std	Y+6, r25	; 0x06
    233a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    233c:	8d 81       	ldd	r24, Y+5	; 0x05
    233e:	9e 81       	ldd	r25, Y+6	; 0x06
    2340:	00 97       	sbiw	r24, 0x00	; 0
    2342:	69 f7       	brne	.-38     	; 0x231e <transition_gurad+0xc0>
    2344:	14 c0       	rjmp	.+40     	; 0x236e <transition_gurad+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2346:	6f 81       	ldd	r22, Y+7	; 0x07
    2348:	78 85       	ldd	r23, Y+8	; 0x08
    234a:	89 85       	ldd	r24, Y+9	; 0x09
    234c:	9a 85       	ldd	r25, Y+10	; 0x0a
    234e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2352:	dc 01       	movw	r26, r24
    2354:	cb 01       	movw	r24, r22
    2356:	9e 83       	std	Y+6, r25	; 0x06
    2358:	8d 83       	std	Y+5, r24	; 0x05
    235a:	8d 81       	ldd	r24, Y+5	; 0x05
    235c:	9e 81       	ldd	r25, Y+6	; 0x06
    235e:	9a 83       	std	Y+2, r25	; 0x02
    2360:	89 83       	std	Y+1, r24	; 0x01
    2362:	89 81       	ldd	r24, Y+1	; 0x01
    2364:	9a 81       	ldd	r25, Y+2	; 0x02
    2366:	01 97       	sbiw	r24, 0x01	; 1
    2368:	f1 f7       	brne	.-4      	; 0x2366 <transition_gurad+0x108>
    236a:	9a 83       	std	Y+2, r25	; 0x02
    236c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(300);
		result= STD_true;
    236e:	81 e0       	ldi	r24, 0x01	; 1
    2370:	8f 87       	std	Y+15, r24	; 0x0f
	}
	return result;
    2372:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    2374:	60 96       	adiw	r28, 0x10	; 16
    2376:	0f b6       	in	r0, 0x3f	; 63
    2378:	f8 94       	cli
    237a:	de bf       	out	0x3e, r29	; 62
    237c:	0f be       	out	0x3f, r0	; 63
    237e:	cd bf       	out	0x3d, r28	; 61
    2380:	cf 91       	pop	r28
    2382:	df 91       	pop	r29
    2384:	08 95       	ret

00002386 <first_OnEntry>:
				.pfnGaurd = transition_gurad,
				.TransitionExit = 0x55AA
		},
};

void first_OnEntry(void){
    2386:	df 93       	push	r29
    2388:	cf 93       	push	r28
    238a:	cd b7       	in	r28, 0x3d	; 61
    238c:	de b7       	in	r29, 0x3e	; 62

	data.num1=0;
    238e:	10 92 f0 00 	sts	0x00F0, r1

	write_command(0b00000001);
    2392:	81 e0       	ldi	r24, 0x01	; 1
    2394:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <write_command>
	write_data(u8numAsci[data.num1]);
    2398:	80 91 f0 00 	lds	r24, 0x00F0
    239c:	88 2f       	mov	r24, r24
    239e:	90 e0       	ldi	r25, 0x00	; 0
    23a0:	fc 01       	movw	r30, r24
    23a2:	eb 51       	subi	r30, 0x1B	; 27
    23a4:	ff 4f       	sbci	r31, 0xFF	; 255
    23a6:	80 81       	ld	r24, Z
    23a8:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <write_data>


}
    23ac:	cf 91       	pop	r28
    23ae:	df 91       	pop	r29
    23b0:	08 95       	ret

000023b2 <first_doAction>:

void first_doAction(void){
    23b2:	df 93       	push	r29
    23b4:	cf 93       	push	r28
    23b6:	cd b7       	in	r28, 0x3d	; 61
    23b8:	de b7       	in	r29, 0x3e	; 62
    23ba:	6d 97       	sbiw	r28, 0x1d	; 29
    23bc:	0f b6       	in	r0, 0x3f	; 63
    23be:	f8 94       	cli
    23c0:	de bf       	out	0x3e, r29	; 62
    23c2:	0f be       	out	0x3f, r0	; 63
    23c4:	cd bf       	out	0x3d, r28	; 61

	u8 u8num1=data.num1;
    23c6:	80 91 f0 00 	lds	r24, 0x00F0
    23ca:	8d 8f       	std	Y+29, r24	; 0x1d
	incrementDecrement(&u8num1);
    23cc:	ce 01       	movw	r24, r28
    23ce:	4d 96       	adiw	r24, 0x1d	; 29
    23d0:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <incrementDecrement>
	data.num1=u8num1;
    23d4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23d6:	80 93 f0 00 	sts	0x00F0, r24
	write_command(0b00000001);
    23da:	81 e0       	ldi	r24, 0x01	; 1
    23dc:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <write_command>
    23e0:	80 e0       	ldi	r24, 0x00	; 0
    23e2:	90 e0       	ldi	r25, 0x00	; 0
    23e4:	a8 e4       	ldi	r26, 0x48	; 72
    23e6:	b2 e4       	ldi	r27, 0x42	; 66
    23e8:	89 8f       	std	Y+25, r24	; 0x19
    23ea:	9a 8f       	std	Y+26, r25	; 0x1a
    23ec:	ab 8f       	std	Y+27, r26	; 0x1b
    23ee:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23f0:	69 8d       	ldd	r22, Y+25	; 0x19
    23f2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23f8:	20 e0       	ldi	r18, 0x00	; 0
    23fa:	30 e0       	ldi	r19, 0x00	; 0
    23fc:	4a ef       	ldi	r20, 0xFA	; 250
    23fe:	54 e4       	ldi	r21, 0x44	; 68
    2400:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2404:	dc 01       	movw	r26, r24
    2406:	cb 01       	movw	r24, r22
    2408:	8d 8b       	std	Y+21, r24	; 0x15
    240a:	9e 8b       	std	Y+22, r25	; 0x16
    240c:	af 8b       	std	Y+23, r26	; 0x17
    240e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2410:	6d 89       	ldd	r22, Y+21	; 0x15
    2412:	7e 89       	ldd	r23, Y+22	; 0x16
    2414:	8f 89       	ldd	r24, Y+23	; 0x17
    2416:	98 8d       	ldd	r25, Y+24	; 0x18
    2418:	20 e0       	ldi	r18, 0x00	; 0
    241a:	30 e0       	ldi	r19, 0x00	; 0
    241c:	40 e8       	ldi	r20, 0x80	; 128
    241e:	5f e3       	ldi	r21, 0x3F	; 63
    2420:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2424:	88 23       	and	r24, r24
    2426:	2c f4       	brge	.+10     	; 0x2432 <first_doAction+0x80>
		__ticks = 1;
    2428:	81 e0       	ldi	r24, 0x01	; 1
    242a:	90 e0       	ldi	r25, 0x00	; 0
    242c:	9c 8b       	std	Y+20, r25	; 0x14
    242e:	8b 8b       	std	Y+19, r24	; 0x13
    2430:	3f c0       	rjmp	.+126    	; 0x24b0 <first_doAction+0xfe>
	else if (__tmp > 65535)
    2432:	6d 89       	ldd	r22, Y+21	; 0x15
    2434:	7e 89       	ldd	r23, Y+22	; 0x16
    2436:	8f 89       	ldd	r24, Y+23	; 0x17
    2438:	98 8d       	ldd	r25, Y+24	; 0x18
    243a:	20 e0       	ldi	r18, 0x00	; 0
    243c:	3f ef       	ldi	r19, 0xFF	; 255
    243e:	4f e7       	ldi	r20, 0x7F	; 127
    2440:	57 e4       	ldi	r21, 0x47	; 71
    2442:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2446:	18 16       	cp	r1, r24
    2448:	4c f5       	brge	.+82     	; 0x249c <first_doAction+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    244a:	69 8d       	ldd	r22, Y+25	; 0x19
    244c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    244e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2450:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2452:	20 e0       	ldi	r18, 0x00	; 0
    2454:	30 e0       	ldi	r19, 0x00	; 0
    2456:	40 e2       	ldi	r20, 0x20	; 32
    2458:	51 e4       	ldi	r21, 0x41	; 65
    245a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    245e:	dc 01       	movw	r26, r24
    2460:	cb 01       	movw	r24, r22
    2462:	bc 01       	movw	r22, r24
    2464:	cd 01       	movw	r24, r26
    2466:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    246a:	dc 01       	movw	r26, r24
    246c:	cb 01       	movw	r24, r22
    246e:	9c 8b       	std	Y+20, r25	; 0x14
    2470:	8b 8b       	std	Y+19, r24	; 0x13
    2472:	0f c0       	rjmp	.+30     	; 0x2492 <first_doAction+0xe0>
    2474:	88 ec       	ldi	r24, 0xC8	; 200
    2476:	90 e0       	ldi	r25, 0x00	; 0
    2478:	9a 8b       	std	Y+18, r25	; 0x12
    247a:	89 8b       	std	Y+17, r24	; 0x11
    247c:	89 89       	ldd	r24, Y+17	; 0x11
    247e:	9a 89       	ldd	r25, Y+18	; 0x12
    2480:	01 97       	sbiw	r24, 0x01	; 1
    2482:	f1 f7       	brne	.-4      	; 0x2480 <first_doAction+0xce>
    2484:	9a 8b       	std	Y+18, r25	; 0x12
    2486:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2488:	8b 89       	ldd	r24, Y+19	; 0x13
    248a:	9c 89       	ldd	r25, Y+20	; 0x14
    248c:	01 97       	sbiw	r24, 0x01	; 1
    248e:	9c 8b       	std	Y+20, r25	; 0x14
    2490:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2492:	8b 89       	ldd	r24, Y+19	; 0x13
    2494:	9c 89       	ldd	r25, Y+20	; 0x14
    2496:	00 97       	sbiw	r24, 0x00	; 0
    2498:	69 f7       	brne	.-38     	; 0x2474 <first_doAction+0xc2>
    249a:	14 c0       	rjmp	.+40     	; 0x24c4 <first_doAction+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    249c:	6d 89       	ldd	r22, Y+21	; 0x15
    249e:	7e 89       	ldd	r23, Y+22	; 0x16
    24a0:	8f 89       	ldd	r24, Y+23	; 0x17
    24a2:	98 8d       	ldd	r25, Y+24	; 0x18
    24a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24a8:	dc 01       	movw	r26, r24
    24aa:	cb 01       	movw	r24, r22
    24ac:	9c 8b       	std	Y+20, r25	; 0x14
    24ae:	8b 8b       	std	Y+19, r24	; 0x13
    24b0:	8b 89       	ldd	r24, Y+19	; 0x13
    24b2:	9c 89       	ldd	r25, Y+20	; 0x14
    24b4:	98 8b       	std	Y+16, r25	; 0x10
    24b6:	8f 87       	std	Y+15, r24	; 0x0f
    24b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    24ba:	98 89       	ldd	r25, Y+16	; 0x10
    24bc:	01 97       	sbiw	r24, 0x01	; 1
    24be:	f1 f7       	brne	.-4      	; 0x24bc <first_doAction+0x10a>
    24c0:	98 8b       	std	Y+16, r25	; 0x10
    24c2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(50);
	write_data(u8numAsci[data.num1]);
    24c4:	80 91 f0 00 	lds	r24, 0x00F0
    24c8:	88 2f       	mov	r24, r24
    24ca:	90 e0       	ldi	r25, 0x00	; 0
    24cc:	fc 01       	movw	r30, r24
    24ce:	eb 51       	subi	r30, 0x1B	; 27
    24d0:	ff 4f       	sbci	r31, 0xFF	; 255
    24d2:	80 81       	ld	r24, Z
    24d4:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <write_data>
    24d8:	80 e0       	ldi	r24, 0x00	; 0
    24da:	90 e0       	ldi	r25, 0x00	; 0
    24dc:	a8 e4       	ldi	r26, 0x48	; 72
    24de:	b2 e4       	ldi	r27, 0x42	; 66
    24e0:	8b 87       	std	Y+11, r24	; 0x0b
    24e2:	9c 87       	std	Y+12, r25	; 0x0c
    24e4:	ad 87       	std	Y+13, r26	; 0x0d
    24e6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    24ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    24ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    24ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    24f0:	20 e0       	ldi	r18, 0x00	; 0
    24f2:	30 e0       	ldi	r19, 0x00	; 0
    24f4:	4a ef       	ldi	r20, 0xFA	; 250
    24f6:	54 e4       	ldi	r21, 0x44	; 68
    24f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24fc:	dc 01       	movw	r26, r24
    24fe:	cb 01       	movw	r24, r22
    2500:	8f 83       	std	Y+7, r24	; 0x07
    2502:	98 87       	std	Y+8, r25	; 0x08
    2504:	a9 87       	std	Y+9, r26	; 0x09
    2506:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2508:	6f 81       	ldd	r22, Y+7	; 0x07
    250a:	78 85       	ldd	r23, Y+8	; 0x08
    250c:	89 85       	ldd	r24, Y+9	; 0x09
    250e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2510:	20 e0       	ldi	r18, 0x00	; 0
    2512:	30 e0       	ldi	r19, 0x00	; 0
    2514:	40 e8       	ldi	r20, 0x80	; 128
    2516:	5f e3       	ldi	r21, 0x3F	; 63
    2518:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    251c:	88 23       	and	r24, r24
    251e:	2c f4       	brge	.+10     	; 0x252a <first_doAction+0x178>
		__ticks = 1;
    2520:	81 e0       	ldi	r24, 0x01	; 1
    2522:	90 e0       	ldi	r25, 0x00	; 0
    2524:	9e 83       	std	Y+6, r25	; 0x06
    2526:	8d 83       	std	Y+5, r24	; 0x05
    2528:	3f c0       	rjmp	.+126    	; 0x25a8 <first_doAction+0x1f6>
	else if (__tmp > 65535)
    252a:	6f 81       	ldd	r22, Y+7	; 0x07
    252c:	78 85       	ldd	r23, Y+8	; 0x08
    252e:	89 85       	ldd	r24, Y+9	; 0x09
    2530:	9a 85       	ldd	r25, Y+10	; 0x0a
    2532:	20 e0       	ldi	r18, 0x00	; 0
    2534:	3f ef       	ldi	r19, 0xFF	; 255
    2536:	4f e7       	ldi	r20, 0x7F	; 127
    2538:	57 e4       	ldi	r21, 0x47	; 71
    253a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    253e:	18 16       	cp	r1, r24
    2540:	4c f5       	brge	.+82     	; 0x2594 <first_doAction+0x1e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2542:	6b 85       	ldd	r22, Y+11	; 0x0b
    2544:	7c 85       	ldd	r23, Y+12	; 0x0c
    2546:	8d 85       	ldd	r24, Y+13	; 0x0d
    2548:	9e 85       	ldd	r25, Y+14	; 0x0e
    254a:	20 e0       	ldi	r18, 0x00	; 0
    254c:	30 e0       	ldi	r19, 0x00	; 0
    254e:	40 e2       	ldi	r20, 0x20	; 32
    2550:	51 e4       	ldi	r21, 0x41	; 65
    2552:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2556:	dc 01       	movw	r26, r24
    2558:	cb 01       	movw	r24, r22
    255a:	bc 01       	movw	r22, r24
    255c:	cd 01       	movw	r24, r26
    255e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2562:	dc 01       	movw	r26, r24
    2564:	cb 01       	movw	r24, r22
    2566:	9e 83       	std	Y+6, r25	; 0x06
    2568:	8d 83       	std	Y+5, r24	; 0x05
    256a:	0f c0       	rjmp	.+30     	; 0x258a <first_doAction+0x1d8>
    256c:	88 ec       	ldi	r24, 0xC8	; 200
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	9c 83       	std	Y+4, r25	; 0x04
    2572:	8b 83       	std	Y+3, r24	; 0x03
    2574:	8b 81       	ldd	r24, Y+3	; 0x03
    2576:	9c 81       	ldd	r25, Y+4	; 0x04
    2578:	01 97       	sbiw	r24, 0x01	; 1
    257a:	f1 f7       	brne	.-4      	; 0x2578 <first_doAction+0x1c6>
    257c:	9c 83       	std	Y+4, r25	; 0x04
    257e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2580:	8d 81       	ldd	r24, Y+5	; 0x05
    2582:	9e 81       	ldd	r25, Y+6	; 0x06
    2584:	01 97       	sbiw	r24, 0x01	; 1
    2586:	9e 83       	std	Y+6, r25	; 0x06
    2588:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    258a:	8d 81       	ldd	r24, Y+5	; 0x05
    258c:	9e 81       	ldd	r25, Y+6	; 0x06
    258e:	00 97       	sbiw	r24, 0x00	; 0
    2590:	69 f7       	brne	.-38     	; 0x256c <first_doAction+0x1ba>
    2592:	14 c0       	rjmp	.+40     	; 0x25bc <first_doAction+0x20a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2594:	6f 81       	ldd	r22, Y+7	; 0x07
    2596:	78 85       	ldd	r23, Y+8	; 0x08
    2598:	89 85       	ldd	r24, Y+9	; 0x09
    259a:	9a 85       	ldd	r25, Y+10	; 0x0a
    259c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25a0:	dc 01       	movw	r26, r24
    25a2:	cb 01       	movw	r24, r22
    25a4:	9e 83       	std	Y+6, r25	; 0x06
    25a6:	8d 83       	std	Y+5, r24	; 0x05
    25a8:	8d 81       	ldd	r24, Y+5	; 0x05
    25aa:	9e 81       	ldd	r25, Y+6	; 0x06
    25ac:	9a 83       	std	Y+2, r25	; 0x02
    25ae:	89 83       	std	Y+1, r24	; 0x01
    25b0:	89 81       	ldd	r24, Y+1	; 0x01
    25b2:	9a 81       	ldd	r25, Y+2	; 0x02
    25b4:	01 97       	sbiw	r24, 0x01	; 1
    25b6:	f1 f7       	brne	.-4      	; 0x25b4 <first_doAction+0x202>
    25b8:	9a 83       	std	Y+2, r25	; 0x02
    25ba:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);
}
    25bc:	6d 96       	adiw	r28, 0x1d	; 29
    25be:	0f b6       	in	r0, 0x3f	; 63
    25c0:	f8 94       	cli
    25c2:	de bf       	out	0x3e, r29	; 62
    25c4:	0f be       	out	0x3f, r0	; 63
    25c6:	cd bf       	out	0x3d, r28	; 61
    25c8:	cf 91       	pop	r28
    25ca:	df 91       	pop	r29
    25cc:	08 95       	ret

000025ce <first_OnExit>:

void first_OnExit(){
    25ce:	df 93       	push	r29
    25d0:	cf 93       	push	r28
    25d2:	cd b7       	in	r28, 0x3d	; 61
    25d4:	de b7       	in	r29, 0x3e	; 62


}
    25d6:	cf 91       	pop	r28
    25d8:	df 91       	pop	r29
    25da:	08 95       	ret

000025dc <oper_OnEntry>:



void oper_OnEntry(void){
    25dc:	df 93       	push	r29
    25de:	cf 93       	push	r28
    25e0:	cd b7       	in	r28, 0x3d	; 61
    25e2:	de b7       	in	r29, 0x3e	; 62

	data.op= add;
    25e4:	10 92 f1 00 	sts	0x00F1, r1

	write_command(0b00000001);
    25e8:	81 e0       	ldi	r24, 0x01	; 1
    25ea:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <write_command>
	write_data(u8numAsci[data.num1]);
    25ee:	80 91 f0 00 	lds	r24, 0x00F0
    25f2:	88 2f       	mov	r24, r24
    25f4:	90 e0       	ldi	r25, 0x00	; 0
    25f6:	fc 01       	movw	r30, r24
    25f8:	eb 51       	subi	r30, 0x1B	; 27
    25fa:	ff 4f       	sbci	r31, 0xFF	; 255
    25fc:	80 81       	ld	r24, Z
    25fe:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <write_data>
	write_data('+');
    2602:	8b e2       	ldi	r24, 0x2B	; 43
    2604:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <write_data>



}
    2608:	cf 91       	pop	r28
    260a:	df 91       	pop	r29
    260c:	08 95       	ret

0000260e <oper_doAction>:

void oper_doAction(void){
    260e:	df 93       	push	r29
    2610:	cf 93       	push	r28
    2612:	cd b7       	in	r28, 0x3d	; 61
    2614:	de b7       	in	r29, 0x3e	; 62
    2616:	60 97       	sbiw	r28, 0x10	; 16
    2618:	0f b6       	in	r0, 0x3f	; 63
    261a:	f8 94       	cli
    261c:	de bf       	out	0x3e, r29	; 62
    261e:	0f be       	out	0x3f, r0	; 63
    2620:	cd bf       	out	0x3d, r28	; 61

	//u8 u8num1=0;
	operation op=data.op;
    2622:	80 91 f1 00 	lds	r24, 0x00F1
    2626:	88 8b       	std	Y+16, r24	; 0x10
	choseOperation(&op);
    2628:	ce 01       	movw	r24, r28
    262a:	40 96       	adiw	r24, 0x10	; 16
    262c:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <choseOperation>
	data.op=op;
    2630:	88 89       	ldd	r24, Y+16	; 0x10
    2632:	80 93 f1 00 	sts	0x00F1, r24

	write_command(0b00000001);
    2636:	81 e0       	ldi	r24, 0x01	; 1
    2638:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <write_command>
	//_delay_ms(100);
	write_data(u8numAsci[data.num1]);
    263c:	80 91 f0 00 	lds	r24, 0x00F0
    2640:	88 2f       	mov	r24, r24
    2642:	90 e0       	ldi	r25, 0x00	; 0
    2644:	fc 01       	movw	r30, r24
    2646:	eb 51       	subi	r30, 0x1B	; 27
    2648:	ff 4f       	sbci	r31, 0xFF	; 255
    264a:	80 81       	ld	r24, Z
    264c:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <write_data>

	s8 c=opToChar(data.op);
    2650:	80 91 f1 00 	lds	r24, 0x00F1
    2654:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <opToChar>
    2658:	8f 87       	std	Y+15, r24	; 0x0f

	write_data(c);
    265a:	8f 85       	ldd	r24, Y+15	; 0x0f
    265c:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <write_data>
    2660:	80 e0       	ldi	r24, 0x00	; 0
    2662:	90 e0       	ldi	r25, 0x00	; 0
    2664:	a8 e4       	ldi	r26, 0x48	; 72
    2666:	b2 e4       	ldi	r27, 0x42	; 66
    2668:	8b 87       	std	Y+11, r24	; 0x0b
    266a:	9c 87       	std	Y+12, r25	; 0x0c
    266c:	ad 87       	std	Y+13, r26	; 0x0d
    266e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2670:	6b 85       	ldd	r22, Y+11	; 0x0b
    2672:	7c 85       	ldd	r23, Y+12	; 0x0c
    2674:	8d 85       	ldd	r24, Y+13	; 0x0d
    2676:	9e 85       	ldd	r25, Y+14	; 0x0e
    2678:	20 e0       	ldi	r18, 0x00	; 0
    267a:	30 e0       	ldi	r19, 0x00	; 0
    267c:	4a ef       	ldi	r20, 0xFA	; 250
    267e:	54 e4       	ldi	r21, 0x44	; 68
    2680:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2684:	dc 01       	movw	r26, r24
    2686:	cb 01       	movw	r24, r22
    2688:	8f 83       	std	Y+7, r24	; 0x07
    268a:	98 87       	std	Y+8, r25	; 0x08
    268c:	a9 87       	std	Y+9, r26	; 0x09
    268e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2690:	6f 81       	ldd	r22, Y+7	; 0x07
    2692:	78 85       	ldd	r23, Y+8	; 0x08
    2694:	89 85       	ldd	r24, Y+9	; 0x09
    2696:	9a 85       	ldd	r25, Y+10	; 0x0a
    2698:	20 e0       	ldi	r18, 0x00	; 0
    269a:	30 e0       	ldi	r19, 0x00	; 0
    269c:	40 e8       	ldi	r20, 0x80	; 128
    269e:	5f e3       	ldi	r21, 0x3F	; 63
    26a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26a4:	88 23       	and	r24, r24
    26a6:	2c f4       	brge	.+10     	; 0x26b2 <oper_doAction+0xa4>
		__ticks = 1;
    26a8:	81 e0       	ldi	r24, 0x01	; 1
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	9e 83       	std	Y+6, r25	; 0x06
    26ae:	8d 83       	std	Y+5, r24	; 0x05
    26b0:	3f c0       	rjmp	.+126    	; 0x2730 <oper_doAction+0x122>
	else if (__tmp > 65535)
    26b2:	6f 81       	ldd	r22, Y+7	; 0x07
    26b4:	78 85       	ldd	r23, Y+8	; 0x08
    26b6:	89 85       	ldd	r24, Y+9	; 0x09
    26b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    26ba:	20 e0       	ldi	r18, 0x00	; 0
    26bc:	3f ef       	ldi	r19, 0xFF	; 255
    26be:	4f e7       	ldi	r20, 0x7F	; 127
    26c0:	57 e4       	ldi	r21, 0x47	; 71
    26c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26c6:	18 16       	cp	r1, r24
    26c8:	4c f5       	brge	.+82     	; 0x271c <oper_doAction+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    26cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    26ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    26d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    26d2:	20 e0       	ldi	r18, 0x00	; 0
    26d4:	30 e0       	ldi	r19, 0x00	; 0
    26d6:	40 e2       	ldi	r20, 0x20	; 32
    26d8:	51 e4       	ldi	r21, 0x41	; 65
    26da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26de:	dc 01       	movw	r26, r24
    26e0:	cb 01       	movw	r24, r22
    26e2:	bc 01       	movw	r22, r24
    26e4:	cd 01       	movw	r24, r26
    26e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ea:	dc 01       	movw	r26, r24
    26ec:	cb 01       	movw	r24, r22
    26ee:	9e 83       	std	Y+6, r25	; 0x06
    26f0:	8d 83       	std	Y+5, r24	; 0x05
    26f2:	0f c0       	rjmp	.+30     	; 0x2712 <oper_doAction+0x104>
    26f4:	88 ec       	ldi	r24, 0xC8	; 200
    26f6:	90 e0       	ldi	r25, 0x00	; 0
    26f8:	9c 83       	std	Y+4, r25	; 0x04
    26fa:	8b 83       	std	Y+3, r24	; 0x03
    26fc:	8b 81       	ldd	r24, Y+3	; 0x03
    26fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2700:	01 97       	sbiw	r24, 0x01	; 1
    2702:	f1 f7       	brne	.-4      	; 0x2700 <oper_doAction+0xf2>
    2704:	9c 83       	std	Y+4, r25	; 0x04
    2706:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2708:	8d 81       	ldd	r24, Y+5	; 0x05
    270a:	9e 81       	ldd	r25, Y+6	; 0x06
    270c:	01 97       	sbiw	r24, 0x01	; 1
    270e:	9e 83       	std	Y+6, r25	; 0x06
    2710:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2712:	8d 81       	ldd	r24, Y+5	; 0x05
    2714:	9e 81       	ldd	r25, Y+6	; 0x06
    2716:	00 97       	sbiw	r24, 0x00	; 0
    2718:	69 f7       	brne	.-38     	; 0x26f4 <oper_doAction+0xe6>
    271a:	14 c0       	rjmp	.+40     	; 0x2744 <oper_doAction+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    271c:	6f 81       	ldd	r22, Y+7	; 0x07
    271e:	78 85       	ldd	r23, Y+8	; 0x08
    2720:	89 85       	ldd	r24, Y+9	; 0x09
    2722:	9a 85       	ldd	r25, Y+10	; 0x0a
    2724:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2728:	dc 01       	movw	r26, r24
    272a:	cb 01       	movw	r24, r22
    272c:	9e 83       	std	Y+6, r25	; 0x06
    272e:	8d 83       	std	Y+5, r24	; 0x05
    2730:	8d 81       	ldd	r24, Y+5	; 0x05
    2732:	9e 81       	ldd	r25, Y+6	; 0x06
    2734:	9a 83       	std	Y+2, r25	; 0x02
    2736:	89 83       	std	Y+1, r24	; 0x01
    2738:	89 81       	ldd	r24, Y+1	; 0x01
    273a:	9a 81       	ldd	r25, Y+2	; 0x02
    273c:	01 97       	sbiw	r24, 0x01	; 1
    273e:	f1 f7       	brne	.-4      	; 0x273c <oper_doAction+0x12e>
    2740:	9a 83       	std	Y+2, r25	; 0x02
    2742:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);
}
    2744:	60 96       	adiw	r28, 0x10	; 16
    2746:	0f b6       	in	r0, 0x3f	; 63
    2748:	f8 94       	cli
    274a:	de bf       	out	0x3e, r29	; 62
    274c:	0f be       	out	0x3f, r0	; 63
    274e:	cd bf       	out	0x3d, r28	; 61
    2750:	cf 91       	pop	r28
    2752:	df 91       	pop	r29
    2754:	08 95       	ret

00002756 <oper_OnExit>:

void oper_OnExit(){
    2756:	df 93       	push	r29
    2758:	cf 93       	push	r28
    275a:	cd b7       	in	r28, 0x3d	; 61
    275c:	de b7       	in	r29, 0x3e	; 62


}
    275e:	cf 91       	pop	r28
    2760:	df 91       	pop	r29
    2762:	08 95       	ret

00002764 <second_OnEntry>:


void second_OnEntry(void){
    2764:	df 93       	push	r29
    2766:	cf 93       	push	r28
    2768:	0f 92       	push	r0
    276a:	cd b7       	in	r28, 0x3d	; 61
    276c:	de b7       	in	r29, 0x3e	; 62

	data.num2=0;
    276e:	10 92 f2 00 	sts	0x00F2, r1

	write_command(0b00000001);
    2772:	81 e0       	ldi	r24, 0x01	; 1
    2774:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <write_command>

	write_data(u8numAsci[data.num1]);
    2778:	80 91 f0 00 	lds	r24, 0x00F0
    277c:	88 2f       	mov	r24, r24
    277e:	90 e0       	ldi	r25, 0x00	; 0
    2780:	fc 01       	movw	r30, r24
    2782:	eb 51       	subi	r30, 0x1B	; 27
    2784:	ff 4f       	sbci	r31, 0xFF	; 255
    2786:	80 81       	ld	r24, Z
    2788:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <write_data>

	s8 c=opToChar(data.op);
    278c:	80 91 f1 00 	lds	r24, 0x00F1
    2790:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <opToChar>
    2794:	89 83       	std	Y+1, r24	; 0x01

	write_data(c);
    2796:	89 81       	ldd	r24, Y+1	; 0x01
    2798:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <write_data>
	write_data(u8numAsci[data.num2]);
    279c:	80 91 f2 00 	lds	r24, 0x00F2
    27a0:	88 2f       	mov	r24, r24
    27a2:	90 e0       	ldi	r25, 0x00	; 0
    27a4:	fc 01       	movw	r30, r24
    27a6:	eb 51       	subi	r30, 0x1B	; 27
    27a8:	ff 4f       	sbci	r31, 0xFF	; 255
    27aa:	80 81       	ld	r24, Z
    27ac:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <write_data>


}
    27b0:	0f 90       	pop	r0
    27b2:	cf 91       	pop	r28
    27b4:	df 91       	pop	r29
    27b6:	08 95       	ret

000027b8 <second_doAction>:

void second_doAction(void){
    27b8:	df 93       	push	r29
    27ba:	cf 93       	push	r28
    27bc:	cd b7       	in	r28, 0x3d	; 61
    27be:	de b7       	in	r29, 0x3e	; 62
    27c0:	60 97       	sbiw	r28, 0x10	; 16
    27c2:	0f b6       	in	r0, 0x3f	; 63
    27c4:	f8 94       	cli
    27c6:	de bf       	out	0x3e, r29	; 62
    27c8:	0f be       	out	0x3f, r0	; 63
    27ca:	cd bf       	out	0x3d, r28	; 61

	u8 u8num2=data.num2;
    27cc:	80 91 f2 00 	lds	r24, 0x00F2
    27d0:	88 8b       	std	Y+16, r24	; 0x10
	incrementDecrement(&u8num2);
    27d2:	ce 01       	movw	r24, r28
    27d4:	40 96       	adiw	r24, 0x10	; 16
    27d6:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <incrementDecrement>
	data.num2=u8num2;
    27da:	88 89       	ldd	r24, Y+16	; 0x10
    27dc:	80 93 f2 00 	sts	0x00F2, r24
	write_command(0b00000001);
    27e0:	81 e0       	ldi	r24, 0x01	; 1
    27e2:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <write_command>
	//_delay_ms(100);
	write_data(u8numAsci[data.num1]);
    27e6:	80 91 f0 00 	lds	r24, 0x00F0
    27ea:	88 2f       	mov	r24, r24
    27ec:	90 e0       	ldi	r25, 0x00	; 0
    27ee:	fc 01       	movw	r30, r24
    27f0:	eb 51       	subi	r30, 0x1B	; 27
    27f2:	ff 4f       	sbci	r31, 0xFF	; 255
    27f4:	80 81       	ld	r24, Z
    27f6:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <write_data>
	s8 c=opToChar(data.op);
    27fa:	80 91 f1 00 	lds	r24, 0x00F1
    27fe:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <opToChar>
    2802:	8f 87       	std	Y+15, r24	; 0x0f

	write_data(c);
    2804:	8f 85       	ldd	r24, Y+15	; 0x0f
    2806:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <write_data>
	write_data(u8numAsci[data.num2]);
    280a:	80 91 f2 00 	lds	r24, 0x00F2
    280e:	88 2f       	mov	r24, r24
    2810:	90 e0       	ldi	r25, 0x00	; 0
    2812:	fc 01       	movw	r30, r24
    2814:	eb 51       	subi	r30, 0x1B	; 27
    2816:	ff 4f       	sbci	r31, 0xFF	; 255
    2818:	80 81       	ld	r24, Z
    281a:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <write_data>
    281e:	80 e0       	ldi	r24, 0x00	; 0
    2820:	90 e0       	ldi	r25, 0x00	; 0
    2822:	a8 e4       	ldi	r26, 0x48	; 72
    2824:	b2 e4       	ldi	r27, 0x42	; 66
    2826:	8b 87       	std	Y+11, r24	; 0x0b
    2828:	9c 87       	std	Y+12, r25	; 0x0c
    282a:	ad 87       	std	Y+13, r26	; 0x0d
    282c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    282e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2830:	7c 85       	ldd	r23, Y+12	; 0x0c
    2832:	8d 85       	ldd	r24, Y+13	; 0x0d
    2834:	9e 85       	ldd	r25, Y+14	; 0x0e
    2836:	20 e0       	ldi	r18, 0x00	; 0
    2838:	30 e0       	ldi	r19, 0x00	; 0
    283a:	4a ef       	ldi	r20, 0xFA	; 250
    283c:	54 e4       	ldi	r21, 0x44	; 68
    283e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2842:	dc 01       	movw	r26, r24
    2844:	cb 01       	movw	r24, r22
    2846:	8f 83       	std	Y+7, r24	; 0x07
    2848:	98 87       	std	Y+8, r25	; 0x08
    284a:	a9 87       	std	Y+9, r26	; 0x09
    284c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    284e:	6f 81       	ldd	r22, Y+7	; 0x07
    2850:	78 85       	ldd	r23, Y+8	; 0x08
    2852:	89 85       	ldd	r24, Y+9	; 0x09
    2854:	9a 85       	ldd	r25, Y+10	; 0x0a
    2856:	20 e0       	ldi	r18, 0x00	; 0
    2858:	30 e0       	ldi	r19, 0x00	; 0
    285a:	40 e8       	ldi	r20, 0x80	; 128
    285c:	5f e3       	ldi	r21, 0x3F	; 63
    285e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2862:	88 23       	and	r24, r24
    2864:	2c f4       	brge	.+10     	; 0x2870 <second_doAction+0xb8>
		__ticks = 1;
    2866:	81 e0       	ldi	r24, 0x01	; 1
    2868:	90 e0       	ldi	r25, 0x00	; 0
    286a:	9e 83       	std	Y+6, r25	; 0x06
    286c:	8d 83       	std	Y+5, r24	; 0x05
    286e:	3f c0       	rjmp	.+126    	; 0x28ee <second_doAction+0x136>
	else if (__tmp > 65535)
    2870:	6f 81       	ldd	r22, Y+7	; 0x07
    2872:	78 85       	ldd	r23, Y+8	; 0x08
    2874:	89 85       	ldd	r24, Y+9	; 0x09
    2876:	9a 85       	ldd	r25, Y+10	; 0x0a
    2878:	20 e0       	ldi	r18, 0x00	; 0
    287a:	3f ef       	ldi	r19, 0xFF	; 255
    287c:	4f e7       	ldi	r20, 0x7F	; 127
    287e:	57 e4       	ldi	r21, 0x47	; 71
    2880:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2884:	18 16       	cp	r1, r24
    2886:	4c f5       	brge	.+82     	; 0x28da <second_doAction+0x122>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2888:	6b 85       	ldd	r22, Y+11	; 0x0b
    288a:	7c 85       	ldd	r23, Y+12	; 0x0c
    288c:	8d 85       	ldd	r24, Y+13	; 0x0d
    288e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2890:	20 e0       	ldi	r18, 0x00	; 0
    2892:	30 e0       	ldi	r19, 0x00	; 0
    2894:	40 e2       	ldi	r20, 0x20	; 32
    2896:	51 e4       	ldi	r21, 0x41	; 65
    2898:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    289c:	dc 01       	movw	r26, r24
    289e:	cb 01       	movw	r24, r22
    28a0:	bc 01       	movw	r22, r24
    28a2:	cd 01       	movw	r24, r26
    28a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28a8:	dc 01       	movw	r26, r24
    28aa:	cb 01       	movw	r24, r22
    28ac:	9e 83       	std	Y+6, r25	; 0x06
    28ae:	8d 83       	std	Y+5, r24	; 0x05
    28b0:	0f c0       	rjmp	.+30     	; 0x28d0 <second_doAction+0x118>
    28b2:	88 ec       	ldi	r24, 0xC8	; 200
    28b4:	90 e0       	ldi	r25, 0x00	; 0
    28b6:	9c 83       	std	Y+4, r25	; 0x04
    28b8:	8b 83       	std	Y+3, r24	; 0x03
    28ba:	8b 81       	ldd	r24, Y+3	; 0x03
    28bc:	9c 81       	ldd	r25, Y+4	; 0x04
    28be:	01 97       	sbiw	r24, 0x01	; 1
    28c0:	f1 f7       	brne	.-4      	; 0x28be <second_doAction+0x106>
    28c2:	9c 83       	std	Y+4, r25	; 0x04
    28c4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28c6:	8d 81       	ldd	r24, Y+5	; 0x05
    28c8:	9e 81       	ldd	r25, Y+6	; 0x06
    28ca:	01 97       	sbiw	r24, 0x01	; 1
    28cc:	9e 83       	std	Y+6, r25	; 0x06
    28ce:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28d0:	8d 81       	ldd	r24, Y+5	; 0x05
    28d2:	9e 81       	ldd	r25, Y+6	; 0x06
    28d4:	00 97       	sbiw	r24, 0x00	; 0
    28d6:	69 f7       	brne	.-38     	; 0x28b2 <second_doAction+0xfa>
    28d8:	14 c0       	rjmp	.+40     	; 0x2902 <second_doAction+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28da:	6f 81       	ldd	r22, Y+7	; 0x07
    28dc:	78 85       	ldd	r23, Y+8	; 0x08
    28de:	89 85       	ldd	r24, Y+9	; 0x09
    28e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    28e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28e6:	dc 01       	movw	r26, r24
    28e8:	cb 01       	movw	r24, r22
    28ea:	9e 83       	std	Y+6, r25	; 0x06
    28ec:	8d 83       	std	Y+5, r24	; 0x05
    28ee:	8d 81       	ldd	r24, Y+5	; 0x05
    28f0:	9e 81       	ldd	r25, Y+6	; 0x06
    28f2:	9a 83       	std	Y+2, r25	; 0x02
    28f4:	89 83       	std	Y+1, r24	; 0x01
    28f6:	89 81       	ldd	r24, Y+1	; 0x01
    28f8:	9a 81       	ldd	r25, Y+2	; 0x02
    28fa:	01 97       	sbiw	r24, 0x01	; 1
    28fc:	f1 f7       	brne	.-4      	; 0x28fa <second_doAction+0x142>
    28fe:	9a 83       	std	Y+2, r25	; 0x02
    2900:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);
}
    2902:	60 96       	adiw	r28, 0x10	; 16
    2904:	0f b6       	in	r0, 0x3f	; 63
    2906:	f8 94       	cli
    2908:	de bf       	out	0x3e, r29	; 62
    290a:	0f be       	out	0x3f, r0	; 63
    290c:	cd bf       	out	0x3d, r28	; 61
    290e:	cf 91       	pop	r28
    2910:	df 91       	pop	r29
    2912:	08 95       	ret

00002914 <second_OnExit>:

void second_OnExit(){
    2914:	df 93       	push	r29
    2916:	cf 93       	push	r28
    2918:	cd b7       	in	r28, 0x3d	; 61
    291a:	de b7       	in	r29, 0x3e	; 62


}
    291c:	cf 91       	pop	r28
    291e:	df 91       	pop	r29
    2920:	08 95       	ret

00002922 <result_OnEntry>:



void result_OnEntry(void){
    2922:	df 93       	push	r29
    2924:	cf 93       	push	r28
    2926:	cd b7       	in	r28, 0x3d	; 61
    2928:	de b7       	in	r29, 0x3e	; 62
    292a:	2f 97       	sbiw	r28, 0x0f	; 15
    292c:	0f b6       	in	r0, 0x3f	; 63
    292e:	f8 94       	cli
    2930:	de bf       	out	0x3e, r29	; 62
    2932:	0f be       	out	0x3f, r0	; 63
    2934:	cd bf       	out	0x3d, r28	; 61



	write_command(0b00000001);
    2936:	81 e0       	ldi	r24, 0x01	; 1
    2938:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <write_command>

	write_data(u8numAsci[data.num1]);
    293c:	80 91 f0 00 	lds	r24, 0x00F0
    2940:	88 2f       	mov	r24, r24
    2942:	90 e0       	ldi	r25, 0x00	; 0
    2944:	fc 01       	movw	r30, r24
    2946:	eb 51       	subi	r30, 0x1B	; 27
    2948:	ff 4f       	sbci	r31, 0xFF	; 255
    294a:	80 81       	ld	r24, Z
    294c:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <write_data>

	s8 c=opToChar(data.op);
    2950:	80 91 f1 00 	lds	r24, 0x00F1
    2954:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <opToChar>
    2958:	8f 87       	std	Y+15, r24	; 0x0f

	write_data(c);
    295a:	8f 85       	ldd	r24, Y+15	; 0x0f
    295c:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <write_data>
	write_data(u8numAsci[data.num2]);
    2960:	80 91 f2 00 	lds	r24, 0x00F2
    2964:	88 2f       	mov	r24, r24
    2966:	90 e0       	ldi	r25, 0x00	; 0
    2968:	fc 01       	movw	r30, r24
    296a:	eb 51       	subi	r30, 0x1B	; 27
    296c:	ff 4f       	sbci	r31, 0xFF	; 255
    296e:	80 81       	ld	r24, Z
    2970:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <write_data>
	write_data('=');
    2974:	8d e3       	ldi	r24, 0x3D	; 61
    2976:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <write_data>
    297a:	80 e0       	ldi	r24, 0x00	; 0
    297c:	90 e0       	ldi	r25, 0x00	; 0
    297e:	a8 e4       	ldi	r26, 0x48	; 72
    2980:	b2 e4       	ldi	r27, 0x42	; 66
    2982:	8b 87       	std	Y+11, r24	; 0x0b
    2984:	9c 87       	std	Y+12, r25	; 0x0c
    2986:	ad 87       	std	Y+13, r26	; 0x0d
    2988:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    298a:	6b 85       	ldd	r22, Y+11	; 0x0b
    298c:	7c 85       	ldd	r23, Y+12	; 0x0c
    298e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2990:	9e 85       	ldd	r25, Y+14	; 0x0e
    2992:	20 e0       	ldi	r18, 0x00	; 0
    2994:	30 e0       	ldi	r19, 0x00	; 0
    2996:	4a ef       	ldi	r20, 0xFA	; 250
    2998:	54 e4       	ldi	r21, 0x44	; 68
    299a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    299e:	dc 01       	movw	r26, r24
    29a0:	cb 01       	movw	r24, r22
    29a2:	8f 83       	std	Y+7, r24	; 0x07
    29a4:	98 87       	std	Y+8, r25	; 0x08
    29a6:	a9 87       	std	Y+9, r26	; 0x09
    29a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29aa:	6f 81       	ldd	r22, Y+7	; 0x07
    29ac:	78 85       	ldd	r23, Y+8	; 0x08
    29ae:	89 85       	ldd	r24, Y+9	; 0x09
    29b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    29b2:	20 e0       	ldi	r18, 0x00	; 0
    29b4:	30 e0       	ldi	r19, 0x00	; 0
    29b6:	40 e8       	ldi	r20, 0x80	; 128
    29b8:	5f e3       	ldi	r21, 0x3F	; 63
    29ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29be:	88 23       	and	r24, r24
    29c0:	2c f4       	brge	.+10     	; 0x29cc <result_OnEntry+0xaa>
		__ticks = 1;
    29c2:	81 e0       	ldi	r24, 0x01	; 1
    29c4:	90 e0       	ldi	r25, 0x00	; 0
    29c6:	9e 83       	std	Y+6, r25	; 0x06
    29c8:	8d 83       	std	Y+5, r24	; 0x05
    29ca:	3f c0       	rjmp	.+126    	; 0x2a4a <result_OnEntry+0x128>
	else if (__tmp > 65535)
    29cc:	6f 81       	ldd	r22, Y+7	; 0x07
    29ce:	78 85       	ldd	r23, Y+8	; 0x08
    29d0:	89 85       	ldd	r24, Y+9	; 0x09
    29d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    29d4:	20 e0       	ldi	r18, 0x00	; 0
    29d6:	3f ef       	ldi	r19, 0xFF	; 255
    29d8:	4f e7       	ldi	r20, 0x7F	; 127
    29da:	57 e4       	ldi	r21, 0x47	; 71
    29dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29e0:	18 16       	cp	r1, r24
    29e2:	4c f5       	brge	.+82     	; 0x2a36 <result_OnEntry+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    29e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    29e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    29ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    29ec:	20 e0       	ldi	r18, 0x00	; 0
    29ee:	30 e0       	ldi	r19, 0x00	; 0
    29f0:	40 e2       	ldi	r20, 0x20	; 32
    29f2:	51 e4       	ldi	r21, 0x41	; 65
    29f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29f8:	dc 01       	movw	r26, r24
    29fa:	cb 01       	movw	r24, r22
    29fc:	bc 01       	movw	r22, r24
    29fe:	cd 01       	movw	r24, r26
    2a00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a04:	dc 01       	movw	r26, r24
    2a06:	cb 01       	movw	r24, r22
    2a08:	9e 83       	std	Y+6, r25	; 0x06
    2a0a:	8d 83       	std	Y+5, r24	; 0x05
    2a0c:	0f c0       	rjmp	.+30     	; 0x2a2c <result_OnEntry+0x10a>
    2a0e:	88 ec       	ldi	r24, 0xC8	; 200
    2a10:	90 e0       	ldi	r25, 0x00	; 0
    2a12:	9c 83       	std	Y+4, r25	; 0x04
    2a14:	8b 83       	std	Y+3, r24	; 0x03
    2a16:	8b 81       	ldd	r24, Y+3	; 0x03
    2a18:	9c 81       	ldd	r25, Y+4	; 0x04
    2a1a:	01 97       	sbiw	r24, 0x01	; 1
    2a1c:	f1 f7       	brne	.-4      	; 0x2a1a <result_OnEntry+0xf8>
    2a1e:	9c 83       	std	Y+4, r25	; 0x04
    2a20:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a22:	8d 81       	ldd	r24, Y+5	; 0x05
    2a24:	9e 81       	ldd	r25, Y+6	; 0x06
    2a26:	01 97       	sbiw	r24, 0x01	; 1
    2a28:	9e 83       	std	Y+6, r25	; 0x06
    2a2a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a2c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a2e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a30:	00 97       	sbiw	r24, 0x00	; 0
    2a32:	69 f7       	brne	.-38     	; 0x2a0e <result_OnEntry+0xec>
    2a34:	14 c0       	rjmp	.+40     	; 0x2a5e <result_OnEntry+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a36:	6f 81       	ldd	r22, Y+7	; 0x07
    2a38:	78 85       	ldd	r23, Y+8	; 0x08
    2a3a:	89 85       	ldd	r24, Y+9	; 0x09
    2a3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a42:	dc 01       	movw	r26, r24
    2a44:	cb 01       	movw	r24, r22
    2a46:	9e 83       	std	Y+6, r25	; 0x06
    2a48:	8d 83       	std	Y+5, r24	; 0x05
    2a4a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a4c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a4e:	9a 83       	std	Y+2, r25	; 0x02
    2a50:	89 83       	std	Y+1, r24	; 0x01
    2a52:	89 81       	ldd	r24, Y+1	; 0x01
    2a54:	9a 81       	ldd	r25, Y+2	; 0x02
    2a56:	01 97       	sbiw	r24, 0x01	; 1
    2a58:	f1 f7       	brne	.-4      	; 0x2a56 <result_OnEntry+0x134>
    2a5a:	9a 83       	std	Y+2, r25	; 0x02
    2a5c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);



}
    2a5e:	2f 96       	adiw	r28, 0x0f	; 15
    2a60:	0f b6       	in	r0, 0x3f	; 63
    2a62:	f8 94       	cli
    2a64:	de bf       	out	0x3e, r29	; 62
    2a66:	0f be       	out	0x3f, r0	; 63
    2a68:	cd bf       	out	0x3d, r28	; 61
    2a6a:	cf 91       	pop	r28
    2a6c:	df 91       	pop	r29
    2a6e:	08 95       	ret

00002a70 <result_doAction>:

void result_doAction(void){
    2a70:	df 93       	push	r29
    2a72:	cf 93       	push	r28
    2a74:	cd b7       	in	r28, 0x3d	; 61
    2a76:	de b7       	in	r29, 0x3e	; 62
    2a78:	a1 97       	sbiw	r28, 0x21	; 33
    2a7a:	0f b6       	in	r0, 0x3f	; 63
    2a7c:	f8 94       	cli
    2a7e:	de bf       	out	0x3e, r29	; 62
    2a80:	0f be       	out	0x3f, r0	; 63
    2a82:	cd bf       	out	0x3d, r28	; 61

	u8 results;

	operation op=data.op;
    2a84:	80 91 f1 00 	lds	r24, 0x00F1
    2a88:	8e 8f       	std	Y+30, r24	; 0x1e



	switch (op){
    2a8a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2a8c:	28 2f       	mov	r18, r24
    2a8e:	30 e0       	ldi	r19, 0x00	; 0
    2a90:	39 a3       	std	Y+33, r19	; 0x21
    2a92:	28 a3       	std	Y+32, r18	; 0x20
    2a94:	88 a1       	ldd	r24, Y+32	; 0x20
    2a96:	99 a1       	ldd	r25, Y+33	; 0x21
    2a98:	81 30       	cpi	r24, 0x01	; 1
    2a9a:	91 05       	cpc	r25, r1
    2a9c:	e1 f0       	breq	.+56     	; 0x2ad6 <result_doAction+0x66>
    2a9e:	28 a1       	ldd	r18, Y+32	; 0x20
    2aa0:	39 a1       	ldd	r19, Y+33	; 0x21
    2aa2:	22 30       	cpi	r18, 0x02	; 2
    2aa4:	31 05       	cpc	r19, r1
    2aa6:	2c f4       	brge	.+10     	; 0x2ab2 <result_doAction+0x42>
    2aa8:	88 a1       	ldd	r24, Y+32	; 0x20
    2aaa:	99 a1       	ldd	r25, Y+33	; 0x21
    2aac:	00 97       	sbiw	r24, 0x00	; 0
    2aae:	61 f0       	breq	.+24     	; 0x2ac8 <result_doAction+0x58>
    2ab0:	32 c0       	rjmp	.+100    	; 0x2b16 <result_doAction+0xa6>
    2ab2:	28 a1       	ldd	r18, Y+32	; 0x20
    2ab4:	39 a1       	ldd	r19, Y+33	; 0x21
    2ab6:	22 30       	cpi	r18, 0x02	; 2
    2ab8:	31 05       	cpc	r19, r1
    2aba:	a1 f0       	breq	.+40     	; 0x2ae4 <result_doAction+0x74>
    2abc:	88 a1       	ldd	r24, Y+32	; 0x20
    2abe:	99 a1       	ldd	r25, Y+33	; 0x21
    2ac0:	83 30       	cpi	r24, 0x03	; 3
    2ac2:	91 05       	cpc	r25, r1
    2ac4:	c1 f0       	breq	.+48     	; 0x2af6 <result_doAction+0x86>
    2ac6:	27 c0       	rjmp	.+78     	; 0x2b16 <result_doAction+0xa6>

	case add :
		results = data.num1+data.num2;
    2ac8:	80 91 f0 00 	lds	r24, 0x00F0
    2acc:	90 91 f2 00 	lds	r25, 0x00F2
    2ad0:	89 0f       	add	r24, r25
    2ad2:	8f 8f       	std	Y+31, r24	; 0x1f
    2ad4:	22 c0       	rjmp	.+68     	; 0x2b1a <result_doAction+0xaa>
		break;
	case sub :
		results = data.num1-data.num2;
    2ad6:	80 91 f0 00 	lds	r24, 0x00F0
    2ada:	90 91 f2 00 	lds	r25, 0x00F2
    2ade:	89 1b       	sub	r24, r25
    2ae0:	8f 8f       	std	Y+31, r24	; 0x1f
    2ae2:	1b c0       	rjmp	.+54     	; 0x2b1a <result_doAction+0xaa>
		break;
	case multi :
		results = data.num1*data.num2;
    2ae4:	80 91 f0 00 	lds	r24, 0x00F0
    2ae8:	90 91 f2 00 	lds	r25, 0x00F2
    2aec:	89 9f       	mul	r24, r25
    2aee:	80 2d       	mov	r24, r0
    2af0:	11 24       	eor	r1, r1
    2af2:	8f 8f       	std	Y+31, r24	; 0x1f
    2af4:	12 c0       	rjmp	.+36     	; 0x2b1a <result_doAction+0xaa>
		break;
	case div :
		if(data.num2 !=0){
    2af6:	80 91 f2 00 	lds	r24, 0x00F2
    2afa:	88 23       	and	r24, r24
    2afc:	49 f0       	breq	.+18     	; 0x2b10 <result_doAction+0xa0>
			results = data.num1/data.num2;
    2afe:	80 91 f0 00 	lds	r24, 0x00F0
    2b02:	90 91 f2 00 	lds	r25, 0x00F2
    2b06:	69 2f       	mov	r22, r25
    2b08:	0e 94 e7 16 	call	0x2dce	; 0x2dce <__udivmodqi4>
    2b0c:	8f 8f       	std	Y+31, r24	; 0x1f
    2b0e:	05 c0       	rjmp	.+10     	; 0x2b1a <result_doAction+0xaa>
		}
		else {
			results = 'N';
    2b10:	8e e4       	ldi	r24, 0x4E	; 78
    2b12:	8f 8f       	std	Y+31, r24	; 0x1f
    2b14:	02 c0       	rjmp	.+4      	; 0x2b1a <result_doAction+0xaa>
		}
		break;
	default:
		results = 'N';
    2b16:	8e e4       	ldi	r24, 0x4E	; 78
    2b18:	8f 8f       	std	Y+31, r24	; 0x1f


	}

	data.result=results;
    2b1a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b1c:	80 93 f3 00 	sts	0x00F3, r24
	write_command(0b00000001);
    2b20:	81 e0       	ldi	r24, 0x01	; 1
    2b22:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <write_command>
    2b26:	80 e0       	ldi	r24, 0x00	; 0
    2b28:	90 e0       	ldi	r25, 0x00	; 0
    2b2a:	a8 e4       	ldi	r26, 0x48	; 72
    2b2c:	b2 e4       	ldi	r27, 0x42	; 66
    2b2e:	89 8f       	std	Y+25, r24	; 0x19
    2b30:	9a 8f       	std	Y+26, r25	; 0x1a
    2b32:	ab 8f       	std	Y+27, r26	; 0x1b
    2b34:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b36:	69 8d       	ldd	r22, Y+25	; 0x19
    2b38:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b3a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b3c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b3e:	20 e0       	ldi	r18, 0x00	; 0
    2b40:	30 e0       	ldi	r19, 0x00	; 0
    2b42:	4a ef       	ldi	r20, 0xFA	; 250
    2b44:	54 e4       	ldi	r21, 0x44	; 68
    2b46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b4a:	dc 01       	movw	r26, r24
    2b4c:	cb 01       	movw	r24, r22
    2b4e:	8d 8b       	std	Y+21, r24	; 0x15
    2b50:	9e 8b       	std	Y+22, r25	; 0x16
    2b52:	af 8b       	std	Y+23, r26	; 0x17
    2b54:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b56:	6d 89       	ldd	r22, Y+21	; 0x15
    2b58:	7e 89       	ldd	r23, Y+22	; 0x16
    2b5a:	8f 89       	ldd	r24, Y+23	; 0x17
    2b5c:	98 8d       	ldd	r25, Y+24	; 0x18
    2b5e:	20 e0       	ldi	r18, 0x00	; 0
    2b60:	30 e0       	ldi	r19, 0x00	; 0
    2b62:	40 e8       	ldi	r20, 0x80	; 128
    2b64:	5f e3       	ldi	r21, 0x3F	; 63
    2b66:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b6a:	88 23       	and	r24, r24
    2b6c:	2c f4       	brge	.+10     	; 0x2b78 <result_doAction+0x108>
		__ticks = 1;
    2b6e:	81 e0       	ldi	r24, 0x01	; 1
    2b70:	90 e0       	ldi	r25, 0x00	; 0
    2b72:	9c 8b       	std	Y+20, r25	; 0x14
    2b74:	8b 8b       	std	Y+19, r24	; 0x13
    2b76:	3f c0       	rjmp	.+126    	; 0x2bf6 <result_doAction+0x186>
	else if (__tmp > 65535)
    2b78:	6d 89       	ldd	r22, Y+21	; 0x15
    2b7a:	7e 89       	ldd	r23, Y+22	; 0x16
    2b7c:	8f 89       	ldd	r24, Y+23	; 0x17
    2b7e:	98 8d       	ldd	r25, Y+24	; 0x18
    2b80:	20 e0       	ldi	r18, 0x00	; 0
    2b82:	3f ef       	ldi	r19, 0xFF	; 255
    2b84:	4f e7       	ldi	r20, 0x7F	; 127
    2b86:	57 e4       	ldi	r21, 0x47	; 71
    2b88:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b8c:	18 16       	cp	r1, r24
    2b8e:	4c f5       	brge	.+82     	; 0x2be2 <result_doAction+0x172>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b90:	69 8d       	ldd	r22, Y+25	; 0x19
    2b92:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b94:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b96:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b98:	20 e0       	ldi	r18, 0x00	; 0
    2b9a:	30 e0       	ldi	r19, 0x00	; 0
    2b9c:	40 e2       	ldi	r20, 0x20	; 32
    2b9e:	51 e4       	ldi	r21, 0x41	; 65
    2ba0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ba4:	dc 01       	movw	r26, r24
    2ba6:	cb 01       	movw	r24, r22
    2ba8:	bc 01       	movw	r22, r24
    2baa:	cd 01       	movw	r24, r26
    2bac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bb0:	dc 01       	movw	r26, r24
    2bb2:	cb 01       	movw	r24, r22
    2bb4:	9c 8b       	std	Y+20, r25	; 0x14
    2bb6:	8b 8b       	std	Y+19, r24	; 0x13
    2bb8:	0f c0       	rjmp	.+30     	; 0x2bd8 <result_doAction+0x168>
    2bba:	88 ec       	ldi	r24, 0xC8	; 200
    2bbc:	90 e0       	ldi	r25, 0x00	; 0
    2bbe:	9a 8b       	std	Y+18, r25	; 0x12
    2bc0:	89 8b       	std	Y+17, r24	; 0x11
    2bc2:	89 89       	ldd	r24, Y+17	; 0x11
    2bc4:	9a 89       	ldd	r25, Y+18	; 0x12
    2bc6:	01 97       	sbiw	r24, 0x01	; 1
    2bc8:	f1 f7       	brne	.-4      	; 0x2bc6 <result_doAction+0x156>
    2bca:	9a 8b       	std	Y+18, r25	; 0x12
    2bcc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bce:	8b 89       	ldd	r24, Y+19	; 0x13
    2bd0:	9c 89       	ldd	r25, Y+20	; 0x14
    2bd2:	01 97       	sbiw	r24, 0x01	; 1
    2bd4:	9c 8b       	std	Y+20, r25	; 0x14
    2bd6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bd8:	8b 89       	ldd	r24, Y+19	; 0x13
    2bda:	9c 89       	ldd	r25, Y+20	; 0x14
    2bdc:	00 97       	sbiw	r24, 0x00	; 0
    2bde:	69 f7       	brne	.-38     	; 0x2bba <result_doAction+0x14a>
    2be0:	14 c0       	rjmp	.+40     	; 0x2c0a <result_doAction+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2be2:	6d 89       	ldd	r22, Y+21	; 0x15
    2be4:	7e 89       	ldd	r23, Y+22	; 0x16
    2be6:	8f 89       	ldd	r24, Y+23	; 0x17
    2be8:	98 8d       	ldd	r25, Y+24	; 0x18
    2bea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bee:	dc 01       	movw	r26, r24
    2bf0:	cb 01       	movw	r24, r22
    2bf2:	9c 8b       	std	Y+20, r25	; 0x14
    2bf4:	8b 8b       	std	Y+19, r24	; 0x13
    2bf6:	8b 89       	ldd	r24, Y+19	; 0x13
    2bf8:	9c 89       	ldd	r25, Y+20	; 0x14
    2bfa:	98 8b       	std	Y+16, r25	; 0x10
    2bfc:	8f 87       	std	Y+15, r24	; 0x0f
    2bfe:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c00:	98 89       	ldd	r25, Y+16	; 0x10
    2c02:	01 97       	sbiw	r24, 0x01	; 1
    2c04:	f1 f7       	brne	.-4      	; 0x2c02 <result_doAction+0x192>
    2c06:	98 8b       	std	Y+16, r25	; 0x10
    2c08:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(50);

	write_data(u8numAsci[data.num1]);
    2c0a:	80 91 f0 00 	lds	r24, 0x00F0
    2c0e:	88 2f       	mov	r24, r24
    2c10:	90 e0       	ldi	r25, 0x00	; 0
    2c12:	fc 01       	movw	r30, r24
    2c14:	eb 51       	subi	r30, 0x1B	; 27
    2c16:	ff 4f       	sbci	r31, 0xFF	; 255
    2c18:	80 81       	ld	r24, Z
    2c1a:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <write_data>

	s8 c=opToChar(data.op);
    2c1e:	80 91 f1 00 	lds	r24, 0x00F1
    2c22:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <opToChar>
    2c26:	8d 8f       	std	Y+29, r24	; 0x1d

	write_data(c);
    2c28:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c2a:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <write_data>
	write_data(u8numAsci[data.num2]);
    2c2e:	80 91 f2 00 	lds	r24, 0x00F2
    2c32:	88 2f       	mov	r24, r24
    2c34:	90 e0       	ldi	r25, 0x00	; 0
    2c36:	fc 01       	movw	r30, r24
    2c38:	eb 51       	subi	r30, 0x1B	; 27
    2c3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c3c:	80 81       	ld	r24, Z
    2c3e:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <write_data>
	write_data('=');
    2c42:	8d e3       	ldi	r24, 0x3D	; 61
    2c44:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <write_data>
	//_delay_ms(50);
	if(data.result !='N'){
    2c48:	80 91 f3 00 	lds	r24, 0x00F3
    2c4c:	8e 34       	cpi	r24, 0x4E	; 78
    2c4e:	f1 f0       	breq	.+60     	; 0x2c8c <result_doAction+0x21c>
		write_data(u8numAsci[data.result/10]);
    2c50:	80 91 f3 00 	lds	r24, 0x00F3
    2c54:	9a e0       	ldi	r25, 0x0A	; 10
    2c56:	69 2f       	mov	r22, r25
    2c58:	0e 94 e7 16 	call	0x2dce	; 0x2dce <__udivmodqi4>
    2c5c:	88 2f       	mov	r24, r24
    2c5e:	90 e0       	ldi	r25, 0x00	; 0
    2c60:	fc 01       	movw	r30, r24
    2c62:	eb 51       	subi	r30, 0x1B	; 27
    2c64:	ff 4f       	sbci	r31, 0xFF	; 255
    2c66:	80 81       	ld	r24, Z
    2c68:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <write_data>
		write_data(u8numAsci[data.result%10]);
    2c6c:	80 91 f3 00 	lds	r24, 0x00F3
    2c70:	9a e0       	ldi	r25, 0x0A	; 10
    2c72:	69 2f       	mov	r22, r25
    2c74:	0e 94 e7 16 	call	0x2dce	; 0x2dce <__udivmodqi4>
    2c78:	89 2f       	mov	r24, r25
    2c7a:	88 2f       	mov	r24, r24
    2c7c:	90 e0       	ldi	r25, 0x00	; 0
    2c7e:	fc 01       	movw	r30, r24
    2c80:	eb 51       	subi	r30, 0x1B	; 27
    2c82:	ff 4f       	sbci	r31, 0xFF	; 255
    2c84:	80 81       	ld	r24, Z
    2c86:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <write_data>
    2c8a:	04 c0       	rjmp	.+8      	; 0x2c94 <result_doAction+0x224>
	}else {
		write_data(data.result);
    2c8c:	80 91 f3 00 	lds	r24, 0x00F3
    2c90:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <write_data>
    2c94:	80 e0       	ldi	r24, 0x00	; 0
    2c96:	90 e0       	ldi	r25, 0x00	; 0
    2c98:	a8 e4       	ldi	r26, 0x48	; 72
    2c9a:	b2 e4       	ldi	r27, 0x42	; 66
    2c9c:	8b 87       	std	Y+11, r24	; 0x0b
    2c9e:	9c 87       	std	Y+12, r25	; 0x0c
    2ca0:	ad 87       	std	Y+13, r26	; 0x0d
    2ca2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ca4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ca6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ca8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2caa:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cac:	20 e0       	ldi	r18, 0x00	; 0
    2cae:	30 e0       	ldi	r19, 0x00	; 0
    2cb0:	4a ef       	ldi	r20, 0xFA	; 250
    2cb2:	54 e4       	ldi	r21, 0x44	; 68
    2cb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cb8:	dc 01       	movw	r26, r24
    2cba:	cb 01       	movw	r24, r22
    2cbc:	8f 83       	std	Y+7, r24	; 0x07
    2cbe:	98 87       	std	Y+8, r25	; 0x08
    2cc0:	a9 87       	std	Y+9, r26	; 0x09
    2cc2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2cc4:	6f 81       	ldd	r22, Y+7	; 0x07
    2cc6:	78 85       	ldd	r23, Y+8	; 0x08
    2cc8:	89 85       	ldd	r24, Y+9	; 0x09
    2cca:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ccc:	20 e0       	ldi	r18, 0x00	; 0
    2cce:	30 e0       	ldi	r19, 0x00	; 0
    2cd0:	40 e8       	ldi	r20, 0x80	; 128
    2cd2:	5f e3       	ldi	r21, 0x3F	; 63
    2cd4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cd8:	88 23       	and	r24, r24
    2cda:	2c f4       	brge	.+10     	; 0x2ce6 <result_doAction+0x276>
		__ticks = 1;
    2cdc:	81 e0       	ldi	r24, 0x01	; 1
    2cde:	90 e0       	ldi	r25, 0x00	; 0
    2ce0:	9e 83       	std	Y+6, r25	; 0x06
    2ce2:	8d 83       	std	Y+5, r24	; 0x05
    2ce4:	3f c0       	rjmp	.+126    	; 0x2d64 <result_doAction+0x2f4>
	else if (__tmp > 65535)
    2ce6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ce8:	78 85       	ldd	r23, Y+8	; 0x08
    2cea:	89 85       	ldd	r24, Y+9	; 0x09
    2cec:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cee:	20 e0       	ldi	r18, 0x00	; 0
    2cf0:	3f ef       	ldi	r19, 0xFF	; 255
    2cf2:	4f e7       	ldi	r20, 0x7F	; 127
    2cf4:	57 e4       	ldi	r21, 0x47	; 71
    2cf6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cfa:	18 16       	cp	r1, r24
    2cfc:	4c f5       	brge	.+82     	; 0x2d50 <result_doAction+0x2e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cfe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d00:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d02:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d04:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d06:	20 e0       	ldi	r18, 0x00	; 0
    2d08:	30 e0       	ldi	r19, 0x00	; 0
    2d0a:	40 e2       	ldi	r20, 0x20	; 32
    2d0c:	51 e4       	ldi	r21, 0x41	; 65
    2d0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d12:	dc 01       	movw	r26, r24
    2d14:	cb 01       	movw	r24, r22
    2d16:	bc 01       	movw	r22, r24
    2d18:	cd 01       	movw	r24, r26
    2d1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d1e:	dc 01       	movw	r26, r24
    2d20:	cb 01       	movw	r24, r22
    2d22:	9e 83       	std	Y+6, r25	; 0x06
    2d24:	8d 83       	std	Y+5, r24	; 0x05
    2d26:	0f c0       	rjmp	.+30     	; 0x2d46 <result_doAction+0x2d6>
    2d28:	88 ec       	ldi	r24, 0xC8	; 200
    2d2a:	90 e0       	ldi	r25, 0x00	; 0
    2d2c:	9c 83       	std	Y+4, r25	; 0x04
    2d2e:	8b 83       	std	Y+3, r24	; 0x03
    2d30:	8b 81       	ldd	r24, Y+3	; 0x03
    2d32:	9c 81       	ldd	r25, Y+4	; 0x04
    2d34:	01 97       	sbiw	r24, 0x01	; 1
    2d36:	f1 f7       	brne	.-4      	; 0x2d34 <result_doAction+0x2c4>
    2d38:	9c 83       	std	Y+4, r25	; 0x04
    2d3a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d3c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d3e:	9e 81       	ldd	r25, Y+6	; 0x06
    2d40:	01 97       	sbiw	r24, 0x01	; 1
    2d42:	9e 83       	std	Y+6, r25	; 0x06
    2d44:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d46:	8d 81       	ldd	r24, Y+5	; 0x05
    2d48:	9e 81       	ldd	r25, Y+6	; 0x06
    2d4a:	00 97       	sbiw	r24, 0x00	; 0
    2d4c:	69 f7       	brne	.-38     	; 0x2d28 <result_doAction+0x2b8>
    2d4e:	14 c0       	rjmp	.+40     	; 0x2d78 <result_doAction+0x308>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d50:	6f 81       	ldd	r22, Y+7	; 0x07
    2d52:	78 85       	ldd	r23, Y+8	; 0x08
    2d54:	89 85       	ldd	r24, Y+9	; 0x09
    2d56:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d5c:	dc 01       	movw	r26, r24
    2d5e:	cb 01       	movw	r24, r22
    2d60:	9e 83       	std	Y+6, r25	; 0x06
    2d62:	8d 83       	std	Y+5, r24	; 0x05
    2d64:	8d 81       	ldd	r24, Y+5	; 0x05
    2d66:	9e 81       	ldd	r25, Y+6	; 0x06
    2d68:	9a 83       	std	Y+2, r25	; 0x02
    2d6a:	89 83       	std	Y+1, r24	; 0x01
    2d6c:	89 81       	ldd	r24, Y+1	; 0x01
    2d6e:	9a 81       	ldd	r25, Y+2	; 0x02
    2d70:	01 97       	sbiw	r24, 0x01	; 1
    2d72:	f1 f7       	brne	.-4      	; 0x2d70 <result_doAction+0x300>
    2d74:	9a 83       	std	Y+2, r25	; 0x02
    2d76:	89 83       	std	Y+1, r24	; 0x01
	}

	_delay_ms(50);


}
    2d78:	a1 96       	adiw	r28, 0x21	; 33
    2d7a:	0f b6       	in	r0, 0x3f	; 63
    2d7c:	f8 94       	cli
    2d7e:	de bf       	out	0x3e, r29	; 62
    2d80:	0f be       	out	0x3f, r0	; 63
    2d82:	cd bf       	out	0x3d, r28	; 61
    2d84:	cf 91       	pop	r28
    2d86:	df 91       	pop	r29
    2d88:	08 95       	ret

00002d8a <result_OnExit>:

void result_OnExit(){
    2d8a:	df 93       	push	r29
    2d8c:	cf 93       	push	r28
    2d8e:	cd b7       	in	r28, 0x3d	; 61
    2d90:	de b7       	in	r29, 0x3e	; 62



}
    2d92:	cf 91       	pop	r28
    2d94:	df 91       	pop	r29
    2d96:	08 95       	ret

00002d98 <main>:





int main(void){
    2d98:	df 93       	push	r29
    2d9a:	cf 93       	push	r28
    2d9c:	0f 92       	push	r0
    2d9e:	cd b7       	in	r28, 0x3d	; 61
    2da0:	de b7       	in	r29, 0x3e	; 62

	DIO_vidInit();
    2da2:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vidInit>

	init();
    2da6:	0e 94 47 0b 	call	0x168e	; 0x168e <init>
	u8 currstate;

	SM_Init(SwitchStateTabl,3,first ,&currstate);
    2daa:	84 e8       	ldi	r24, 0x84	; 132
    2dac:	90 e0       	ldi	r25, 0x00	; 0
    2dae:	63 e0       	ldi	r22, 0x03	; 3
    2db0:	40 e0       	ldi	r20, 0x00	; 0
    2db2:	9e 01       	movw	r18, r28
    2db4:	2f 5f       	subi	r18, 0xFF	; 255
    2db6:	3f 4f       	sbci	r19, 0xFF	; 255
    2db8:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <SM_Init>

		//write_data(u8numAsci[u8num1]);
		//write_data(c);
		//_delay_ms(50);

		SM_execute(SwitchStateTabl,&currstate);
    2dbc:	84 e8       	ldi	r24, 0x84	; 132
    2dbe:	90 e0       	ldi	r25, 0x00	; 0
    2dc0:	9e 01       	movw	r18, r28
    2dc2:	2f 5f       	subi	r18, 0xFF	; 255
    2dc4:	3f 4f       	sbci	r19, 0xFF	; 255
    2dc6:	b9 01       	movw	r22, r18
    2dc8:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <SM_execute>
    2dcc:	f7 cf       	rjmp	.-18     	; 0x2dbc <main+0x24>

00002dce <__udivmodqi4>:
    2dce:	99 1b       	sub	r25, r25
    2dd0:	79 e0       	ldi	r23, 0x09	; 9
    2dd2:	04 c0       	rjmp	.+8      	; 0x2ddc <__udivmodqi4_ep>

00002dd4 <__udivmodqi4_loop>:
    2dd4:	99 1f       	adc	r25, r25
    2dd6:	96 17       	cp	r25, r22
    2dd8:	08 f0       	brcs	.+2      	; 0x2ddc <__udivmodqi4_ep>
    2dda:	96 1b       	sub	r25, r22

00002ddc <__udivmodqi4_ep>:
    2ddc:	88 1f       	adc	r24, r24
    2dde:	7a 95       	dec	r23
    2de0:	c9 f7       	brne	.-14     	; 0x2dd4 <__udivmodqi4_loop>
    2de2:	80 95       	com	r24
    2de4:	08 95       	ret

00002de6 <__prologue_saves__>:
    2de6:	2f 92       	push	r2
    2de8:	3f 92       	push	r3
    2dea:	4f 92       	push	r4
    2dec:	5f 92       	push	r5
    2dee:	6f 92       	push	r6
    2df0:	7f 92       	push	r7
    2df2:	8f 92       	push	r8
    2df4:	9f 92       	push	r9
    2df6:	af 92       	push	r10
    2df8:	bf 92       	push	r11
    2dfa:	cf 92       	push	r12
    2dfc:	df 92       	push	r13
    2dfe:	ef 92       	push	r14
    2e00:	ff 92       	push	r15
    2e02:	0f 93       	push	r16
    2e04:	1f 93       	push	r17
    2e06:	cf 93       	push	r28
    2e08:	df 93       	push	r29
    2e0a:	cd b7       	in	r28, 0x3d	; 61
    2e0c:	de b7       	in	r29, 0x3e	; 62
    2e0e:	ca 1b       	sub	r28, r26
    2e10:	db 0b       	sbc	r29, r27
    2e12:	0f b6       	in	r0, 0x3f	; 63
    2e14:	f8 94       	cli
    2e16:	de bf       	out	0x3e, r29	; 62
    2e18:	0f be       	out	0x3f, r0	; 63
    2e1a:	cd bf       	out	0x3d, r28	; 61
    2e1c:	09 94       	ijmp

00002e1e <__epilogue_restores__>:
    2e1e:	2a 88       	ldd	r2, Y+18	; 0x12
    2e20:	39 88       	ldd	r3, Y+17	; 0x11
    2e22:	48 88       	ldd	r4, Y+16	; 0x10
    2e24:	5f 84       	ldd	r5, Y+15	; 0x0f
    2e26:	6e 84       	ldd	r6, Y+14	; 0x0e
    2e28:	7d 84       	ldd	r7, Y+13	; 0x0d
    2e2a:	8c 84       	ldd	r8, Y+12	; 0x0c
    2e2c:	9b 84       	ldd	r9, Y+11	; 0x0b
    2e2e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2e30:	b9 84       	ldd	r11, Y+9	; 0x09
    2e32:	c8 84       	ldd	r12, Y+8	; 0x08
    2e34:	df 80       	ldd	r13, Y+7	; 0x07
    2e36:	ee 80       	ldd	r14, Y+6	; 0x06
    2e38:	fd 80       	ldd	r15, Y+5	; 0x05
    2e3a:	0c 81       	ldd	r16, Y+4	; 0x04
    2e3c:	1b 81       	ldd	r17, Y+3	; 0x03
    2e3e:	aa 81       	ldd	r26, Y+2	; 0x02
    2e40:	b9 81       	ldd	r27, Y+1	; 0x01
    2e42:	ce 0f       	add	r28, r30
    2e44:	d1 1d       	adc	r29, r1
    2e46:	0f b6       	in	r0, 0x3f	; 63
    2e48:	f8 94       	cli
    2e4a:	de bf       	out	0x3e, r29	; 62
    2e4c:	0f be       	out	0x3f, r0	; 63
    2e4e:	cd bf       	out	0x3d, r28	; 61
    2e50:	ed 01       	movw	r28, r26
    2e52:	08 95       	ret

00002e54 <_exit>:
    2e54:	f8 94       	cli

00002e56 <__stop_program>:
    2e56:	ff cf       	rjmp	.-2      	; 0x2e56 <__stop_program>
