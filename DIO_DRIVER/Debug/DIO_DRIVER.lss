
DIO_DRIVER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000894  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002c  00800060  00000894  00000908  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000e58  00000000  00000000  00000934  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000b5b  00000000  00000000  0000178c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e9       	ldi	r30, 0x94	; 148
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	ac 38       	cpi	r26, 0x8C	; 140
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 2b 04 	call	0x856	; 0x856 <main>
  7a:	0c 94 48 04 	jmp	0x890	; 0x890 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_vidInit>:
  82:	df 93       	push	r29
  84:	cf 93       	push	r28
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	27 97       	sbiw	r28, 0x07	; 7
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
  96:	1f 82       	std	Y+7, r1	; 0x07
  98:	1f 82       	std	Y+7, r1	; 0x07
  9a:	46 c1       	rjmp	.+652    	; 0x328 <DIO_vidInit+0x2a6>
  9c:	8f 81       	ldd	r24, Y+7	; 0x07
  9e:	88 2f       	mov	r24, r24
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	88 0f       	add	r24, r24
  a4:	99 1f       	adc	r25, r25
  a6:	80 5a       	subi	r24, 0xA0	; 160
  a8:	9f 4f       	sbci	r25, 0xFF	; 255
  aa:	9d 83       	std	Y+5, r25	; 0x05
  ac:	8c 83       	std	Y+4, r24	; 0x04
  ae:	ec 81       	ldd	r30, Y+4	; 0x04
  b0:	fd 81       	ldd	r31, Y+5	; 0x05
  b2:	80 81       	ld	r24, Z
  b4:	80 74       	andi	r24, 0x40	; 64
  b6:	88 23       	and	r24, r24
  b8:	09 f4       	brne	.+2      	; 0xbc <DIO_vidInit+0x3a>
  ba:	96 c0       	rjmp	.+300    	; 0x1e8 <DIO_vidInit+0x166>
  bc:	ec 81       	ldd	r30, Y+4	; 0x04
  be:	fd 81       	ldd	r31, Y+5	; 0x05
  c0:	80 81       	ld	r24, Z
  c2:	83 70       	andi	r24, 0x03	; 3
  c4:	88 2f       	mov	r24, r24
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	88 0f       	add	r24, r24
  ca:	99 1f       	adc	r25, r25
  cc:	fc 01       	movw	r30, r24
  ce:	e4 58       	subi	r30, 0x84	; 132
  d0:	ff 4f       	sbci	r31, 0xFF	; 255
  d2:	a0 81       	ld	r26, Z
  d4:	b1 81       	ldd	r27, Z+1	; 0x01
  d6:	ec 81       	ldd	r30, Y+4	; 0x04
  d8:	fd 81       	ldd	r31, Y+5	; 0x05
  da:	80 81       	ld	r24, Z
  dc:	83 70       	andi	r24, 0x03	; 3
  de:	88 2f       	mov	r24, r24
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	88 0f       	add	r24, r24
  e4:	99 1f       	adc	r25, r25
  e6:	fc 01       	movw	r30, r24
  e8:	e4 58       	subi	r30, 0x84	; 132
  ea:	ff 4f       	sbci	r31, 0xFF	; 255
  ec:	01 90       	ld	r0, Z+
  ee:	f0 81       	ld	r31, Z
  f0:	e0 2d       	mov	r30, r0
  f2:	80 81       	ld	r24, Z
  f4:	48 2f       	mov	r20, r24
  f6:	ec 81       	ldd	r30, Y+4	; 0x04
  f8:	fd 81       	ldd	r31, Y+5	; 0x05
  fa:	80 81       	ld	r24, Z
  fc:	86 95       	lsr	r24
  fe:	86 95       	lsr	r24
 100:	8f 70       	andi	r24, 0x0F	; 15
 102:	28 2f       	mov	r18, r24
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	02 2e       	mov	r0, r18
 10c:	02 c0       	rjmp	.+4      	; 0x112 <DIO_vidInit+0x90>
 10e:	88 0f       	add	r24, r24
 110:	99 1f       	adc	r25, r25
 112:	0a 94       	dec	r0
 114:	e2 f7       	brpl	.-8      	; 0x10e <DIO_vidInit+0x8c>
 116:	84 2b       	or	r24, r20
 118:	8c 93       	st	X, r24
 11a:	ec 81       	ldd	r30, Y+4	; 0x04
 11c:	fd 81       	ldd	r31, Y+5	; 0x05
 11e:	80 81       	ld	r24, Z
 120:	80 78       	andi	r24, 0x80	; 128
 122:	88 23       	and	r24, r24
 124:	81 f1       	breq	.+96     	; 0x186 <DIO_vidInit+0x104>
 126:	ec 81       	ldd	r30, Y+4	; 0x04
 128:	fd 81       	ldd	r31, Y+5	; 0x05
 12a:	80 81       	ld	r24, Z
 12c:	83 70       	andi	r24, 0x03	; 3
 12e:	88 2f       	mov	r24, r24
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	88 0f       	add	r24, r24
 134:	99 1f       	adc	r25, r25
 136:	fc 01       	movw	r30, r24
 138:	ec 58       	subi	r30, 0x8C	; 140
 13a:	ff 4f       	sbci	r31, 0xFF	; 255
 13c:	a0 81       	ld	r26, Z
 13e:	b1 81       	ldd	r27, Z+1	; 0x01
 140:	ec 81       	ldd	r30, Y+4	; 0x04
 142:	fd 81       	ldd	r31, Y+5	; 0x05
 144:	80 81       	ld	r24, Z
 146:	83 70       	andi	r24, 0x03	; 3
 148:	88 2f       	mov	r24, r24
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	88 0f       	add	r24, r24
 14e:	99 1f       	adc	r25, r25
 150:	fc 01       	movw	r30, r24
 152:	ec 58       	subi	r30, 0x8C	; 140
 154:	ff 4f       	sbci	r31, 0xFF	; 255
 156:	01 90       	ld	r0, Z+
 158:	f0 81       	ld	r31, Z
 15a:	e0 2d       	mov	r30, r0
 15c:	80 81       	ld	r24, Z
 15e:	48 2f       	mov	r20, r24
 160:	ec 81       	ldd	r30, Y+4	; 0x04
 162:	fd 81       	ldd	r31, Y+5	; 0x05
 164:	80 81       	ld	r24, Z
 166:	86 95       	lsr	r24
 168:	86 95       	lsr	r24
 16a:	8f 70       	andi	r24, 0x0F	; 15
 16c:	28 2f       	mov	r18, r24
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	02 2e       	mov	r0, r18
 176:	02 c0       	rjmp	.+4      	; 0x17c <DIO_vidInit+0xfa>
 178:	88 0f       	add	r24, r24
 17a:	99 1f       	adc	r25, r25
 17c:	0a 94       	dec	r0
 17e:	e2 f7       	brpl	.-8      	; 0x178 <DIO_vidInit+0xf6>
 180:	84 2b       	or	r24, r20
 182:	8c 93       	st	X, r24
 184:	ce c0       	rjmp	.+412    	; 0x322 <DIO_vidInit+0x2a0>
 186:	ec 81       	ldd	r30, Y+4	; 0x04
 188:	fd 81       	ldd	r31, Y+5	; 0x05
 18a:	80 81       	ld	r24, Z
 18c:	83 70       	andi	r24, 0x03	; 3
 18e:	88 2f       	mov	r24, r24
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	88 0f       	add	r24, r24
 194:	99 1f       	adc	r25, r25
 196:	fc 01       	movw	r30, r24
 198:	ec 58       	subi	r30, 0x8C	; 140
 19a:	ff 4f       	sbci	r31, 0xFF	; 255
 19c:	a0 81       	ld	r26, Z
 19e:	b1 81       	ldd	r27, Z+1	; 0x01
 1a0:	ec 81       	ldd	r30, Y+4	; 0x04
 1a2:	fd 81       	ldd	r31, Y+5	; 0x05
 1a4:	80 81       	ld	r24, Z
 1a6:	83 70       	andi	r24, 0x03	; 3
 1a8:	88 2f       	mov	r24, r24
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	88 0f       	add	r24, r24
 1ae:	99 1f       	adc	r25, r25
 1b0:	fc 01       	movw	r30, r24
 1b2:	ec 58       	subi	r30, 0x8C	; 140
 1b4:	ff 4f       	sbci	r31, 0xFF	; 255
 1b6:	01 90       	ld	r0, Z+
 1b8:	f0 81       	ld	r31, Z
 1ba:	e0 2d       	mov	r30, r0
 1bc:	80 81       	ld	r24, Z
 1be:	48 2f       	mov	r20, r24
 1c0:	ec 81       	ldd	r30, Y+4	; 0x04
 1c2:	fd 81       	ldd	r31, Y+5	; 0x05
 1c4:	80 81       	ld	r24, Z
 1c6:	86 95       	lsr	r24
 1c8:	86 95       	lsr	r24
 1ca:	8f 70       	andi	r24, 0x0F	; 15
 1cc:	28 2f       	mov	r18, r24
 1ce:	30 e0       	ldi	r19, 0x00	; 0
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	02 2e       	mov	r0, r18
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <DIO_vidInit+0x15a>
 1d8:	88 0f       	add	r24, r24
 1da:	99 1f       	adc	r25, r25
 1dc:	0a 94       	dec	r0
 1de:	e2 f7       	brpl	.-8      	; 0x1d8 <DIO_vidInit+0x156>
 1e0:	80 95       	com	r24
 1e2:	84 23       	and	r24, r20
 1e4:	8c 93       	st	X, r24
 1e6:	9d c0       	rjmp	.+314    	; 0x322 <DIO_vidInit+0x2a0>
 1e8:	ec 81       	ldd	r30, Y+4	; 0x04
 1ea:	fd 81       	ldd	r31, Y+5	; 0x05
 1ec:	80 81       	ld	r24, Z
 1ee:	80 74       	andi	r24, 0x40	; 64
 1f0:	88 23       	and	r24, r24
 1f2:	09 f0       	breq	.+2      	; 0x1f6 <DIO_vidInit+0x174>
 1f4:	96 c0       	rjmp	.+300    	; 0x322 <DIO_vidInit+0x2a0>
 1f6:	ec 81       	ldd	r30, Y+4	; 0x04
 1f8:	fd 81       	ldd	r31, Y+5	; 0x05
 1fa:	80 81       	ld	r24, Z
 1fc:	83 70       	andi	r24, 0x03	; 3
 1fe:	88 2f       	mov	r24, r24
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	88 0f       	add	r24, r24
 204:	99 1f       	adc	r25, r25
 206:	fc 01       	movw	r30, r24
 208:	e4 58       	subi	r30, 0x84	; 132
 20a:	ff 4f       	sbci	r31, 0xFF	; 255
 20c:	a0 81       	ld	r26, Z
 20e:	b1 81       	ldd	r27, Z+1	; 0x01
 210:	ec 81       	ldd	r30, Y+4	; 0x04
 212:	fd 81       	ldd	r31, Y+5	; 0x05
 214:	80 81       	ld	r24, Z
 216:	83 70       	andi	r24, 0x03	; 3
 218:	88 2f       	mov	r24, r24
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	88 0f       	add	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	fc 01       	movw	r30, r24
 222:	e4 58       	subi	r30, 0x84	; 132
 224:	ff 4f       	sbci	r31, 0xFF	; 255
 226:	01 90       	ld	r0, Z+
 228:	f0 81       	ld	r31, Z
 22a:	e0 2d       	mov	r30, r0
 22c:	80 81       	ld	r24, Z
 22e:	48 2f       	mov	r20, r24
 230:	ec 81       	ldd	r30, Y+4	; 0x04
 232:	fd 81       	ldd	r31, Y+5	; 0x05
 234:	80 81       	ld	r24, Z
 236:	86 95       	lsr	r24
 238:	86 95       	lsr	r24
 23a:	8f 70       	andi	r24, 0x0F	; 15
 23c:	28 2f       	mov	r18, r24
 23e:	30 e0       	ldi	r19, 0x00	; 0
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	02 2e       	mov	r0, r18
 246:	02 c0       	rjmp	.+4      	; 0x24c <DIO_vidInit+0x1ca>
 248:	88 0f       	add	r24, r24
 24a:	99 1f       	adc	r25, r25
 24c:	0a 94       	dec	r0
 24e:	e2 f7       	brpl	.-8      	; 0x248 <DIO_vidInit+0x1c6>
 250:	80 95       	com	r24
 252:	84 23       	and	r24, r20
 254:	8c 93       	st	X, r24
 256:	ec 81       	ldd	r30, Y+4	; 0x04
 258:	fd 81       	ldd	r31, Y+5	; 0x05
 25a:	81 81       	ldd	r24, Z+1	; 0x01
 25c:	81 70       	andi	r24, 0x01	; 1
 25e:	88 23       	and	r24, r24
 260:	81 f1       	breq	.+96     	; 0x2c2 <DIO_vidInit+0x240>
 262:	ec 81       	ldd	r30, Y+4	; 0x04
 264:	fd 81       	ldd	r31, Y+5	; 0x05
 266:	80 81       	ld	r24, Z
 268:	83 70       	andi	r24, 0x03	; 3
 26a:	88 2f       	mov	r24, r24
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	88 0f       	add	r24, r24
 270:	99 1f       	adc	r25, r25
 272:	fc 01       	movw	r30, r24
 274:	ec 58       	subi	r30, 0x8C	; 140
 276:	ff 4f       	sbci	r31, 0xFF	; 255
 278:	a0 81       	ld	r26, Z
 27a:	b1 81       	ldd	r27, Z+1	; 0x01
 27c:	ec 81       	ldd	r30, Y+4	; 0x04
 27e:	fd 81       	ldd	r31, Y+5	; 0x05
 280:	80 81       	ld	r24, Z
 282:	83 70       	andi	r24, 0x03	; 3
 284:	88 2f       	mov	r24, r24
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	88 0f       	add	r24, r24
 28a:	99 1f       	adc	r25, r25
 28c:	fc 01       	movw	r30, r24
 28e:	ec 58       	subi	r30, 0x8C	; 140
 290:	ff 4f       	sbci	r31, 0xFF	; 255
 292:	01 90       	ld	r0, Z+
 294:	f0 81       	ld	r31, Z
 296:	e0 2d       	mov	r30, r0
 298:	80 81       	ld	r24, Z
 29a:	48 2f       	mov	r20, r24
 29c:	ec 81       	ldd	r30, Y+4	; 0x04
 29e:	fd 81       	ldd	r31, Y+5	; 0x05
 2a0:	80 81       	ld	r24, Z
 2a2:	86 95       	lsr	r24
 2a4:	86 95       	lsr	r24
 2a6:	8f 70       	andi	r24, 0x0F	; 15
 2a8:	28 2f       	mov	r18, r24
 2aa:	30 e0       	ldi	r19, 0x00	; 0
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	02 2e       	mov	r0, r18
 2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <DIO_vidInit+0x236>
 2b4:	88 0f       	add	r24, r24
 2b6:	99 1f       	adc	r25, r25
 2b8:	0a 94       	dec	r0
 2ba:	e2 f7       	brpl	.-8      	; 0x2b4 <DIO_vidInit+0x232>
 2bc:	84 2b       	or	r24, r20
 2be:	8c 93       	st	X, r24
 2c0:	30 c0       	rjmp	.+96     	; 0x322 <DIO_vidInit+0x2a0>
 2c2:	ec 81       	ldd	r30, Y+4	; 0x04
 2c4:	fd 81       	ldd	r31, Y+5	; 0x05
 2c6:	80 81       	ld	r24, Z
 2c8:	83 70       	andi	r24, 0x03	; 3
 2ca:	88 2f       	mov	r24, r24
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	88 0f       	add	r24, r24
 2d0:	99 1f       	adc	r25, r25
 2d2:	fc 01       	movw	r30, r24
 2d4:	ec 58       	subi	r30, 0x8C	; 140
 2d6:	ff 4f       	sbci	r31, 0xFF	; 255
 2d8:	a0 81       	ld	r26, Z
 2da:	b1 81       	ldd	r27, Z+1	; 0x01
 2dc:	ec 81       	ldd	r30, Y+4	; 0x04
 2de:	fd 81       	ldd	r31, Y+5	; 0x05
 2e0:	80 81       	ld	r24, Z
 2e2:	83 70       	andi	r24, 0x03	; 3
 2e4:	88 2f       	mov	r24, r24
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	88 0f       	add	r24, r24
 2ea:	99 1f       	adc	r25, r25
 2ec:	fc 01       	movw	r30, r24
 2ee:	ec 58       	subi	r30, 0x8C	; 140
 2f0:	ff 4f       	sbci	r31, 0xFF	; 255
 2f2:	01 90       	ld	r0, Z+
 2f4:	f0 81       	ld	r31, Z
 2f6:	e0 2d       	mov	r30, r0
 2f8:	80 81       	ld	r24, Z
 2fa:	48 2f       	mov	r20, r24
 2fc:	ec 81       	ldd	r30, Y+4	; 0x04
 2fe:	fd 81       	ldd	r31, Y+5	; 0x05
 300:	80 81       	ld	r24, Z
 302:	86 95       	lsr	r24
 304:	86 95       	lsr	r24
 306:	8f 70       	andi	r24, 0x0F	; 15
 308:	28 2f       	mov	r18, r24
 30a:	30 e0       	ldi	r19, 0x00	; 0
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	02 2e       	mov	r0, r18
 312:	02 c0       	rjmp	.+4      	; 0x318 <DIO_vidInit+0x296>
 314:	88 0f       	add	r24, r24
 316:	99 1f       	adc	r25, r25
 318:	0a 94       	dec	r0
 31a:	e2 f7       	brpl	.-8      	; 0x314 <DIO_vidInit+0x292>
 31c:	80 95       	com	r24
 31e:	84 23       	and	r24, r20
 320:	8c 93       	st	X, r24
 322:	8f 81       	ldd	r24, Y+7	; 0x07
 324:	8f 5f       	subi	r24, 0xFF	; 255
 326:	8f 83       	std	Y+7, r24	; 0x07
 328:	8f 81       	ldd	r24, Y+7	; 0x07
 32a:	85 30       	cpi	r24, 0x05	; 5
 32c:	08 f4       	brcc	.+2      	; 0x330 <DIO_vidInit+0x2ae>
 32e:	b6 ce       	rjmp	.-660    	; 0x9c <DIO_vidInit+0x1a>
 330:	1e 82       	std	Y+6, r1	; 0x06
 332:	1e 82       	std	Y+6, r1	; 0x06
 334:	59 c0       	rjmp	.+178    	; 0x3e8 <DIO_vidInit+0x366>
 336:	8e 81       	ldd	r24, Y+6	; 0x06
 338:	28 2f       	mov	r18, r24
 33a:	30 e0       	ldi	r19, 0x00	; 0
 33c:	c9 01       	movw	r24, r18
 33e:	88 0f       	add	r24, r24
 340:	99 1f       	adc	r25, r25
 342:	88 0f       	add	r24, r24
 344:	99 1f       	adc	r25, r25
 346:	82 0f       	add	r24, r18
 348:	93 1f       	adc	r25, r19
 34a:	86 59       	subi	r24, 0x96	; 150
 34c:	9f 4f       	sbci	r25, 0xFF	; 255
 34e:	9b 83       	std	Y+3, r25	; 0x03
 350:	8a 83       	std	Y+2, r24	; 0x02
 352:	ea 81       	ldd	r30, Y+2	; 0x02
 354:	fb 81       	ldd	r31, Y+3	; 0x03
 356:	80 81       	ld	r24, Z
 358:	88 2f       	mov	r24, r24
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	88 0f       	add	r24, r24
 35e:	99 1f       	adc	r25, r25
 360:	fc 01       	movw	r30, r24
 362:	e4 58       	subi	r30, 0x84	; 132
 364:	ff 4f       	sbci	r31, 0xFF	; 255
 366:	a0 81       	ld	r26, Z
 368:	b1 81       	ldd	r27, Z+1	; 0x01
 36a:	ea 81       	ldd	r30, Y+2	; 0x02
 36c:	fb 81       	ldd	r31, Y+3	; 0x03
 36e:	92 81       	ldd	r25, Z+2	; 0x02
 370:	ea 81       	ldd	r30, Y+2	; 0x02
 372:	fb 81       	ldd	r31, Y+3	; 0x03
 374:	81 81       	ldd	r24, Z+1	; 0x01
 376:	89 23       	and	r24, r25
 378:	8c 93       	st	X, r24
 37a:	19 82       	std	Y+1, r1	; 0x01
 37c:	19 82       	std	Y+1, r1	; 0x01
 37e:	2e c0       	rjmp	.+92     	; 0x3dc <DIO_vidInit+0x35a>
 380:	ea 81       	ldd	r30, Y+2	; 0x02
 382:	fb 81       	ldd	r31, Y+3	; 0x03
 384:	92 81       	ldd	r25, Z+2	; 0x02
 386:	ea 81       	ldd	r30, Y+2	; 0x02
 388:	fb 81       	ldd	r31, Y+3	; 0x03
 38a:	81 81       	ldd	r24, Z+1	; 0x01
 38c:	89 23       	and	r24, r25
 38e:	28 2f       	mov	r18, r24
 390:	30 e0       	ldi	r19, 0x00	; 0
 392:	89 81       	ldd	r24, Y+1	; 0x01
 394:	88 2f       	mov	r24, r24
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	a9 01       	movw	r20, r18
 39a:	02 c0       	rjmp	.+4      	; 0x3a0 <DIO_vidInit+0x31e>
 39c:	55 95       	asr	r21
 39e:	47 95       	ror	r20
 3a0:	8a 95       	dec	r24
 3a2:	e2 f7       	brpl	.-8      	; 0x39c <DIO_vidInit+0x31a>
 3a4:	ca 01       	movw	r24, r20
 3a6:	81 70       	andi	r24, 0x01	; 1
 3a8:	90 70       	andi	r25, 0x00	; 0
 3aa:	88 23       	and	r24, r24
 3ac:	a1 f0       	breq	.+40     	; 0x3d6 <DIO_vidInit+0x354>
 3ae:	ea 81       	ldd	r30, Y+2	; 0x02
 3b0:	fb 81       	ldd	r31, Y+3	; 0x03
 3b2:	80 81       	ld	r24, Z
 3b4:	88 2f       	mov	r24, r24
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	88 0f       	add	r24, r24
 3ba:	99 1f       	adc	r25, r25
 3bc:	fc 01       	movw	r30, r24
 3be:	ec 58       	subi	r30, 0x8C	; 140
 3c0:	ff 4f       	sbci	r31, 0xFF	; 255
 3c2:	a0 81       	ld	r26, Z
 3c4:	b1 81       	ldd	r27, Z+1	; 0x01
 3c6:	ea 81       	ldd	r30, Y+2	; 0x02
 3c8:	fb 81       	ldd	r31, Y+3	; 0x03
 3ca:	93 81       	ldd	r25, Z+3	; 0x03
 3cc:	ea 81       	ldd	r30, Y+2	; 0x02
 3ce:	fb 81       	ldd	r31, Y+3	; 0x03
 3d0:	81 81       	ldd	r24, Z+1	; 0x01
 3d2:	89 23       	and	r24, r25
 3d4:	8c 93       	st	X, r24
 3d6:	89 81       	ldd	r24, Y+1	; 0x01
 3d8:	8f 5f       	subi	r24, 0xFF	; 255
 3da:	89 83       	std	Y+1, r24	; 0x01
 3dc:	89 81       	ldd	r24, Y+1	; 0x01
 3de:	88 30       	cpi	r24, 0x08	; 8
 3e0:	78 f2       	brcs	.-98     	; 0x380 <DIO_vidInit+0x2fe>
 3e2:	8e 81       	ldd	r24, Y+6	; 0x06
 3e4:	8f 5f       	subi	r24, 0xFF	; 255
 3e6:	8e 83       	std	Y+6, r24	; 0x06
 3e8:	8e 81       	ldd	r24, Y+6	; 0x06
 3ea:	82 30       	cpi	r24, 0x02	; 2
 3ec:	08 f4       	brcc	.+2      	; 0x3f0 <DIO_vidInit+0x36e>
 3ee:	a3 cf       	rjmp	.-186    	; 0x336 <DIO_vidInit+0x2b4>
 3f0:	27 96       	adiw	r28, 0x07	; 7
 3f2:	0f b6       	in	r0, 0x3f	; 63
 3f4:	f8 94       	cli
 3f6:	de bf       	out	0x3e, r29	; 62
 3f8:	0f be       	out	0x3f, r0	; 63
 3fa:	cd bf       	out	0x3d, r28	; 61
 3fc:	cf 91       	pop	r28
 3fe:	df 91       	pop	r29
 400:	08 95       	ret

00000402 <DIO_enuSetPinValue>:


}


STD_tenuReturn DIO_enuSetPinValue(u8 u8PinIdxCpy,u8 u8ValueCpy){
 402:	df 93       	push	r29
 404:	cf 93       	push	r28
 406:	00 d0       	rcall	.+0      	; 0x408 <DIO_enuSetPinValue+0x6>
 408:	00 d0       	rcall	.+0      	; 0x40a <DIO_enuSetPinValue+0x8>
 40a:	0f 92       	push	r0
 40c:	cd b7       	in	r28, 0x3d	; 61
 40e:	de b7       	in	r29, 0x3e	; 62
 410:	8c 83       	std	Y+4, r24	; 0x04
 412:	6d 83       	std	Y+5, r22	; 0x05



	STD_tenuReturn status;

	if( u8PinIdxCpy>=DIO_PIN_NUM  ){
 414:	8c 81       	ldd	r24, Y+4	; 0x04
 416:	85 30       	cpi	r24, 0x05	; 5
 418:	18 f0       	brcs	.+6      	; 0x420 <DIO_enuSetPinValue+0x1e>

		status=STD_enuOutOfRange;
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	8b 83       	std	Y+3, r24	; 0x03
 41e:	76 c0       	rjmp	.+236    	; 0x50c <DIO_enuSetPinValue+0x10a>

	}
	else if( (u8ValueCpy!=DIO_HIGH)&&(u8ValueCpy!=DIO_LOW) ){
 420:	8d 81       	ldd	r24, Y+5	; 0x05
 422:	81 30       	cpi	r24, 0x01	; 1
 424:	31 f0       	breq	.+12     	; 0x432 <DIO_enuSetPinValue+0x30>
 426:	8d 81       	ldd	r24, Y+5	; 0x05
 428:	88 23       	and	r24, r24
 42a:	19 f0       	breq	.+6      	; 0x432 <DIO_enuSetPinValue+0x30>

		status=STD_enuNOK;
 42c:	82 e0       	ldi	r24, 0x02	; 2
 42e:	8b 83       	std	Y+3, r24	; 0x03
 430:	6d c0       	rjmp	.+218    	; 0x50c <DIO_enuSetPinValue+0x10a>

	else
	{


		const DIO_tstrPIN *pstrCurrentPinLoc=&DIO_kastrPinCg[u8PinIdxCpy];
 432:	8c 81       	ldd	r24, Y+4	; 0x04
 434:	88 2f       	mov	r24, r24
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	88 0f       	add	r24, r24
 43a:	99 1f       	adc	r25, r25
 43c:	80 5a       	subi	r24, 0xA0	; 160
 43e:	9f 4f       	sbci	r25, 0xFF	; 255
 440:	9a 83       	std	Y+2, r25	; 0x02
 442:	89 83       	std	Y+1, r24	; 0x01

		if(u8ValueCpy==DIO_HIGH){
 444:	8d 81       	ldd	r24, Y+5	; 0x05
 446:	81 30       	cpi	r24, 0x01	; 1
 448:	81 f5       	brne	.+96     	; 0x4aa <DIO_enuSetPinValue+0xa8>
			BIT_SET(* u8KarrPorts [pstrCurrentPinLoc->u8PortIdx ] ,  pstrCurrentPinLoc->u8PinIdx);
 44a:	e9 81       	ldd	r30, Y+1	; 0x01
 44c:	fa 81       	ldd	r31, Y+2	; 0x02
 44e:	80 81       	ld	r24, Z
 450:	83 70       	andi	r24, 0x03	; 3
 452:	88 2f       	mov	r24, r24
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	88 0f       	add	r24, r24
 458:	99 1f       	adc	r25, r25
 45a:	fc 01       	movw	r30, r24
 45c:	ec 58       	subi	r30, 0x8C	; 140
 45e:	ff 4f       	sbci	r31, 0xFF	; 255
 460:	a0 81       	ld	r26, Z
 462:	b1 81       	ldd	r27, Z+1	; 0x01
 464:	e9 81       	ldd	r30, Y+1	; 0x01
 466:	fa 81       	ldd	r31, Y+2	; 0x02
 468:	80 81       	ld	r24, Z
 46a:	83 70       	andi	r24, 0x03	; 3
 46c:	88 2f       	mov	r24, r24
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	88 0f       	add	r24, r24
 472:	99 1f       	adc	r25, r25
 474:	fc 01       	movw	r30, r24
 476:	ec 58       	subi	r30, 0x8C	; 140
 478:	ff 4f       	sbci	r31, 0xFF	; 255
 47a:	01 90       	ld	r0, Z+
 47c:	f0 81       	ld	r31, Z
 47e:	e0 2d       	mov	r30, r0
 480:	80 81       	ld	r24, Z
 482:	48 2f       	mov	r20, r24
 484:	e9 81       	ldd	r30, Y+1	; 0x01
 486:	fa 81       	ldd	r31, Y+2	; 0x02
 488:	80 81       	ld	r24, Z
 48a:	86 95       	lsr	r24
 48c:	86 95       	lsr	r24
 48e:	8f 70       	andi	r24, 0x0F	; 15
 490:	28 2f       	mov	r18, r24
 492:	30 e0       	ldi	r19, 0x00	; 0
 494:	81 e0       	ldi	r24, 0x01	; 1
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	02 2e       	mov	r0, r18
 49a:	02 c0       	rjmp	.+4      	; 0x4a0 <DIO_enuSetPinValue+0x9e>
 49c:	88 0f       	add	r24, r24
 49e:	99 1f       	adc	r25, r25
 4a0:	0a 94       	dec	r0
 4a2:	e2 f7       	brpl	.-8      	; 0x49c <DIO_enuSetPinValue+0x9a>
 4a4:	84 2b       	or	r24, r20
 4a6:	8c 93       	st	X, r24
 4a8:	30 c0       	rjmp	.+96     	; 0x50a <DIO_enuSetPinValue+0x108>
		}
		else{
			BIT_CLEAR(* u8KarrPorts [pstrCurrentPinLoc->u8PortIdx ] ,  pstrCurrentPinLoc->u8PinIdx);
 4aa:	e9 81       	ldd	r30, Y+1	; 0x01
 4ac:	fa 81       	ldd	r31, Y+2	; 0x02
 4ae:	80 81       	ld	r24, Z
 4b0:	83 70       	andi	r24, 0x03	; 3
 4b2:	88 2f       	mov	r24, r24
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	88 0f       	add	r24, r24
 4b8:	99 1f       	adc	r25, r25
 4ba:	fc 01       	movw	r30, r24
 4bc:	ec 58       	subi	r30, 0x8C	; 140
 4be:	ff 4f       	sbci	r31, 0xFF	; 255
 4c0:	a0 81       	ld	r26, Z
 4c2:	b1 81       	ldd	r27, Z+1	; 0x01
 4c4:	e9 81       	ldd	r30, Y+1	; 0x01
 4c6:	fa 81       	ldd	r31, Y+2	; 0x02
 4c8:	80 81       	ld	r24, Z
 4ca:	83 70       	andi	r24, 0x03	; 3
 4cc:	88 2f       	mov	r24, r24
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	88 0f       	add	r24, r24
 4d2:	99 1f       	adc	r25, r25
 4d4:	fc 01       	movw	r30, r24
 4d6:	ec 58       	subi	r30, 0x8C	; 140
 4d8:	ff 4f       	sbci	r31, 0xFF	; 255
 4da:	01 90       	ld	r0, Z+
 4dc:	f0 81       	ld	r31, Z
 4de:	e0 2d       	mov	r30, r0
 4e0:	80 81       	ld	r24, Z
 4e2:	48 2f       	mov	r20, r24
 4e4:	e9 81       	ldd	r30, Y+1	; 0x01
 4e6:	fa 81       	ldd	r31, Y+2	; 0x02
 4e8:	80 81       	ld	r24, Z
 4ea:	86 95       	lsr	r24
 4ec:	86 95       	lsr	r24
 4ee:	8f 70       	andi	r24, 0x0F	; 15
 4f0:	28 2f       	mov	r18, r24
 4f2:	30 e0       	ldi	r19, 0x00	; 0
 4f4:	81 e0       	ldi	r24, 0x01	; 1
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	02 2e       	mov	r0, r18
 4fa:	02 c0       	rjmp	.+4      	; 0x500 <DIO_enuSetPinValue+0xfe>
 4fc:	88 0f       	add	r24, r24
 4fe:	99 1f       	adc	r25, r25
 500:	0a 94       	dec	r0
 502:	e2 f7       	brpl	.-8      	; 0x4fc <DIO_enuSetPinValue+0xfa>
 504:	80 95       	com	r24
 506:	84 23       	and	r24, r20
 508:	8c 93       	st	X, r24
		}

		status=STD_enuOK;
 50a:	1b 82       	std	Y+3, r1	; 0x03

	}



	return  status ;
 50c:	8b 81       	ldd	r24, Y+3	; 0x03
}
 50e:	0f 90       	pop	r0
 510:	0f 90       	pop	r0
 512:	0f 90       	pop	r0
 514:	0f 90       	pop	r0
 516:	0f 90       	pop	r0
 518:	cf 91       	pop	r28
 51a:	df 91       	pop	r29
 51c:	08 95       	ret

0000051e <DIO_enuGetPinValue>:




STD_tenuReturn DIO_enuGetPinValue(u8 u8PinIdxCpy,u8 * pu8ValueCpy){
 51e:	df 93       	push	r29
 520:	cf 93       	push	r28
 522:	cd b7       	in	r28, 0x3d	; 61
 524:	de b7       	in	r29, 0x3e	; 62
 526:	27 97       	sbiw	r28, 0x07	; 7
 528:	0f b6       	in	r0, 0x3f	; 63
 52a:	f8 94       	cli
 52c:	de bf       	out	0x3e, r29	; 62
 52e:	0f be       	out	0x3f, r0	; 63
 530:	cd bf       	out	0x3d, r28	; 61
 532:	8d 83       	std	Y+5, r24	; 0x05
 534:	7f 83       	std	Y+7, r23	; 0x07
 536:	6e 83       	std	Y+6, r22	; 0x06

	STD_tenuReturn status;


	if( u8PinIdxCpy>=DIO_PIN_NUM  ){
 538:	8d 81       	ldd	r24, Y+5	; 0x05
 53a:	85 30       	cpi	r24, 0x05	; 5
 53c:	18 f0       	brcs	.+6      	; 0x544 <DIO_enuGetPinValue+0x26>

		status=STD_enuOutOfRange;
 53e:	81 e0       	ldi	r24, 0x01	; 1
 540:	8c 83       	std	Y+4, r24	; 0x04
 542:	3e c0       	rjmp	.+124    	; 0x5c0 <DIO_enuGetPinValue+0xa2>

	}else if(pu8ValueCpy==STD_NULL){
 544:	8e 81       	ldd	r24, Y+6	; 0x06
 546:	9f 81       	ldd	r25, Y+7	; 0x07
 548:	00 97       	sbiw	r24, 0x00	; 0
 54a:	19 f4       	brne	.+6      	; 0x552 <DIO_enuGetPinValue+0x34>

		status= STD_enuNullPtr;
 54c:	83 e0       	ldi	r24, 0x03	; 3
 54e:	8c 83       	std	Y+4, r24	; 0x04
 550:	37 c0       	rjmp	.+110    	; 0x5c0 <DIO_enuGetPinValue+0xa2>

	}
	else
	{
		const DIO_tstrPIN *pstrCurrentPinLoc=&DIO_kastrPinCg[u8PinIdxCpy];
 552:	8d 81       	ldd	r24, Y+5	; 0x05
 554:	88 2f       	mov	r24, r24
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	88 0f       	add	r24, r24
 55a:	99 1f       	adc	r25, r25
 55c:	80 5a       	subi	r24, 0xA0	; 160
 55e:	9f 4f       	sbci	r25, 0xFF	; 255
 560:	9b 83       	std	Y+3, r25	; 0x03
 562:	8a 83       	std	Y+2, r24	; 0x02

		u8 temp = BIT_GET(*u8KarrPins [pstrCurrentPinLoc->u8PortIdx ] ,  pstrCurrentPinLoc->u8PinIdx);
 564:	ea 81       	ldd	r30, Y+2	; 0x02
 566:	fb 81       	ldd	r31, Y+3	; 0x03
 568:	80 81       	ld	r24, Z
 56a:	83 70       	andi	r24, 0x03	; 3
 56c:	88 2f       	mov	r24, r24
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	88 0f       	add	r24, r24
 572:	99 1f       	adc	r25, r25
 574:	fc 01       	movw	r30, r24
 576:	ec 57       	subi	r30, 0x7C	; 124
 578:	ff 4f       	sbci	r31, 0xFF	; 255
 57a:	01 90       	ld	r0, Z+
 57c:	f0 81       	ld	r31, Z
 57e:	e0 2d       	mov	r30, r0
 580:	80 81       	ld	r24, Z
 582:	28 2f       	mov	r18, r24
 584:	30 e0       	ldi	r19, 0x00	; 0
 586:	ea 81       	ldd	r30, Y+2	; 0x02
 588:	fb 81       	ldd	r31, Y+3	; 0x03
 58a:	80 81       	ld	r24, Z
 58c:	86 95       	lsr	r24
 58e:	86 95       	lsr	r24
 590:	8f 70       	andi	r24, 0x0F	; 15
 592:	88 2f       	mov	r24, r24
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	a9 01       	movw	r20, r18
 598:	02 c0       	rjmp	.+4      	; 0x59e <DIO_enuGetPinValue+0x80>
 59a:	55 95       	asr	r21
 59c:	47 95       	ror	r20
 59e:	8a 95       	dec	r24
 5a0:	e2 f7       	brpl	.-8      	; 0x59a <DIO_enuGetPinValue+0x7c>
 5a2:	ca 01       	movw	r24, r20
 5a4:	81 70       	andi	r24, 0x01	; 1
 5a6:	89 83       	std	Y+1, r24	; 0x01



		if( (temp==0)){
 5a8:	89 81       	ldd	r24, Y+1	; 0x01
 5aa:	88 23       	and	r24, r24
 5ac:	21 f4       	brne	.+8      	; 0x5b6 <DIO_enuGetPinValue+0x98>

			*pu8ValueCpy=DIO_LOW;
 5ae:	ee 81       	ldd	r30, Y+6	; 0x06
 5b0:	ff 81       	ldd	r31, Y+7	; 0x07
 5b2:	10 82       	st	Z, r1
 5b4:	04 c0       	rjmp	.+8      	; 0x5be <DIO_enuGetPinValue+0xa0>

			//status=STD_enuNOK;

		}
		else{
			*pu8ValueCpy=DIO_HIGH;
 5b6:	ee 81       	ldd	r30, Y+6	; 0x06
 5b8:	ff 81       	ldd	r31, Y+7	; 0x07
 5ba:	81 e0       	ldi	r24, 0x01	; 1
 5bc:	80 83       	st	Z, r24



		}

		status=STD_enuOK;
 5be:	1c 82       	std	Y+4, r1	; 0x04

	}
	return  status ;
 5c0:	8c 81       	ldd	r24, Y+4	; 0x04
}
 5c2:	27 96       	adiw	r28, 0x07	; 7
 5c4:	0f b6       	in	r0, 0x3f	; 63
 5c6:	f8 94       	cli
 5c8:	de bf       	out	0x3e, r29	; 62
 5ca:	0f be       	out	0x3f, r0	; 63
 5cc:	cd bf       	out	0x3d, r28	; 61
 5ce:	cf 91       	pop	r28
 5d0:	df 91       	pop	r29
 5d2:	08 95       	ret

000005d4 <DIO_enuSetPinDirection>:
		STD_enuOK,
		STD_enuOutOfRange
		STD_enuNOK.

 */
STD_tenuReturn DIO_enuSetPinDirection(u8 u8PinIdxCpy,u8 u8DirCpy){
 5d4:	df 93       	push	r29
 5d6:	cf 93       	push	r28
 5d8:	00 d0       	rcall	.+0      	; 0x5da <DIO_enuSetPinDirection+0x6>
 5da:	00 d0       	rcall	.+0      	; 0x5dc <DIO_enuSetPinDirection+0x8>
 5dc:	0f 92       	push	r0
 5de:	cd b7       	in	r28, 0x3d	; 61
 5e0:	de b7       	in	r29, 0x3e	; 62
 5e2:	8c 83       	std	Y+4, r24	; 0x04
 5e4:	6d 83       	std	Y+5, r22	; 0x05

	STD_tenuReturn status;

	if( u8PinIdxCpy>=DIO_PIN_NUM  ){
 5e6:	8c 81       	ldd	r24, Y+4	; 0x04
 5e8:	85 30       	cpi	r24, 0x05	; 5
 5ea:	18 f0       	brcs	.+6      	; 0x5f2 <DIO_enuSetPinDirection+0x1e>

		status=STD_enuOutOfRange;
 5ec:	81 e0       	ldi	r24, 0x01	; 1
 5ee:	8b 83       	std	Y+3, r24	; 0x03
 5f0:	76 c0       	rjmp	.+236    	; 0x6de <DIO_enuSetPinDirection+0x10a>

	}
	else if( (u8DirCpy!=DIO_INPUT)&&(u8DirCpy!=DIO_OUTPUT) ){
 5f2:	8d 81       	ldd	r24, Y+5	; 0x05
 5f4:	88 23       	and	r24, r24
 5f6:	31 f0       	breq	.+12     	; 0x604 <DIO_enuSetPinDirection+0x30>
 5f8:	8d 81       	ldd	r24, Y+5	; 0x05
 5fa:	81 30       	cpi	r24, 0x01	; 1
 5fc:	19 f0       	breq	.+6      	; 0x604 <DIO_enuSetPinDirection+0x30>

		status=STD_enuNOK;
 5fe:	82 e0       	ldi	r24, 0x02	; 2
 600:	8b 83       	std	Y+3, r24	; 0x03
 602:	6d c0       	rjmp	.+218    	; 0x6de <DIO_enuSetPinDirection+0x10a>
	}

	else
	{

		const DIO_tstrPIN *pstrCurrentPinLoc=&DIO_kastrPinCg[u8PinIdxCpy];
 604:	8c 81       	ldd	r24, Y+4	; 0x04
 606:	88 2f       	mov	r24, r24
 608:	90 e0       	ldi	r25, 0x00	; 0
 60a:	88 0f       	add	r24, r24
 60c:	99 1f       	adc	r25, r25
 60e:	80 5a       	subi	r24, 0xA0	; 160
 610:	9f 4f       	sbci	r25, 0xFF	; 255
 612:	9a 83       	std	Y+2, r25	; 0x02
 614:	89 83       	std	Y+1, r24	; 0x01

		if(u8DirCpy==DIO_OUTPUT){
 616:	8d 81       	ldd	r24, Y+5	; 0x05
 618:	81 30       	cpi	r24, 0x01	; 1
 61a:	81 f5       	brne	.+96     	; 0x67c <DIO_enuSetPinDirection+0xa8>
			BIT_SET(* u8KarrDdra [pstrCurrentPinLoc->u8PortIdx ] ,  pstrCurrentPinLoc->u8PinIdx);
 61c:	e9 81       	ldd	r30, Y+1	; 0x01
 61e:	fa 81       	ldd	r31, Y+2	; 0x02
 620:	80 81       	ld	r24, Z
 622:	83 70       	andi	r24, 0x03	; 3
 624:	88 2f       	mov	r24, r24
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	88 0f       	add	r24, r24
 62a:	99 1f       	adc	r25, r25
 62c:	fc 01       	movw	r30, r24
 62e:	e4 58       	subi	r30, 0x84	; 132
 630:	ff 4f       	sbci	r31, 0xFF	; 255
 632:	a0 81       	ld	r26, Z
 634:	b1 81       	ldd	r27, Z+1	; 0x01
 636:	e9 81       	ldd	r30, Y+1	; 0x01
 638:	fa 81       	ldd	r31, Y+2	; 0x02
 63a:	80 81       	ld	r24, Z
 63c:	83 70       	andi	r24, 0x03	; 3
 63e:	88 2f       	mov	r24, r24
 640:	90 e0       	ldi	r25, 0x00	; 0
 642:	88 0f       	add	r24, r24
 644:	99 1f       	adc	r25, r25
 646:	fc 01       	movw	r30, r24
 648:	e4 58       	subi	r30, 0x84	; 132
 64a:	ff 4f       	sbci	r31, 0xFF	; 255
 64c:	01 90       	ld	r0, Z+
 64e:	f0 81       	ld	r31, Z
 650:	e0 2d       	mov	r30, r0
 652:	80 81       	ld	r24, Z
 654:	48 2f       	mov	r20, r24
 656:	e9 81       	ldd	r30, Y+1	; 0x01
 658:	fa 81       	ldd	r31, Y+2	; 0x02
 65a:	80 81       	ld	r24, Z
 65c:	86 95       	lsr	r24
 65e:	86 95       	lsr	r24
 660:	8f 70       	andi	r24, 0x0F	; 15
 662:	28 2f       	mov	r18, r24
 664:	30 e0       	ldi	r19, 0x00	; 0
 666:	81 e0       	ldi	r24, 0x01	; 1
 668:	90 e0       	ldi	r25, 0x00	; 0
 66a:	02 2e       	mov	r0, r18
 66c:	02 c0       	rjmp	.+4      	; 0x672 <DIO_enuSetPinDirection+0x9e>
 66e:	88 0f       	add	r24, r24
 670:	99 1f       	adc	r25, r25
 672:	0a 94       	dec	r0
 674:	e2 f7       	brpl	.-8      	; 0x66e <DIO_enuSetPinDirection+0x9a>
 676:	84 2b       	or	r24, r20
 678:	8c 93       	st	X, r24
 67a:	30 c0       	rjmp	.+96     	; 0x6dc <DIO_enuSetPinDirection+0x108>
			//pstrCurrentPinLoc->u8Direction=DIO_OUTPUT;
		}
		else{
			BIT_CLEAR(* u8KarrDdra [pstrCurrentPinLoc->u8PortIdx ] ,  pstrCurrentPinLoc->u8PinIdx);
 67c:	e9 81       	ldd	r30, Y+1	; 0x01
 67e:	fa 81       	ldd	r31, Y+2	; 0x02
 680:	80 81       	ld	r24, Z
 682:	83 70       	andi	r24, 0x03	; 3
 684:	88 2f       	mov	r24, r24
 686:	90 e0       	ldi	r25, 0x00	; 0
 688:	88 0f       	add	r24, r24
 68a:	99 1f       	adc	r25, r25
 68c:	fc 01       	movw	r30, r24
 68e:	e4 58       	subi	r30, 0x84	; 132
 690:	ff 4f       	sbci	r31, 0xFF	; 255
 692:	a0 81       	ld	r26, Z
 694:	b1 81       	ldd	r27, Z+1	; 0x01
 696:	e9 81       	ldd	r30, Y+1	; 0x01
 698:	fa 81       	ldd	r31, Y+2	; 0x02
 69a:	80 81       	ld	r24, Z
 69c:	83 70       	andi	r24, 0x03	; 3
 69e:	88 2f       	mov	r24, r24
 6a0:	90 e0       	ldi	r25, 0x00	; 0
 6a2:	88 0f       	add	r24, r24
 6a4:	99 1f       	adc	r25, r25
 6a6:	fc 01       	movw	r30, r24
 6a8:	e4 58       	subi	r30, 0x84	; 132
 6aa:	ff 4f       	sbci	r31, 0xFF	; 255
 6ac:	01 90       	ld	r0, Z+
 6ae:	f0 81       	ld	r31, Z
 6b0:	e0 2d       	mov	r30, r0
 6b2:	80 81       	ld	r24, Z
 6b4:	48 2f       	mov	r20, r24
 6b6:	e9 81       	ldd	r30, Y+1	; 0x01
 6b8:	fa 81       	ldd	r31, Y+2	; 0x02
 6ba:	80 81       	ld	r24, Z
 6bc:	86 95       	lsr	r24
 6be:	86 95       	lsr	r24
 6c0:	8f 70       	andi	r24, 0x0F	; 15
 6c2:	28 2f       	mov	r18, r24
 6c4:	30 e0       	ldi	r19, 0x00	; 0
 6c6:	81 e0       	ldi	r24, 0x01	; 1
 6c8:	90 e0       	ldi	r25, 0x00	; 0
 6ca:	02 2e       	mov	r0, r18
 6cc:	02 c0       	rjmp	.+4      	; 0x6d2 <DIO_enuSetPinDirection+0xfe>
 6ce:	88 0f       	add	r24, r24
 6d0:	99 1f       	adc	r25, r25
 6d2:	0a 94       	dec	r0
 6d4:	e2 f7       	brpl	.-8      	; 0x6ce <DIO_enuSetPinDirection+0xfa>
 6d6:	80 95       	com	r24
 6d8:	84 23       	and	r24, r20
 6da:	8c 93       	st	X, r24
			//pstrCurrentPinLoc->u8Direction=DIO_INPUT;

		}

		status=STD_enuOK;
 6dc:	1b 82       	std	Y+3, r1	; 0x03

	}



	return  status ;
 6de:	8b 81       	ldd	r24, Y+3	; 0x03
}
 6e0:	0f 90       	pop	r0
 6e2:	0f 90       	pop	r0
 6e4:	0f 90       	pop	r0
 6e6:	0f 90       	pop	r0
 6e8:	0f 90       	pop	r0
 6ea:	cf 91       	pop	r28
 6ec:	df 91       	pop	r29
 6ee:	08 95       	ret

000006f0 <DIO_enuSetPortValue>:



STD_tenuReturn DIO_enuSetPortValue(u8 u8PortIdxCpy,u8 u8ValueCpy){
 6f0:	df 93       	push	r29
 6f2:	cf 93       	push	r28
 6f4:	00 d0       	rcall	.+0      	; 0x6f6 <DIO_enuSetPortValue+0x6>
 6f6:	00 d0       	rcall	.+0      	; 0x6f8 <DIO_enuSetPortValue+0x8>
 6f8:	0f 92       	push	r0
 6fa:	cd b7       	in	r28, 0x3d	; 61
 6fc:	de b7       	in	r29, 0x3e	; 62
 6fe:	8c 83       	std	Y+4, r24	; 0x04
 700:	6d 83       	std	Y+5, r22	; 0x05

	 */

	STD_tenuReturn status;

	if( u8PortIdxCpy>=DIO_PORT_NUM  ){
 702:	8c 81       	ldd	r24, Y+4	; 0x04
 704:	82 30       	cpi	r24, 0x02	; 2
 706:	18 f0       	brcs	.+6      	; 0x70e <DIO_enuSetPortValue+0x1e>

		status=STD_enuOutOfRange;
 708:	81 e0       	ldi	r24, 0x01	; 1
 70a:	8b 83       	std	Y+3, r24	; 0x03
 70c:	21 c0       	rjmp	.+66     	; 0x750 <DIO_enuSetPortValue+0x60>

	}
	else{

		const DIO_tstrPORT *pstrCurrentPORTLoc= &DIO_kastrPortCg[u8PortIdxCpy];
 70e:	8c 81       	ldd	r24, Y+4	; 0x04
 710:	28 2f       	mov	r18, r24
 712:	30 e0       	ldi	r19, 0x00	; 0
 714:	c9 01       	movw	r24, r18
 716:	88 0f       	add	r24, r24
 718:	99 1f       	adc	r25, r25
 71a:	88 0f       	add	r24, r24
 71c:	99 1f       	adc	r25, r25
 71e:	82 0f       	add	r24, r18
 720:	93 1f       	adc	r25, r19
 722:	86 59       	subi	r24, 0x96	; 150
 724:	9f 4f       	sbci	r25, 0xFF	; 255
 726:	9a 83       	std	Y+2, r25	; 0x02
 728:	89 83       	std	Y+1, r24	; 0x01

		* u8KarrPorts[pstrCurrentPORTLoc->u8PortIdx]= u8ValueCpy & pstrCurrentPORTLoc->u8Mask;
 72a:	e9 81       	ldd	r30, Y+1	; 0x01
 72c:	fa 81       	ldd	r31, Y+2	; 0x02
 72e:	80 81       	ld	r24, Z
 730:	88 2f       	mov	r24, r24
 732:	90 e0       	ldi	r25, 0x00	; 0
 734:	88 0f       	add	r24, r24
 736:	99 1f       	adc	r25, r25
 738:	fc 01       	movw	r30, r24
 73a:	ec 58       	subi	r30, 0x8C	; 140
 73c:	ff 4f       	sbci	r31, 0xFF	; 255
 73e:	a0 81       	ld	r26, Z
 740:	b1 81       	ldd	r27, Z+1	; 0x01
 742:	e9 81       	ldd	r30, Y+1	; 0x01
 744:	fa 81       	ldd	r31, Y+2	; 0x02
 746:	91 81       	ldd	r25, Z+1	; 0x01
 748:	8d 81       	ldd	r24, Y+5	; 0x05
 74a:	89 23       	and	r24, r25
 74c:	8c 93       	st	X, r24
		status=STD_enuOK;
 74e:	1b 82       	std	Y+3, r1	; 0x03

	}

	return status;
 750:	8b 81       	ldd	r24, Y+3	; 0x03
}
 752:	0f 90       	pop	r0
 754:	0f 90       	pop	r0
 756:	0f 90       	pop	r0
 758:	0f 90       	pop	r0
 75a:	0f 90       	pop	r0
 75c:	cf 91       	pop	r28
 75e:	df 91       	pop	r29
 760:	08 95       	ret

00000762 <DIO_enuGetPortValue>:
			pu8ValueCpy: pointer to read the value.
		Return: retutn execution State.
				STD_enuOK,
				STD_enuOutOfRange*/

STD_tenuReturn DIO_enuGetPortValue(u8 u8PortIdxCpy,u8 * pu8ValueCpy){
 762:	df 93       	push	r29
 764:	cf 93       	push	r28
 766:	00 d0       	rcall	.+0      	; 0x768 <DIO_enuGetPortValue+0x6>
 768:	00 d0       	rcall	.+0      	; 0x76a <DIO_enuGetPortValue+0x8>
 76a:	00 d0       	rcall	.+0      	; 0x76c <DIO_enuGetPortValue+0xa>
 76c:	cd b7       	in	r28, 0x3d	; 61
 76e:	de b7       	in	r29, 0x3e	; 62
 770:	8c 83       	std	Y+4, r24	; 0x04
 772:	7e 83       	std	Y+6, r23	; 0x06
 774:	6d 83       	std	Y+5, r22	; 0x05

	STD_tenuReturn status;


	if( u8PortIdxCpy>=DIO_PORT_NUM  ){
 776:	8c 81       	ldd	r24, Y+4	; 0x04
 778:	82 30       	cpi	r24, 0x02	; 2
 77a:	18 f0       	brcs	.+6      	; 0x782 <DIO_enuGetPortValue+0x20>

		status=STD_enuOutOfRange;
 77c:	81 e0       	ldi	r24, 0x01	; 1
 77e:	8b 83       	std	Y+3, r24	; 0x03
 780:	27 c0       	rjmp	.+78     	; 0x7d0 <DIO_enuGetPortValue+0x6e>

	}
	else if(pu8ValueCpy==STD_NULL){
 782:	8d 81       	ldd	r24, Y+5	; 0x05
 784:	9e 81       	ldd	r25, Y+6	; 0x06
 786:	00 97       	sbiw	r24, 0x00	; 0
 788:	19 f4       	brne	.+6      	; 0x790 <DIO_enuGetPortValue+0x2e>

		status= STD_enuNullPtr;
 78a:	83 e0       	ldi	r24, 0x03	; 3
 78c:	8b 83       	std	Y+3, r24	; 0x03
 78e:	20 c0       	rjmp	.+64     	; 0x7d0 <DIO_enuGetPortValue+0x6e>

	}
	else {

		//u8 * temptr=
		const DIO_tstrPORT *pstrCurrentPORTLoc= &DIO_kastrPortCg[u8PortIdxCpy];
 790:	8c 81       	ldd	r24, Y+4	; 0x04
 792:	28 2f       	mov	r18, r24
 794:	30 e0       	ldi	r19, 0x00	; 0
 796:	c9 01       	movw	r24, r18
 798:	88 0f       	add	r24, r24
 79a:	99 1f       	adc	r25, r25
 79c:	88 0f       	add	r24, r24
 79e:	99 1f       	adc	r25, r25
 7a0:	82 0f       	add	r24, r18
 7a2:	93 1f       	adc	r25, r19
 7a4:	86 59       	subi	r24, 0x96	; 150
 7a6:	9f 4f       	sbci	r25, 0xFF	; 255
 7a8:	9a 83       	std	Y+2, r25	; 0x02
 7aa:	89 83       	std	Y+1, r24	; 0x01

		*pu8ValueCpy= *u8KarrPins[pstrCurrentPORTLoc->u8PortIdx];
 7ac:	e9 81       	ldd	r30, Y+1	; 0x01
 7ae:	fa 81       	ldd	r31, Y+2	; 0x02
 7b0:	80 81       	ld	r24, Z
 7b2:	88 2f       	mov	r24, r24
 7b4:	90 e0       	ldi	r25, 0x00	; 0
 7b6:	88 0f       	add	r24, r24
 7b8:	99 1f       	adc	r25, r25
 7ba:	fc 01       	movw	r30, r24
 7bc:	ec 57       	subi	r30, 0x7C	; 124
 7be:	ff 4f       	sbci	r31, 0xFF	; 255
 7c0:	01 90       	ld	r0, Z+
 7c2:	f0 81       	ld	r31, Z
 7c4:	e0 2d       	mov	r30, r0
 7c6:	80 81       	ld	r24, Z
 7c8:	ed 81       	ldd	r30, Y+5	; 0x05
 7ca:	fe 81       	ldd	r31, Y+6	; 0x06
 7cc:	80 83       	st	Z, r24
		status= STD_enuOK;
 7ce:	1b 82       	std	Y+3, r1	; 0x03

	}

	return status;
 7d0:	8b 81       	ldd	r24, Y+3	; 0x03
}
 7d2:	26 96       	adiw	r28, 0x06	; 6
 7d4:	0f b6       	in	r0, 0x3f	; 63
 7d6:	f8 94       	cli
 7d8:	de bf       	out	0x3e, r29	; 62
 7da:	0f be       	out	0x3f, r0	; 63
 7dc:	cd bf       	out	0x3d, r28	; 61
 7de:	cf 91       	pop	r28
 7e0:	df 91       	pop	r29
 7e2:	08 95       	ret

000007e4 <DIO_enuSetPortDirecrion>:



STD_tenuReturn DIO_enuSetPortDirecrion(u8 u8PortIdxCpy,u8 u8DirCpy){
 7e4:	df 93       	push	r29
 7e6:	cf 93       	push	r28
 7e8:	00 d0       	rcall	.+0      	; 0x7ea <DIO_enuSetPortDirecrion+0x6>
 7ea:	00 d0       	rcall	.+0      	; 0x7ec <DIO_enuSetPortDirecrion+0x8>
 7ec:	0f 92       	push	r0
 7ee:	cd b7       	in	r28, 0x3d	; 61
 7f0:	de b7       	in	r29, 0x3e	; 62
 7f2:	8c 83       	std	Y+4, r24	; 0x04
 7f4:	6d 83       	std	Y+5, r22	; 0x05
				STD_enuNOK.
	 */

	STD_tenuReturn status;

	if( u8PortIdxCpy>=DIO_PORT_NUM  ){
 7f6:	8c 81       	ldd	r24, Y+4	; 0x04
 7f8:	82 30       	cpi	r24, 0x02	; 2
 7fa:	18 f0       	brcs	.+6      	; 0x802 <DIO_enuSetPortDirecrion+0x1e>

		status=STD_enuOutOfRange;
 7fc:	81 e0       	ldi	r24, 0x01	; 1
 7fe:	8b 83       	std	Y+3, r24	; 0x03
 800:	21 c0       	rjmp	.+66     	; 0x844 <DIO_enuSetPortDirecrion+0x60>

	}
	else{

		const DIO_tstrPORT *pstrCurrentPORTLoc= &DIO_kastrPortCg[u8PortIdxCpy];
 802:	8c 81       	ldd	r24, Y+4	; 0x04
 804:	28 2f       	mov	r18, r24
 806:	30 e0       	ldi	r19, 0x00	; 0
 808:	c9 01       	movw	r24, r18
 80a:	88 0f       	add	r24, r24
 80c:	99 1f       	adc	r25, r25
 80e:	88 0f       	add	r24, r24
 810:	99 1f       	adc	r25, r25
 812:	82 0f       	add	r24, r18
 814:	93 1f       	adc	r25, r19
 816:	86 59       	subi	r24, 0x96	; 150
 818:	9f 4f       	sbci	r25, 0xFF	; 255
 81a:	9a 83       	std	Y+2, r25	; 0x02
 81c:	89 83       	std	Y+1, r24	; 0x01

		* u8KarrDdra[pstrCurrentPORTLoc->u8PortIdx]= u8DirCpy & pstrCurrentPORTLoc->u8Mask;
 81e:	e9 81       	ldd	r30, Y+1	; 0x01
 820:	fa 81       	ldd	r31, Y+2	; 0x02
 822:	80 81       	ld	r24, Z
 824:	88 2f       	mov	r24, r24
 826:	90 e0       	ldi	r25, 0x00	; 0
 828:	88 0f       	add	r24, r24
 82a:	99 1f       	adc	r25, r25
 82c:	fc 01       	movw	r30, r24
 82e:	e4 58       	subi	r30, 0x84	; 132
 830:	ff 4f       	sbci	r31, 0xFF	; 255
 832:	a0 81       	ld	r26, Z
 834:	b1 81       	ldd	r27, Z+1	; 0x01
 836:	e9 81       	ldd	r30, Y+1	; 0x01
 838:	fa 81       	ldd	r31, Y+2	; 0x02
 83a:	91 81       	ldd	r25, Z+1	; 0x01
 83c:	8d 81       	ldd	r24, Y+5	; 0x05
 83e:	89 23       	and	r24, r25
 840:	8c 93       	st	X, r24
		status=STD_enuOK;
 842:	1b 82       	std	Y+3, r1	; 0x03


	}

	return status;
 844:	8b 81       	ldd	r24, Y+3	; 0x03

}
 846:	0f 90       	pop	r0
 848:	0f 90       	pop	r0
 84a:	0f 90       	pop	r0
 84c:	0f 90       	pop	r0
 84e:	0f 90       	pop	r0
 850:	cf 91       	pop	r28
 852:	df 91       	pop	r29
 854:	08 95       	ret

00000856 <main>:
#include "DIO_int.h"
#include "STD_BITMAN.h"



int main(void){
 856:	df 93       	push	r29
 858:	cf 93       	push	r28
 85a:	00 d0       	rcall	.+0      	; 0x85c <main+0x6>
 85c:	00 d0       	rcall	.+0      	; 0x85e <main+0x8>
 85e:	cd b7       	in	r28, 0x3d	; 61
 860:	de b7       	in	r29, 0x3e	; 62

	DIO_vidInit();
 862:	0e 94 41 00 	call	0x82	; 0x82 <DIO_vidInit>
	u8 u8CurrentLED=0;
 866:	1b 82       	std	Y+3, r1	; 0x03



	while(1){

		u8 switch_status=0;
 868:	1c 82       	std	Y+4, r1	; 0x04
		DIO_enuGetPortValue(1, &switch_status);
 86a:	9e 01       	movw	r18, r28
 86c:	2c 5f       	subi	r18, 0xFC	; 252
 86e:	3f 4f       	sbci	r19, 0xFF	; 255
 870:	81 e0       	ldi	r24, 0x01	; 1
 872:	b9 01       	movw	r22, r18
 874:	0e 94 b1 03 	call	0x762	; 0x762 <DIO_enuGetPortValue>


		u8 u8Switch1=BIT_GET(switch_status,0);
 878:	8c 81       	ldd	r24, Y+4	; 0x04
 87a:	81 70       	andi	r24, 0x01	; 1
 87c:	8a 83       	std	Y+2, r24	; 0x02
		//DIO_enuGetPinValue(3,&u8Switch1);
		u8 u8Switch2=BIT_GET(switch_status,1);
 87e:	8c 81       	ldd	r24, Y+4	; 0x04
 880:	86 95       	lsr	r24
 882:	81 70       	andi	r24, 0x01	; 1
 884:	89 83       	std	Y+1, r24	; 0x01

		 DIO_enuSetPortValue(0,u8Switch1);
 886:	80 e0       	ldi	r24, 0x00	; 0
 888:	6a 81       	ldd	r22, Y+2	; 0x02
 88a:	0e 94 78 03 	call	0x6f0	; 0x6f0 <DIO_enuSetPortValue>
 88e:	ec cf       	rjmp	.-40     	; 0x868 <__stack+0x9>

00000890 <_exit>:
 890:	f8 94       	cli

00000892 <__stop_program>:
 892:	ff cf       	rjmp	.-2      	; 0x892 <__stop_program>
