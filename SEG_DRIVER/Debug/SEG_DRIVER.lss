
SEG_DRIVER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001d7e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  00001d7e  00001e12  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  008000a0  008000a0  00001e52  2**0
                  ALLOC
  3 .debug_aranges 000001e8  00000000  00000000  00001e52  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000002f5  00000000  00000000  0000203a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000028ef  00000000  00000000  0000232f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001369  00000000  00000000  00004c1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000017d2  00000000  00000000  00005f87  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000250  00000000  00000000  0000775c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000649  00000000  00000000  000079ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007ce  00000000  00000000  00007ff5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e0  00000000  00000000  000087c3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e7       	ldi	r30, 0x7E	; 126
      68:	fd e1       	ldi	r31, 0x1D	; 29
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3a       	cpi	r26, 0xA0	; 160
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 ea       	ldi	r26, 0xA0	; 160
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 3a       	cpi	r26, 0xA4	; 164
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 aa 0b 	call	0x1754	; 0x1754 <main>
      8a:	0c 94 bd 0e 	jmp	0x1d7a	; 0x1d7a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 86 0e 	jmp	0x1d0c	; 0x1d0c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a2 0e 	jmp	0x1d44	; 0x1d44 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 92 0e 	jmp	0x1d24	; 0x1d24 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ae 0e 	jmp	0x1d5c	; 0x1d5c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 92 0e 	jmp	0x1d24	; 0x1d24 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ae 0e 	jmp	0x1d5c	; 0x1d5c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 86 0e 	jmp	0x1d0c	; 0x1d0c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a2 0e 	jmp	0x1d44	; 0x1d44 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 92 0e 	jmp	0x1d24	; 0x1d24 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 ae 0e 	jmp	0x1d5c	; 0x1d5c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 92 0e 	jmp	0x1d24	; 0x1d24 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 ae 0e 	jmp	0x1d5c	; 0x1d5c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 92 0e 	jmp	0x1d24	; 0x1d24 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 ae 0e 	jmp	0x1d5c	; 0x1d5c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 96 0e 	jmp	0x1d2c	; 0x1d2c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 b2 0e 	jmp	0x1d64	; 0x1d64 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_vidInit>:
static u8*  const u8KarrPorts []={&PORTA, &PORTB, &PORTC, &PORTD};
static u8*  const u8KarrDdra  []={&DDRA, &DDRB, &DDRC, &DDRD};
static u8*  const u8KarrPins  []={&PINA, &PINB, &PINC, &PIND};


void DIO_vidInit(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	27 97       	sbiw	r28, 0x07	; 7
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61





	u8 u8PinIdxLoc=0;
     b5a:	1f 82       	std	Y+7, r1	; 0x07

	for (u8PinIdxLoc = 0; u8PinIdxLoc < DIO_PIN_NUM; ++u8PinIdxLoc) {
     b5c:	1f 82       	std	Y+7, r1	; 0x07
     b5e:	46 c1       	rjmp	.+652    	; 0xdec <DIO_vidInit+0x2a6>


		const DIO_tstrPIN * pstrCurrentPinLoc = & DIO_kastrPinCg[u8PinIdxLoc];
     b60:	8f 81       	ldd	r24, Y+7	; 0x07
     b62:	88 2f       	mov	r24, r24
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	88 0f       	add	r24, r24
     b68:	99 1f       	adc	r25, r25
     b6a:	88 59       	subi	r24, 0x98	; 152
     b6c:	9f 4f       	sbci	r25, 0xFF	; 255
     b6e:	9c 83       	std	Y+4, r25	; 0x04
     b70:	8b 83       	std	Y+3, r24	; 0x03

		if(pstrCurrentPinLoc->u8Direction==DIO_OUTPUT){
     b72:	eb 81       	ldd	r30, Y+3	; 0x03
     b74:	fc 81       	ldd	r31, Y+4	; 0x04
     b76:	80 81       	ld	r24, Z
     b78:	80 74       	andi	r24, 0x40	; 64
     b7a:	88 23       	and	r24, r24
     b7c:	09 f4       	brne	.+2      	; 0xb80 <DIO_vidInit+0x3a>
     b7e:	96 c0       	rjmp	.+300    	; 0xcac <DIO_vidInit+0x166>

			BIT_SET(* u8KarrDdra [pstrCurrentPinLoc->u8PortIdx ] ,  pstrCurrentPinLoc->u8PinIdx);
     b80:	eb 81       	ldd	r30, Y+3	; 0x03
     b82:	fc 81       	ldd	r31, Y+4	; 0x04
     b84:	80 81       	ld	r24, Z
     b86:	83 70       	andi	r24, 0x03	; 3
     b88:	88 2f       	mov	r24, r24
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	88 0f       	add	r24, r24
     b8e:	99 1f       	adc	r25, r25
     b90:	fc 01       	movw	r30, r24
     b92:	e3 58       	subi	r30, 0x83	; 131
     b94:	ff 4f       	sbci	r31, 0xFF	; 255
     b96:	a0 81       	ld	r26, Z
     b98:	b1 81       	ldd	r27, Z+1	; 0x01
     b9a:	eb 81       	ldd	r30, Y+3	; 0x03
     b9c:	fc 81       	ldd	r31, Y+4	; 0x04
     b9e:	80 81       	ld	r24, Z
     ba0:	83 70       	andi	r24, 0x03	; 3
     ba2:	88 2f       	mov	r24, r24
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	88 0f       	add	r24, r24
     ba8:	99 1f       	adc	r25, r25
     baa:	fc 01       	movw	r30, r24
     bac:	e3 58       	subi	r30, 0x83	; 131
     bae:	ff 4f       	sbci	r31, 0xFF	; 255
     bb0:	01 90       	ld	r0, Z+
     bb2:	f0 81       	ld	r31, Z
     bb4:	e0 2d       	mov	r30, r0
     bb6:	80 81       	ld	r24, Z
     bb8:	48 2f       	mov	r20, r24
     bba:	eb 81       	ldd	r30, Y+3	; 0x03
     bbc:	fc 81       	ldd	r31, Y+4	; 0x04
     bbe:	80 81       	ld	r24, Z
     bc0:	86 95       	lsr	r24
     bc2:	86 95       	lsr	r24
     bc4:	8f 70       	andi	r24, 0x0F	; 15
     bc6:	28 2f       	mov	r18, r24
     bc8:	30 e0       	ldi	r19, 0x00	; 0
     bca:	81 e0       	ldi	r24, 0x01	; 1
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	02 2e       	mov	r0, r18
     bd0:	02 c0       	rjmp	.+4      	; 0xbd6 <DIO_vidInit+0x90>
     bd2:	88 0f       	add	r24, r24
     bd4:	99 1f       	adc	r25, r25
     bd6:	0a 94       	dec	r0
     bd8:	e2 f7       	brpl	.-8      	; 0xbd2 <DIO_vidInit+0x8c>
     bda:	84 2b       	or	r24, r20
     bdc:	8c 93       	st	X, r24



			if(pstrCurrentPinLoc->u8InitValue==DIO_HIGH){
     bde:	eb 81       	ldd	r30, Y+3	; 0x03
     be0:	fc 81       	ldd	r31, Y+4	; 0x04
     be2:	80 81       	ld	r24, Z
     be4:	80 78       	andi	r24, 0x80	; 128
     be6:	88 23       	and	r24, r24
     be8:	81 f1       	breq	.+96     	; 0xc4a <DIO_vidInit+0x104>

				BIT_SET(* u8KarrPorts [pstrCurrentPinLoc->u8PortIdx ] ,  pstrCurrentPinLoc->u8PinIdx);
     bea:	eb 81       	ldd	r30, Y+3	; 0x03
     bec:	fc 81       	ldd	r31, Y+4	; 0x04
     bee:	80 81       	ld	r24, Z
     bf0:	83 70       	andi	r24, 0x03	; 3
     bf2:	88 2f       	mov	r24, r24
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	fc 01       	movw	r30, r24
     bfc:	eb 58       	subi	r30, 0x8B	; 139
     bfe:	ff 4f       	sbci	r31, 0xFF	; 255
     c00:	a0 81       	ld	r26, Z
     c02:	b1 81       	ldd	r27, Z+1	; 0x01
     c04:	eb 81       	ldd	r30, Y+3	; 0x03
     c06:	fc 81       	ldd	r31, Y+4	; 0x04
     c08:	80 81       	ld	r24, Z
     c0a:	83 70       	andi	r24, 0x03	; 3
     c0c:	88 2f       	mov	r24, r24
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	88 0f       	add	r24, r24
     c12:	99 1f       	adc	r25, r25
     c14:	fc 01       	movw	r30, r24
     c16:	eb 58       	subi	r30, 0x8B	; 139
     c18:	ff 4f       	sbci	r31, 0xFF	; 255
     c1a:	01 90       	ld	r0, Z+
     c1c:	f0 81       	ld	r31, Z
     c1e:	e0 2d       	mov	r30, r0
     c20:	80 81       	ld	r24, Z
     c22:	48 2f       	mov	r20, r24
     c24:	eb 81       	ldd	r30, Y+3	; 0x03
     c26:	fc 81       	ldd	r31, Y+4	; 0x04
     c28:	80 81       	ld	r24, Z
     c2a:	86 95       	lsr	r24
     c2c:	86 95       	lsr	r24
     c2e:	8f 70       	andi	r24, 0x0F	; 15
     c30:	28 2f       	mov	r18, r24
     c32:	30 e0       	ldi	r19, 0x00	; 0
     c34:	81 e0       	ldi	r24, 0x01	; 1
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	02 2e       	mov	r0, r18
     c3a:	02 c0       	rjmp	.+4      	; 0xc40 <DIO_vidInit+0xfa>
     c3c:	88 0f       	add	r24, r24
     c3e:	99 1f       	adc	r25, r25
     c40:	0a 94       	dec	r0
     c42:	e2 f7       	brpl	.-8      	; 0xc3c <DIO_vidInit+0xf6>
     c44:	84 2b       	or	r24, r20
     c46:	8c 93       	st	X, r24
     c48:	ce c0       	rjmp	.+412    	; 0xde6 <DIO_vidInit+0x2a0>

			}

			else{

				BIT_CLEAR(* u8KarrPorts [pstrCurrentPinLoc->u8PortIdx ] ,  pstrCurrentPinLoc->u8PinIdx);
     c4a:	eb 81       	ldd	r30, Y+3	; 0x03
     c4c:	fc 81       	ldd	r31, Y+4	; 0x04
     c4e:	80 81       	ld	r24, Z
     c50:	83 70       	andi	r24, 0x03	; 3
     c52:	88 2f       	mov	r24, r24
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	88 0f       	add	r24, r24
     c58:	99 1f       	adc	r25, r25
     c5a:	fc 01       	movw	r30, r24
     c5c:	eb 58       	subi	r30, 0x8B	; 139
     c5e:	ff 4f       	sbci	r31, 0xFF	; 255
     c60:	a0 81       	ld	r26, Z
     c62:	b1 81       	ldd	r27, Z+1	; 0x01
     c64:	eb 81       	ldd	r30, Y+3	; 0x03
     c66:	fc 81       	ldd	r31, Y+4	; 0x04
     c68:	80 81       	ld	r24, Z
     c6a:	83 70       	andi	r24, 0x03	; 3
     c6c:	88 2f       	mov	r24, r24
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	88 0f       	add	r24, r24
     c72:	99 1f       	adc	r25, r25
     c74:	fc 01       	movw	r30, r24
     c76:	eb 58       	subi	r30, 0x8B	; 139
     c78:	ff 4f       	sbci	r31, 0xFF	; 255
     c7a:	01 90       	ld	r0, Z+
     c7c:	f0 81       	ld	r31, Z
     c7e:	e0 2d       	mov	r30, r0
     c80:	80 81       	ld	r24, Z
     c82:	48 2f       	mov	r20, r24
     c84:	eb 81       	ldd	r30, Y+3	; 0x03
     c86:	fc 81       	ldd	r31, Y+4	; 0x04
     c88:	80 81       	ld	r24, Z
     c8a:	86 95       	lsr	r24
     c8c:	86 95       	lsr	r24
     c8e:	8f 70       	andi	r24, 0x0F	; 15
     c90:	28 2f       	mov	r18, r24
     c92:	30 e0       	ldi	r19, 0x00	; 0
     c94:	81 e0       	ldi	r24, 0x01	; 1
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	02 2e       	mov	r0, r18
     c9a:	02 c0       	rjmp	.+4      	; 0xca0 <DIO_vidInit+0x15a>
     c9c:	88 0f       	add	r24, r24
     c9e:	99 1f       	adc	r25, r25
     ca0:	0a 94       	dec	r0
     ca2:	e2 f7       	brpl	.-8      	; 0xc9c <DIO_vidInit+0x156>
     ca4:	80 95       	com	r24
     ca6:	84 23       	and	r24, r20
     ca8:	8c 93       	st	X, r24
     caa:	9d c0       	rjmp	.+314    	; 0xde6 <DIO_vidInit+0x2a0>

			}

		}

		else if(pstrCurrentPinLoc->u8Direction==DIO_INPUT){
     cac:	eb 81       	ldd	r30, Y+3	; 0x03
     cae:	fc 81       	ldd	r31, Y+4	; 0x04
     cb0:	80 81       	ld	r24, Z
     cb2:	80 74       	andi	r24, 0x40	; 64
     cb4:	88 23       	and	r24, r24
     cb6:	09 f0       	breq	.+2      	; 0xcba <DIO_vidInit+0x174>
     cb8:	96 c0       	rjmp	.+300    	; 0xde6 <DIO_vidInit+0x2a0>

			BIT_CLEAR(* u8KarrDdra [pstrCurrentPinLoc->u8PortIdx ] ,  pstrCurrentPinLoc->u8PinIdx);
     cba:	eb 81       	ldd	r30, Y+3	; 0x03
     cbc:	fc 81       	ldd	r31, Y+4	; 0x04
     cbe:	80 81       	ld	r24, Z
     cc0:	83 70       	andi	r24, 0x03	; 3
     cc2:	88 2f       	mov	r24, r24
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	88 0f       	add	r24, r24
     cc8:	99 1f       	adc	r25, r25
     cca:	fc 01       	movw	r30, r24
     ccc:	e3 58       	subi	r30, 0x83	; 131
     cce:	ff 4f       	sbci	r31, 0xFF	; 255
     cd0:	a0 81       	ld	r26, Z
     cd2:	b1 81       	ldd	r27, Z+1	; 0x01
     cd4:	eb 81       	ldd	r30, Y+3	; 0x03
     cd6:	fc 81       	ldd	r31, Y+4	; 0x04
     cd8:	80 81       	ld	r24, Z
     cda:	83 70       	andi	r24, 0x03	; 3
     cdc:	88 2f       	mov	r24, r24
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	88 0f       	add	r24, r24
     ce2:	99 1f       	adc	r25, r25
     ce4:	fc 01       	movw	r30, r24
     ce6:	e3 58       	subi	r30, 0x83	; 131
     ce8:	ff 4f       	sbci	r31, 0xFF	; 255
     cea:	01 90       	ld	r0, Z+
     cec:	f0 81       	ld	r31, Z
     cee:	e0 2d       	mov	r30, r0
     cf0:	80 81       	ld	r24, Z
     cf2:	48 2f       	mov	r20, r24
     cf4:	eb 81       	ldd	r30, Y+3	; 0x03
     cf6:	fc 81       	ldd	r31, Y+4	; 0x04
     cf8:	80 81       	ld	r24, Z
     cfa:	86 95       	lsr	r24
     cfc:	86 95       	lsr	r24
     cfe:	8f 70       	andi	r24, 0x0F	; 15
     d00:	28 2f       	mov	r18, r24
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	02 2e       	mov	r0, r18
     d0a:	02 c0       	rjmp	.+4      	; 0xd10 <DIO_vidInit+0x1ca>
     d0c:	88 0f       	add	r24, r24
     d0e:	99 1f       	adc	r25, r25
     d10:	0a 94       	dec	r0
     d12:	e2 f7       	brpl	.-8      	; 0xd0c <DIO_vidInit+0x1c6>
     d14:	80 95       	com	r24
     d16:	84 23       	and	r24, r20
     d18:	8c 93       	st	X, r24



			if(pstrCurrentPinLoc->u8InputMode==DIO_PULLUP){
     d1a:	eb 81       	ldd	r30, Y+3	; 0x03
     d1c:	fc 81       	ldd	r31, Y+4	; 0x04
     d1e:	81 81       	ldd	r24, Z+1	; 0x01
     d20:	81 70       	andi	r24, 0x01	; 1
     d22:	88 23       	and	r24, r24
     d24:	81 f1       	breq	.+96     	; 0xd86 <DIO_vidInit+0x240>

				BIT_SET(* u8KarrPorts [pstrCurrentPinLoc->u8PortIdx ] ,  pstrCurrentPinLoc->u8PinIdx);
     d26:	eb 81       	ldd	r30, Y+3	; 0x03
     d28:	fc 81       	ldd	r31, Y+4	; 0x04
     d2a:	80 81       	ld	r24, Z
     d2c:	83 70       	andi	r24, 0x03	; 3
     d2e:	88 2f       	mov	r24, r24
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	88 0f       	add	r24, r24
     d34:	99 1f       	adc	r25, r25
     d36:	fc 01       	movw	r30, r24
     d38:	eb 58       	subi	r30, 0x8B	; 139
     d3a:	ff 4f       	sbci	r31, 0xFF	; 255
     d3c:	a0 81       	ld	r26, Z
     d3e:	b1 81       	ldd	r27, Z+1	; 0x01
     d40:	eb 81       	ldd	r30, Y+3	; 0x03
     d42:	fc 81       	ldd	r31, Y+4	; 0x04
     d44:	80 81       	ld	r24, Z
     d46:	83 70       	andi	r24, 0x03	; 3
     d48:	88 2f       	mov	r24, r24
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	88 0f       	add	r24, r24
     d4e:	99 1f       	adc	r25, r25
     d50:	fc 01       	movw	r30, r24
     d52:	eb 58       	subi	r30, 0x8B	; 139
     d54:	ff 4f       	sbci	r31, 0xFF	; 255
     d56:	01 90       	ld	r0, Z+
     d58:	f0 81       	ld	r31, Z
     d5a:	e0 2d       	mov	r30, r0
     d5c:	80 81       	ld	r24, Z
     d5e:	48 2f       	mov	r20, r24
     d60:	eb 81       	ldd	r30, Y+3	; 0x03
     d62:	fc 81       	ldd	r31, Y+4	; 0x04
     d64:	80 81       	ld	r24, Z
     d66:	86 95       	lsr	r24
     d68:	86 95       	lsr	r24
     d6a:	8f 70       	andi	r24, 0x0F	; 15
     d6c:	28 2f       	mov	r18, r24
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	81 e0       	ldi	r24, 0x01	; 1
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	02 2e       	mov	r0, r18
     d76:	02 c0       	rjmp	.+4      	; 0xd7c <DIO_vidInit+0x236>
     d78:	88 0f       	add	r24, r24
     d7a:	99 1f       	adc	r25, r25
     d7c:	0a 94       	dec	r0
     d7e:	e2 f7       	brpl	.-8      	; 0xd78 <DIO_vidInit+0x232>
     d80:	84 2b       	or	r24, r20
     d82:	8c 93       	st	X, r24
     d84:	30 c0       	rjmp	.+96     	; 0xde6 <DIO_vidInit+0x2a0>

			}

			else{

				BIT_CLEAR(* u8KarrPorts [pstrCurrentPinLoc->u8PortIdx ] ,  pstrCurrentPinLoc->u8PinIdx);
     d86:	eb 81       	ldd	r30, Y+3	; 0x03
     d88:	fc 81       	ldd	r31, Y+4	; 0x04
     d8a:	80 81       	ld	r24, Z
     d8c:	83 70       	andi	r24, 0x03	; 3
     d8e:	88 2f       	mov	r24, r24
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	88 0f       	add	r24, r24
     d94:	99 1f       	adc	r25, r25
     d96:	fc 01       	movw	r30, r24
     d98:	eb 58       	subi	r30, 0x8B	; 139
     d9a:	ff 4f       	sbci	r31, 0xFF	; 255
     d9c:	a0 81       	ld	r26, Z
     d9e:	b1 81       	ldd	r27, Z+1	; 0x01
     da0:	eb 81       	ldd	r30, Y+3	; 0x03
     da2:	fc 81       	ldd	r31, Y+4	; 0x04
     da4:	80 81       	ld	r24, Z
     da6:	83 70       	andi	r24, 0x03	; 3
     da8:	88 2f       	mov	r24, r24
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	88 0f       	add	r24, r24
     dae:	99 1f       	adc	r25, r25
     db0:	fc 01       	movw	r30, r24
     db2:	eb 58       	subi	r30, 0x8B	; 139
     db4:	ff 4f       	sbci	r31, 0xFF	; 255
     db6:	01 90       	ld	r0, Z+
     db8:	f0 81       	ld	r31, Z
     dba:	e0 2d       	mov	r30, r0
     dbc:	80 81       	ld	r24, Z
     dbe:	48 2f       	mov	r20, r24
     dc0:	eb 81       	ldd	r30, Y+3	; 0x03
     dc2:	fc 81       	ldd	r31, Y+4	; 0x04
     dc4:	80 81       	ld	r24, Z
     dc6:	86 95       	lsr	r24
     dc8:	86 95       	lsr	r24
     dca:	8f 70       	andi	r24, 0x0F	; 15
     dcc:	28 2f       	mov	r18, r24
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	81 e0       	ldi	r24, 0x01	; 1
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	02 2e       	mov	r0, r18
     dd6:	02 c0       	rjmp	.+4      	; 0xddc <DIO_vidInit+0x296>
     dd8:	88 0f       	add	r24, r24
     dda:	99 1f       	adc	r25, r25
     ddc:	0a 94       	dec	r0
     dde:	e2 f7       	brpl	.-8      	; 0xdd8 <DIO_vidInit+0x292>
     de0:	80 95       	com	r24
     de2:	84 23       	and	r24, r20
     de4:	8c 93       	st	X, r24



	u8 u8PinIdxLoc=0;

	for (u8PinIdxLoc = 0; u8PinIdxLoc < DIO_PIN_NUM; ++u8PinIdxLoc) {
     de6:	8f 81       	ldd	r24, Y+7	; 0x07
     de8:	8f 5f       	subi	r24, 0xFF	; 255
     dea:	8f 83       	std	Y+7, r24	; 0x07
     dec:	8f 81       	ldd	r24, Y+7	; 0x07
     dee:	84 30       	cpi	r24, 0x04	; 4
     df0:	08 f4       	brcc	.+2      	; 0xdf4 <DIO_vidInit+0x2ae>
     df2:	b6 ce       	rjmp	.-660    	; 0xb60 <DIO_vidInit+0x1a>
	}




	u8 u8PortNumLoc=0;
     df4:	1e 82       	std	Y+6, r1	; 0x06

	    u8 u8BitIdx;

	    for (u8PortNumLoc = 0; u8PortNumLoc < DIO_PORT_NUM; ++u8PortNumLoc) {
     df6:	1e 82       	std	Y+6, r1	; 0x06
     df8:	bf c0       	rjmp	.+382    	; 0xf78 <DIO_vidInit+0x432>





	        const DIO_tstrPORT * pstrCurrentPortLoc = & DIO_kastrPortCg[u8PortNumLoc];
     dfa:	8e 81       	ldd	r24, Y+6	; 0x06
     dfc:	28 2f       	mov	r18, r24
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	c9 01       	movw	r24, r18
     e02:	88 0f       	add	r24, r24
     e04:	99 1f       	adc	r25, r25
     e06:	88 0f       	add	r24, r24
     e08:	99 1f       	adc	r25, r25
     e0a:	82 0f       	add	r24, r18
     e0c:	93 1f       	adc	r25, r19
     e0e:	80 59       	subi	r24, 0x90	; 144
     e10:	9f 4f       	sbci	r25, 0xFF	; 255
     e12:	9a 83       	std	Y+2, r25	; 0x02
     e14:	89 83       	std	Y+1, r24	; 0x01



	        *(u8KarrDdra[pstrCurrentPortLoc->u8PortIdx])= pstrCurrentPortLoc->u8Direction & pstrCurrentPortLoc->u8Mask;
     e16:	e9 81       	ldd	r30, Y+1	; 0x01
     e18:	fa 81       	ldd	r31, Y+2	; 0x02
     e1a:	80 81       	ld	r24, Z
     e1c:	88 2f       	mov	r24, r24
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	88 0f       	add	r24, r24
     e22:	99 1f       	adc	r25, r25
     e24:	fc 01       	movw	r30, r24
     e26:	e3 58       	subi	r30, 0x83	; 131
     e28:	ff 4f       	sbci	r31, 0xFF	; 255
     e2a:	a0 81       	ld	r26, Z
     e2c:	b1 81       	ldd	r27, Z+1	; 0x01
     e2e:	e9 81       	ldd	r30, Y+1	; 0x01
     e30:	fa 81       	ldd	r31, Y+2	; 0x02
     e32:	92 81       	ldd	r25, Z+2	; 0x02
     e34:	e9 81       	ldd	r30, Y+1	; 0x01
     e36:	fa 81       	ldd	r31, Y+2	; 0x02
     e38:	81 81       	ldd	r24, Z+1	; 0x01
     e3a:	89 23       	and	r24, r25
     e3c:	8c 93       	st	X, r24



	        for(u8BitIdx=0;u8BitIdx<8;u8BitIdx++)
     e3e:	1d 82       	std	Y+5, r1	; 0x05
     e40:	94 c0       	rjmp	.+296    	; 0xf6a <DIO_vidInit+0x424>

	        {

	            if( (BIT_GET(((pstrCurrentPortLoc->u8Direction) & (pstrCurrentPortLoc->u8Mask)),u8BitIdx))==DIO_INPUT)
     e42:	e9 81       	ldd	r30, Y+1	; 0x01
     e44:	fa 81       	ldd	r31, Y+2	; 0x02
     e46:	92 81       	ldd	r25, Z+2	; 0x02
     e48:	e9 81       	ldd	r30, Y+1	; 0x01
     e4a:	fa 81       	ldd	r31, Y+2	; 0x02
     e4c:	81 81       	ldd	r24, Z+1	; 0x01
     e4e:	89 23       	and	r24, r25
     e50:	28 2f       	mov	r18, r24
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	8d 81       	ldd	r24, Y+5	; 0x05
     e56:	88 2f       	mov	r24, r24
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	a9 01       	movw	r20, r18
     e5c:	02 c0       	rjmp	.+4      	; 0xe62 <DIO_vidInit+0x31c>
     e5e:	55 95       	asr	r21
     e60:	47 95       	ror	r20
     e62:	8a 95       	dec	r24
     e64:	e2 f7       	brpl	.-8      	; 0xe5e <DIO_vidInit+0x318>
     e66:	ca 01       	movw	r24, r20
     e68:	81 70       	andi	r24, 0x01	; 1
     e6a:	90 70       	andi	r25, 0x00	; 0
     e6c:	00 97       	sbiw	r24, 0x00	; 0
     e6e:	09 f0       	breq	.+2      	; 0xe72 <DIO_vidInit+0x32c>
     e70:	3d c0       	rjmp	.+122    	; 0xeec <DIO_vidInit+0x3a6>

	            {

	                BIT_ASSGIN((*u8KarrPorts[pstrCurrentPortLoc->u8PortIdx]),u8BitIdx,(pstrCurrentPortLoc->u8InputMode & pstrCurrentPortLoc->u8Mask));
     e72:	e9 81       	ldd	r30, Y+1	; 0x01
     e74:	fa 81       	ldd	r31, Y+2	; 0x02
     e76:	80 81       	ld	r24, Z
     e78:	88 2f       	mov	r24, r24
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	fc 01       	movw	r30, r24
     e82:	eb 58       	subi	r30, 0x8B	; 139
     e84:	ff 4f       	sbci	r31, 0xFF	; 255
     e86:	a0 81       	ld	r26, Z
     e88:	b1 81       	ldd	r27, Z+1	; 0x01
     e8a:	e9 81       	ldd	r30, Y+1	; 0x01
     e8c:	fa 81       	ldd	r31, Y+2	; 0x02
     e8e:	80 81       	ld	r24, Z
     e90:	88 2f       	mov	r24, r24
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	88 0f       	add	r24, r24
     e96:	99 1f       	adc	r25, r25
     e98:	fc 01       	movw	r30, r24
     e9a:	eb 58       	subi	r30, 0x8B	; 139
     e9c:	ff 4f       	sbci	r31, 0xFF	; 255
     e9e:	01 90       	ld	r0, Z+
     ea0:	f0 81       	ld	r31, Z
     ea2:	e0 2d       	mov	r30, r0
     ea4:	80 81       	ld	r24, Z
     ea6:	48 2f       	mov	r20, r24
     ea8:	8d 81       	ldd	r24, Y+5	; 0x05
     eaa:	28 2f       	mov	r18, r24
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	02 c0       	rjmp	.+4      	; 0xeb8 <DIO_vidInit+0x372>
     eb4:	88 0f       	add	r24, r24
     eb6:	99 1f       	adc	r25, r25
     eb8:	2a 95       	dec	r18
     eba:	e2 f7       	brpl	.-8      	; 0xeb4 <DIO_vidInit+0x36e>
     ebc:	80 95       	com	r24
     ebe:	48 23       	and	r20, r24
     ec0:	e9 81       	ldd	r30, Y+1	; 0x01
     ec2:	fa 81       	ldd	r31, Y+2	; 0x02
     ec4:	94 81       	ldd	r25, Z+4	; 0x04
     ec6:	e9 81       	ldd	r30, Y+1	; 0x01
     ec8:	fa 81       	ldd	r31, Y+2	; 0x02
     eca:	81 81       	ldd	r24, Z+1	; 0x01
     ecc:	89 23       	and	r24, r25
     ece:	28 2f       	mov	r18, r24
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	8d 81       	ldd	r24, Y+5	; 0x05
     ed4:	88 2f       	mov	r24, r24
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	b9 01       	movw	r22, r18
     eda:	02 c0       	rjmp	.+4      	; 0xee0 <DIO_vidInit+0x39a>
     edc:	66 0f       	add	r22, r22
     ede:	77 1f       	adc	r23, r23
     ee0:	8a 95       	dec	r24
     ee2:	e2 f7       	brpl	.-8      	; 0xedc <DIO_vidInit+0x396>
     ee4:	cb 01       	movw	r24, r22
     ee6:	84 2b       	or	r24, r20
     ee8:	8c 93       	st	X, r24
     eea:	3c c0       	rjmp	.+120    	; 0xf64 <DIO_vidInit+0x41e>

	            }else{

	                BIT_ASSGIN((*u8KarrPorts[pstrCurrentPortLoc->u8PortIdx]),u8BitIdx,(pstrCurrentPortLoc->u8InitValue & pstrCurrentPortLoc->u8Mask));
     eec:	e9 81       	ldd	r30, Y+1	; 0x01
     eee:	fa 81       	ldd	r31, Y+2	; 0x02
     ef0:	80 81       	ld	r24, Z
     ef2:	88 2f       	mov	r24, r24
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	88 0f       	add	r24, r24
     ef8:	99 1f       	adc	r25, r25
     efa:	fc 01       	movw	r30, r24
     efc:	eb 58       	subi	r30, 0x8B	; 139
     efe:	ff 4f       	sbci	r31, 0xFF	; 255
     f00:	a0 81       	ld	r26, Z
     f02:	b1 81       	ldd	r27, Z+1	; 0x01
     f04:	e9 81       	ldd	r30, Y+1	; 0x01
     f06:	fa 81       	ldd	r31, Y+2	; 0x02
     f08:	80 81       	ld	r24, Z
     f0a:	88 2f       	mov	r24, r24
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	88 0f       	add	r24, r24
     f10:	99 1f       	adc	r25, r25
     f12:	fc 01       	movw	r30, r24
     f14:	eb 58       	subi	r30, 0x8B	; 139
     f16:	ff 4f       	sbci	r31, 0xFF	; 255
     f18:	01 90       	ld	r0, Z+
     f1a:	f0 81       	ld	r31, Z
     f1c:	e0 2d       	mov	r30, r0
     f1e:	80 81       	ld	r24, Z
     f20:	48 2f       	mov	r20, r24
     f22:	8d 81       	ldd	r24, Y+5	; 0x05
     f24:	28 2f       	mov	r18, r24
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	02 c0       	rjmp	.+4      	; 0xf32 <DIO_vidInit+0x3ec>
     f2e:	88 0f       	add	r24, r24
     f30:	99 1f       	adc	r25, r25
     f32:	2a 95       	dec	r18
     f34:	e2 f7       	brpl	.-8      	; 0xf2e <DIO_vidInit+0x3e8>
     f36:	80 95       	com	r24
     f38:	48 23       	and	r20, r24
     f3a:	e9 81       	ldd	r30, Y+1	; 0x01
     f3c:	fa 81       	ldd	r31, Y+2	; 0x02
     f3e:	93 81       	ldd	r25, Z+3	; 0x03
     f40:	e9 81       	ldd	r30, Y+1	; 0x01
     f42:	fa 81       	ldd	r31, Y+2	; 0x02
     f44:	81 81       	ldd	r24, Z+1	; 0x01
     f46:	89 23       	and	r24, r25
     f48:	28 2f       	mov	r18, r24
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	8d 81       	ldd	r24, Y+5	; 0x05
     f4e:	88 2f       	mov	r24, r24
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	b9 01       	movw	r22, r18
     f54:	02 c0       	rjmp	.+4      	; 0xf5a <DIO_vidInit+0x414>
     f56:	66 0f       	add	r22, r22
     f58:	77 1f       	adc	r23, r23
     f5a:	8a 95       	dec	r24
     f5c:	e2 f7       	brpl	.-8      	; 0xf56 <DIO_vidInit+0x410>
     f5e:	cb 01       	movw	r24, r22
     f60:	84 2b       	or	r24, r20
     f62:	8c 93       	st	X, r24

	        *(u8KarrDdra[pstrCurrentPortLoc->u8PortIdx])= pstrCurrentPortLoc->u8Direction & pstrCurrentPortLoc->u8Mask;



	        for(u8BitIdx=0;u8BitIdx<8;u8BitIdx++)
     f64:	8d 81       	ldd	r24, Y+5	; 0x05
     f66:	8f 5f       	subi	r24, 0xFF	; 255
     f68:	8d 83       	std	Y+5, r24	; 0x05
     f6a:	8d 81       	ldd	r24, Y+5	; 0x05
     f6c:	88 30       	cpi	r24, 0x08	; 8
     f6e:	08 f4       	brcc	.+2      	; 0xf72 <DIO_vidInit+0x42c>
     f70:	68 cf       	rjmp	.-304    	; 0xe42 <DIO_vidInit+0x2fc>

	u8 u8PortNumLoc=0;

	    u8 u8BitIdx;

	    for (u8PortNumLoc = 0; u8PortNumLoc < DIO_PORT_NUM; ++u8PortNumLoc) {
     f72:	8e 81       	ldd	r24, Y+6	; 0x06
     f74:	8f 5f       	subi	r24, 0xFF	; 255
     f76:	8e 83       	std	Y+6, r24	; 0x06
     f78:	8e 81       	ldd	r24, Y+6	; 0x06
     f7a:	88 23       	and	r24, r24
     f7c:	09 f4       	brne	.+2      	; 0xf80 <DIO_vidInit+0x43a>
     f7e:	3d cf       	rjmp	.-390    	; 0xdfa <DIO_vidInit+0x2b4>





}
     f80:	27 96       	adiw	r28, 0x07	; 7
     f82:	0f b6       	in	r0, 0x3f	; 63
     f84:	f8 94       	cli
     f86:	de bf       	out	0x3e, r29	; 62
     f88:	0f be       	out	0x3f, r0	; 63
     f8a:	cd bf       	out	0x3d, r28	; 61
     f8c:	cf 91       	pop	r28
     f8e:	df 91       	pop	r29
     f90:	08 95       	ret

00000f92 <DIO_enuSetPinValue>:


STD_tenuReturn DIO_enuSetPinValue(u8 u8PinIdxCpy,u8 u8ValueCpy){
     f92:	df 93       	push	r29
     f94:	cf 93       	push	r28
     f96:	00 d0       	rcall	.+0      	; 0xf98 <DIO_enuSetPinValue+0x6>
     f98:	00 d0       	rcall	.+0      	; 0xf9a <DIO_enuSetPinValue+0x8>
     f9a:	0f 92       	push	r0
     f9c:	cd b7       	in	r28, 0x3d	; 61
     f9e:	de b7       	in	r29, 0x3e	; 62
     fa0:	8c 83       	std	Y+4, r24	; 0x04
     fa2:	6d 83       	std	Y+5, r22	; 0x05



	STD_tenuReturn status;

	if( u8PinIdxCpy>=DIO_PIN_NUM  ){
     fa4:	8c 81       	ldd	r24, Y+4	; 0x04
     fa6:	84 30       	cpi	r24, 0x04	; 4
     fa8:	18 f0       	brcs	.+6      	; 0xfb0 <DIO_enuSetPinValue+0x1e>

		status=STD_enuOutOfRange;
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	8b 83       	std	Y+3, r24	; 0x03
     fae:	76 c0       	rjmp	.+236    	; 0x109c <DIO_enuSetPinValue+0x10a>

	}
	else if( (u8ValueCpy!=DIO_HIGH)&&(u8ValueCpy!=DIO_LOW) ){
     fb0:	8d 81       	ldd	r24, Y+5	; 0x05
     fb2:	81 30       	cpi	r24, 0x01	; 1
     fb4:	31 f0       	breq	.+12     	; 0xfc2 <DIO_enuSetPinValue+0x30>
     fb6:	8d 81       	ldd	r24, Y+5	; 0x05
     fb8:	88 23       	and	r24, r24
     fba:	19 f0       	breq	.+6      	; 0xfc2 <DIO_enuSetPinValue+0x30>

		status=STD_enuNOK;
     fbc:	82 e0       	ldi	r24, 0x02	; 2
     fbe:	8b 83       	std	Y+3, r24	; 0x03
     fc0:	6d c0       	rjmp	.+218    	; 0x109c <DIO_enuSetPinValue+0x10a>

	else
	{


		const DIO_tstrPIN *pstrCurrentPinLoc=&DIO_kastrPinCg[u8PinIdxCpy];
     fc2:	8c 81       	ldd	r24, Y+4	; 0x04
     fc4:	88 2f       	mov	r24, r24
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	88 0f       	add	r24, r24
     fca:	99 1f       	adc	r25, r25
     fcc:	88 59       	subi	r24, 0x98	; 152
     fce:	9f 4f       	sbci	r25, 0xFF	; 255
     fd0:	9a 83       	std	Y+2, r25	; 0x02
     fd2:	89 83       	std	Y+1, r24	; 0x01

		if(u8ValueCpy==DIO_HIGH){
     fd4:	8d 81       	ldd	r24, Y+5	; 0x05
     fd6:	81 30       	cpi	r24, 0x01	; 1
     fd8:	81 f5       	brne	.+96     	; 0x103a <DIO_enuSetPinValue+0xa8>
			BIT_SET(* u8KarrPorts [pstrCurrentPinLoc->u8PortIdx ] ,  pstrCurrentPinLoc->u8PinIdx);
     fda:	e9 81       	ldd	r30, Y+1	; 0x01
     fdc:	fa 81       	ldd	r31, Y+2	; 0x02
     fde:	80 81       	ld	r24, Z
     fe0:	83 70       	andi	r24, 0x03	; 3
     fe2:	88 2f       	mov	r24, r24
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	88 0f       	add	r24, r24
     fe8:	99 1f       	adc	r25, r25
     fea:	fc 01       	movw	r30, r24
     fec:	eb 58       	subi	r30, 0x8B	; 139
     fee:	ff 4f       	sbci	r31, 0xFF	; 255
     ff0:	a0 81       	ld	r26, Z
     ff2:	b1 81       	ldd	r27, Z+1	; 0x01
     ff4:	e9 81       	ldd	r30, Y+1	; 0x01
     ff6:	fa 81       	ldd	r31, Y+2	; 0x02
     ff8:	80 81       	ld	r24, Z
     ffa:	83 70       	andi	r24, 0x03	; 3
     ffc:	88 2f       	mov	r24, r24
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	88 0f       	add	r24, r24
    1002:	99 1f       	adc	r25, r25
    1004:	fc 01       	movw	r30, r24
    1006:	eb 58       	subi	r30, 0x8B	; 139
    1008:	ff 4f       	sbci	r31, 0xFF	; 255
    100a:	01 90       	ld	r0, Z+
    100c:	f0 81       	ld	r31, Z
    100e:	e0 2d       	mov	r30, r0
    1010:	80 81       	ld	r24, Z
    1012:	48 2f       	mov	r20, r24
    1014:	e9 81       	ldd	r30, Y+1	; 0x01
    1016:	fa 81       	ldd	r31, Y+2	; 0x02
    1018:	80 81       	ld	r24, Z
    101a:	86 95       	lsr	r24
    101c:	86 95       	lsr	r24
    101e:	8f 70       	andi	r24, 0x0F	; 15
    1020:	28 2f       	mov	r18, r24
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	81 e0       	ldi	r24, 0x01	; 1
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	02 2e       	mov	r0, r18
    102a:	02 c0       	rjmp	.+4      	; 0x1030 <DIO_enuSetPinValue+0x9e>
    102c:	88 0f       	add	r24, r24
    102e:	99 1f       	adc	r25, r25
    1030:	0a 94       	dec	r0
    1032:	e2 f7       	brpl	.-8      	; 0x102c <DIO_enuSetPinValue+0x9a>
    1034:	84 2b       	or	r24, r20
    1036:	8c 93       	st	X, r24
    1038:	30 c0       	rjmp	.+96     	; 0x109a <DIO_enuSetPinValue+0x108>
		}
		else{
			BIT_CLEAR(* u8KarrPorts [pstrCurrentPinLoc->u8PortIdx ] ,  pstrCurrentPinLoc->u8PinIdx);
    103a:	e9 81       	ldd	r30, Y+1	; 0x01
    103c:	fa 81       	ldd	r31, Y+2	; 0x02
    103e:	80 81       	ld	r24, Z
    1040:	83 70       	andi	r24, 0x03	; 3
    1042:	88 2f       	mov	r24, r24
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	88 0f       	add	r24, r24
    1048:	99 1f       	adc	r25, r25
    104a:	fc 01       	movw	r30, r24
    104c:	eb 58       	subi	r30, 0x8B	; 139
    104e:	ff 4f       	sbci	r31, 0xFF	; 255
    1050:	a0 81       	ld	r26, Z
    1052:	b1 81       	ldd	r27, Z+1	; 0x01
    1054:	e9 81       	ldd	r30, Y+1	; 0x01
    1056:	fa 81       	ldd	r31, Y+2	; 0x02
    1058:	80 81       	ld	r24, Z
    105a:	83 70       	andi	r24, 0x03	; 3
    105c:	88 2f       	mov	r24, r24
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	88 0f       	add	r24, r24
    1062:	99 1f       	adc	r25, r25
    1064:	fc 01       	movw	r30, r24
    1066:	eb 58       	subi	r30, 0x8B	; 139
    1068:	ff 4f       	sbci	r31, 0xFF	; 255
    106a:	01 90       	ld	r0, Z+
    106c:	f0 81       	ld	r31, Z
    106e:	e0 2d       	mov	r30, r0
    1070:	80 81       	ld	r24, Z
    1072:	48 2f       	mov	r20, r24
    1074:	e9 81       	ldd	r30, Y+1	; 0x01
    1076:	fa 81       	ldd	r31, Y+2	; 0x02
    1078:	80 81       	ld	r24, Z
    107a:	86 95       	lsr	r24
    107c:	86 95       	lsr	r24
    107e:	8f 70       	andi	r24, 0x0F	; 15
    1080:	28 2f       	mov	r18, r24
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	02 2e       	mov	r0, r18
    108a:	02 c0       	rjmp	.+4      	; 0x1090 <DIO_enuSetPinValue+0xfe>
    108c:	88 0f       	add	r24, r24
    108e:	99 1f       	adc	r25, r25
    1090:	0a 94       	dec	r0
    1092:	e2 f7       	brpl	.-8      	; 0x108c <DIO_enuSetPinValue+0xfa>
    1094:	80 95       	com	r24
    1096:	84 23       	and	r24, r20
    1098:	8c 93       	st	X, r24
		}

		status=STD_enuOK;
    109a:	1b 82       	std	Y+3, r1	; 0x03

	}



	return  status ;
    109c:	8b 81       	ldd	r24, Y+3	; 0x03
}
    109e:	0f 90       	pop	r0
    10a0:	0f 90       	pop	r0
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	0f 90       	pop	r0
    10a8:	cf 91       	pop	r28
    10aa:	df 91       	pop	r29
    10ac:	08 95       	ret

000010ae <DIO_enuGetPinValue>:




STD_tenuReturn DIO_enuGetPinValue(u8 u8PinIdxCpy,u8 * pu8ValueCpy){
    10ae:	df 93       	push	r29
    10b0:	cf 93       	push	r28
    10b2:	cd b7       	in	r28, 0x3d	; 61
    10b4:	de b7       	in	r29, 0x3e	; 62
    10b6:	27 97       	sbiw	r28, 0x07	; 7
    10b8:	0f b6       	in	r0, 0x3f	; 63
    10ba:	f8 94       	cli
    10bc:	de bf       	out	0x3e, r29	; 62
    10be:	0f be       	out	0x3f, r0	; 63
    10c0:	cd bf       	out	0x3d, r28	; 61
    10c2:	8d 83       	std	Y+5, r24	; 0x05
    10c4:	7f 83       	std	Y+7, r23	; 0x07
    10c6:	6e 83       	std	Y+6, r22	; 0x06

	STD_tenuReturn status;


	if( u8PinIdxCpy>=DIO_PIN_NUM  ){
    10c8:	8d 81       	ldd	r24, Y+5	; 0x05
    10ca:	84 30       	cpi	r24, 0x04	; 4
    10cc:	18 f0       	brcs	.+6      	; 0x10d4 <DIO_enuGetPinValue+0x26>

		status=STD_enuOutOfRange;
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	8c 83       	std	Y+4, r24	; 0x04
    10d2:	3e c0       	rjmp	.+124    	; 0x1150 <DIO_enuGetPinValue+0xa2>

	}else if(pu8ValueCpy==STD_NULL){
    10d4:	8e 81       	ldd	r24, Y+6	; 0x06
    10d6:	9f 81       	ldd	r25, Y+7	; 0x07
    10d8:	00 97       	sbiw	r24, 0x00	; 0
    10da:	19 f4       	brne	.+6      	; 0x10e2 <DIO_enuGetPinValue+0x34>

		status= STD_enuNullPtr;
    10dc:	83 e0       	ldi	r24, 0x03	; 3
    10de:	8c 83       	std	Y+4, r24	; 0x04
    10e0:	37 c0       	rjmp	.+110    	; 0x1150 <DIO_enuGetPinValue+0xa2>

	}
	else
	{
		const DIO_tstrPIN *pstrCurrentPinLoc=&DIO_kastrPinCg[u8PinIdxCpy];
    10e2:	8d 81       	ldd	r24, Y+5	; 0x05
    10e4:	88 2f       	mov	r24, r24
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	88 0f       	add	r24, r24
    10ea:	99 1f       	adc	r25, r25
    10ec:	88 59       	subi	r24, 0x98	; 152
    10ee:	9f 4f       	sbci	r25, 0xFF	; 255
    10f0:	9b 83       	std	Y+3, r25	; 0x03
    10f2:	8a 83       	std	Y+2, r24	; 0x02

		u8 temp = BIT_GET(*u8KarrPins [pstrCurrentPinLoc->u8PortIdx ] ,  pstrCurrentPinLoc->u8PinIdx);
    10f4:	ea 81       	ldd	r30, Y+2	; 0x02
    10f6:	fb 81       	ldd	r31, Y+3	; 0x03
    10f8:	80 81       	ld	r24, Z
    10fa:	83 70       	andi	r24, 0x03	; 3
    10fc:	88 2f       	mov	r24, r24
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	88 0f       	add	r24, r24
    1102:	99 1f       	adc	r25, r25
    1104:	fc 01       	movw	r30, r24
    1106:	eb 57       	subi	r30, 0x7B	; 123
    1108:	ff 4f       	sbci	r31, 0xFF	; 255
    110a:	01 90       	ld	r0, Z+
    110c:	f0 81       	ld	r31, Z
    110e:	e0 2d       	mov	r30, r0
    1110:	80 81       	ld	r24, Z
    1112:	28 2f       	mov	r18, r24
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	ea 81       	ldd	r30, Y+2	; 0x02
    1118:	fb 81       	ldd	r31, Y+3	; 0x03
    111a:	80 81       	ld	r24, Z
    111c:	86 95       	lsr	r24
    111e:	86 95       	lsr	r24
    1120:	8f 70       	andi	r24, 0x0F	; 15
    1122:	88 2f       	mov	r24, r24
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	a9 01       	movw	r20, r18
    1128:	02 c0       	rjmp	.+4      	; 0x112e <DIO_enuGetPinValue+0x80>
    112a:	55 95       	asr	r21
    112c:	47 95       	ror	r20
    112e:	8a 95       	dec	r24
    1130:	e2 f7       	brpl	.-8      	; 0x112a <DIO_enuGetPinValue+0x7c>
    1132:	ca 01       	movw	r24, r20
    1134:	81 70       	andi	r24, 0x01	; 1
    1136:	89 83       	std	Y+1, r24	; 0x01



		if( (temp==0)){
    1138:	89 81       	ldd	r24, Y+1	; 0x01
    113a:	88 23       	and	r24, r24
    113c:	21 f4       	brne	.+8      	; 0x1146 <DIO_enuGetPinValue+0x98>

			*pu8ValueCpy=DIO_LOW;
    113e:	ee 81       	ldd	r30, Y+6	; 0x06
    1140:	ff 81       	ldd	r31, Y+7	; 0x07
    1142:	10 82       	st	Z, r1
    1144:	04 c0       	rjmp	.+8      	; 0x114e <DIO_enuGetPinValue+0xa0>

			//status=STD_enuNOK;

		}
		else{
			*pu8ValueCpy=DIO_HIGH;
    1146:	ee 81       	ldd	r30, Y+6	; 0x06
    1148:	ff 81       	ldd	r31, Y+7	; 0x07
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	80 83       	st	Z, r24



		}

		status=STD_enuOK;
    114e:	1c 82       	std	Y+4, r1	; 0x04

	}
	return  status ;
    1150:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1152:	27 96       	adiw	r28, 0x07	; 7
    1154:	0f b6       	in	r0, 0x3f	; 63
    1156:	f8 94       	cli
    1158:	de bf       	out	0x3e, r29	; 62
    115a:	0f be       	out	0x3f, r0	; 63
    115c:	cd bf       	out	0x3d, r28	; 61
    115e:	cf 91       	pop	r28
    1160:	df 91       	pop	r29
    1162:	08 95       	ret

00001164 <DIO_enuSetPinDirection>:
		STD_enuOK,
		STD_enuOutOfRange
		STD_enuNOK.

 */
STD_tenuReturn DIO_enuSetPinDirection(u8 u8PinIdxCpy,u8 u8DirCpy){
    1164:	df 93       	push	r29
    1166:	cf 93       	push	r28
    1168:	00 d0       	rcall	.+0      	; 0x116a <DIO_enuSetPinDirection+0x6>
    116a:	00 d0       	rcall	.+0      	; 0x116c <DIO_enuSetPinDirection+0x8>
    116c:	0f 92       	push	r0
    116e:	cd b7       	in	r28, 0x3d	; 61
    1170:	de b7       	in	r29, 0x3e	; 62
    1172:	8c 83       	std	Y+4, r24	; 0x04
    1174:	6d 83       	std	Y+5, r22	; 0x05

	STD_tenuReturn status;

	if( u8PinIdxCpy>=DIO_PIN_NUM  ){
    1176:	8c 81       	ldd	r24, Y+4	; 0x04
    1178:	84 30       	cpi	r24, 0x04	; 4
    117a:	18 f0       	brcs	.+6      	; 0x1182 <DIO_enuSetPinDirection+0x1e>

		status=STD_enuOutOfRange;
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	8b 83       	std	Y+3, r24	; 0x03
    1180:	76 c0       	rjmp	.+236    	; 0x126e <DIO_enuSetPinDirection+0x10a>

	}
	else if( (u8DirCpy!=DIO_INPUT)&&(u8DirCpy!=DIO_OUTPUT) ){
    1182:	8d 81       	ldd	r24, Y+5	; 0x05
    1184:	88 23       	and	r24, r24
    1186:	31 f0       	breq	.+12     	; 0x1194 <DIO_enuSetPinDirection+0x30>
    1188:	8d 81       	ldd	r24, Y+5	; 0x05
    118a:	81 30       	cpi	r24, 0x01	; 1
    118c:	19 f0       	breq	.+6      	; 0x1194 <DIO_enuSetPinDirection+0x30>

		status=STD_enuNOK;
    118e:	82 e0       	ldi	r24, 0x02	; 2
    1190:	8b 83       	std	Y+3, r24	; 0x03
    1192:	6d c0       	rjmp	.+218    	; 0x126e <DIO_enuSetPinDirection+0x10a>
	}

	else
	{

		const DIO_tstrPIN *pstrCurrentPinLoc=&DIO_kastrPinCg[u8PinIdxCpy];
    1194:	8c 81       	ldd	r24, Y+4	; 0x04
    1196:	88 2f       	mov	r24, r24
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	88 0f       	add	r24, r24
    119c:	99 1f       	adc	r25, r25
    119e:	88 59       	subi	r24, 0x98	; 152
    11a0:	9f 4f       	sbci	r25, 0xFF	; 255
    11a2:	9a 83       	std	Y+2, r25	; 0x02
    11a4:	89 83       	std	Y+1, r24	; 0x01

		if(u8DirCpy==DIO_OUTPUT){
    11a6:	8d 81       	ldd	r24, Y+5	; 0x05
    11a8:	81 30       	cpi	r24, 0x01	; 1
    11aa:	81 f5       	brne	.+96     	; 0x120c <DIO_enuSetPinDirection+0xa8>
			BIT_SET(* u8KarrDdra [pstrCurrentPinLoc->u8PortIdx ] ,  pstrCurrentPinLoc->u8PinIdx);
    11ac:	e9 81       	ldd	r30, Y+1	; 0x01
    11ae:	fa 81       	ldd	r31, Y+2	; 0x02
    11b0:	80 81       	ld	r24, Z
    11b2:	83 70       	andi	r24, 0x03	; 3
    11b4:	88 2f       	mov	r24, r24
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	88 0f       	add	r24, r24
    11ba:	99 1f       	adc	r25, r25
    11bc:	fc 01       	movw	r30, r24
    11be:	e3 58       	subi	r30, 0x83	; 131
    11c0:	ff 4f       	sbci	r31, 0xFF	; 255
    11c2:	a0 81       	ld	r26, Z
    11c4:	b1 81       	ldd	r27, Z+1	; 0x01
    11c6:	e9 81       	ldd	r30, Y+1	; 0x01
    11c8:	fa 81       	ldd	r31, Y+2	; 0x02
    11ca:	80 81       	ld	r24, Z
    11cc:	83 70       	andi	r24, 0x03	; 3
    11ce:	88 2f       	mov	r24, r24
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	88 0f       	add	r24, r24
    11d4:	99 1f       	adc	r25, r25
    11d6:	fc 01       	movw	r30, r24
    11d8:	e3 58       	subi	r30, 0x83	; 131
    11da:	ff 4f       	sbci	r31, 0xFF	; 255
    11dc:	01 90       	ld	r0, Z+
    11de:	f0 81       	ld	r31, Z
    11e0:	e0 2d       	mov	r30, r0
    11e2:	80 81       	ld	r24, Z
    11e4:	48 2f       	mov	r20, r24
    11e6:	e9 81       	ldd	r30, Y+1	; 0x01
    11e8:	fa 81       	ldd	r31, Y+2	; 0x02
    11ea:	80 81       	ld	r24, Z
    11ec:	86 95       	lsr	r24
    11ee:	86 95       	lsr	r24
    11f0:	8f 70       	andi	r24, 0x0F	; 15
    11f2:	28 2f       	mov	r18, r24
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	81 e0       	ldi	r24, 0x01	; 1
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	02 2e       	mov	r0, r18
    11fc:	02 c0       	rjmp	.+4      	; 0x1202 <DIO_enuSetPinDirection+0x9e>
    11fe:	88 0f       	add	r24, r24
    1200:	99 1f       	adc	r25, r25
    1202:	0a 94       	dec	r0
    1204:	e2 f7       	brpl	.-8      	; 0x11fe <DIO_enuSetPinDirection+0x9a>
    1206:	84 2b       	or	r24, r20
    1208:	8c 93       	st	X, r24
    120a:	30 c0       	rjmp	.+96     	; 0x126c <DIO_enuSetPinDirection+0x108>
			//pstrCurrentPinLoc->u8Direction=DIO_OUTPUT;
		}
		else{
			BIT_CLEAR(* u8KarrDdra [pstrCurrentPinLoc->u8PortIdx ] ,  pstrCurrentPinLoc->u8PinIdx);
    120c:	e9 81       	ldd	r30, Y+1	; 0x01
    120e:	fa 81       	ldd	r31, Y+2	; 0x02
    1210:	80 81       	ld	r24, Z
    1212:	83 70       	andi	r24, 0x03	; 3
    1214:	88 2f       	mov	r24, r24
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	88 0f       	add	r24, r24
    121a:	99 1f       	adc	r25, r25
    121c:	fc 01       	movw	r30, r24
    121e:	e3 58       	subi	r30, 0x83	; 131
    1220:	ff 4f       	sbci	r31, 0xFF	; 255
    1222:	a0 81       	ld	r26, Z
    1224:	b1 81       	ldd	r27, Z+1	; 0x01
    1226:	e9 81       	ldd	r30, Y+1	; 0x01
    1228:	fa 81       	ldd	r31, Y+2	; 0x02
    122a:	80 81       	ld	r24, Z
    122c:	83 70       	andi	r24, 0x03	; 3
    122e:	88 2f       	mov	r24, r24
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	88 0f       	add	r24, r24
    1234:	99 1f       	adc	r25, r25
    1236:	fc 01       	movw	r30, r24
    1238:	e3 58       	subi	r30, 0x83	; 131
    123a:	ff 4f       	sbci	r31, 0xFF	; 255
    123c:	01 90       	ld	r0, Z+
    123e:	f0 81       	ld	r31, Z
    1240:	e0 2d       	mov	r30, r0
    1242:	80 81       	ld	r24, Z
    1244:	48 2f       	mov	r20, r24
    1246:	e9 81       	ldd	r30, Y+1	; 0x01
    1248:	fa 81       	ldd	r31, Y+2	; 0x02
    124a:	80 81       	ld	r24, Z
    124c:	86 95       	lsr	r24
    124e:	86 95       	lsr	r24
    1250:	8f 70       	andi	r24, 0x0F	; 15
    1252:	28 2f       	mov	r18, r24
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	02 2e       	mov	r0, r18
    125c:	02 c0       	rjmp	.+4      	; 0x1262 <DIO_enuSetPinDirection+0xfe>
    125e:	88 0f       	add	r24, r24
    1260:	99 1f       	adc	r25, r25
    1262:	0a 94       	dec	r0
    1264:	e2 f7       	brpl	.-8      	; 0x125e <DIO_enuSetPinDirection+0xfa>
    1266:	80 95       	com	r24
    1268:	84 23       	and	r24, r20
    126a:	8c 93       	st	X, r24
			//pstrCurrentPinLoc->u8Direction=DIO_INPUT;

		}

		status=STD_enuOK;
    126c:	1b 82       	std	Y+3, r1	; 0x03

	}



	return  status ;
    126e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1270:	0f 90       	pop	r0
    1272:	0f 90       	pop	r0
    1274:	0f 90       	pop	r0
    1276:	0f 90       	pop	r0
    1278:	0f 90       	pop	r0
    127a:	cf 91       	pop	r28
    127c:	df 91       	pop	r29
    127e:	08 95       	ret

00001280 <DIO_enuSetPortValue>:



STD_tenuReturn DIO_enuSetPortValue(u8 u8PortIdxCpy,u8 u8ValueCpy){
    1280:	df 93       	push	r29
    1282:	cf 93       	push	r28
    1284:	00 d0       	rcall	.+0      	; 0x1286 <DIO_enuSetPortValue+0x6>
    1286:	00 d0       	rcall	.+0      	; 0x1288 <DIO_enuSetPortValue+0x8>
    1288:	0f 92       	push	r0
    128a:	cd b7       	in	r28, 0x3d	; 61
    128c:	de b7       	in	r29, 0x3e	; 62
    128e:	8c 83       	std	Y+4, r24	; 0x04
    1290:	6d 83       	std	Y+5, r22	; 0x05

	 */

	STD_tenuReturn status;

	if( u8PortIdxCpy>=DIO_PORT_NUM  ){
    1292:	8c 81       	ldd	r24, Y+4	; 0x04
    1294:	88 23       	and	r24, r24
    1296:	19 f0       	breq	.+6      	; 0x129e <DIO_enuSetPortValue+0x1e>

		status=STD_enuOutOfRange;
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	8b 83       	std	Y+3, r24	; 0x03
    129c:	21 c0       	rjmp	.+66     	; 0x12e0 <DIO_enuSetPortValue+0x60>

	}
	else{

		const DIO_tstrPORT *pstrCurrentPORTLoc= &DIO_kastrPortCg[u8PortIdxCpy];
    129e:	8c 81       	ldd	r24, Y+4	; 0x04
    12a0:	28 2f       	mov	r18, r24
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	c9 01       	movw	r24, r18
    12a6:	88 0f       	add	r24, r24
    12a8:	99 1f       	adc	r25, r25
    12aa:	88 0f       	add	r24, r24
    12ac:	99 1f       	adc	r25, r25
    12ae:	82 0f       	add	r24, r18
    12b0:	93 1f       	adc	r25, r19
    12b2:	80 59       	subi	r24, 0x90	; 144
    12b4:	9f 4f       	sbci	r25, 0xFF	; 255
    12b6:	9a 83       	std	Y+2, r25	; 0x02
    12b8:	89 83       	std	Y+1, r24	; 0x01

		* u8KarrPorts[pstrCurrentPORTLoc->u8PortIdx]= u8ValueCpy & pstrCurrentPORTLoc->u8Mask;
    12ba:	e9 81       	ldd	r30, Y+1	; 0x01
    12bc:	fa 81       	ldd	r31, Y+2	; 0x02
    12be:	80 81       	ld	r24, Z
    12c0:	88 2f       	mov	r24, r24
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	88 0f       	add	r24, r24
    12c6:	99 1f       	adc	r25, r25
    12c8:	fc 01       	movw	r30, r24
    12ca:	eb 58       	subi	r30, 0x8B	; 139
    12cc:	ff 4f       	sbci	r31, 0xFF	; 255
    12ce:	a0 81       	ld	r26, Z
    12d0:	b1 81       	ldd	r27, Z+1	; 0x01
    12d2:	e9 81       	ldd	r30, Y+1	; 0x01
    12d4:	fa 81       	ldd	r31, Y+2	; 0x02
    12d6:	91 81       	ldd	r25, Z+1	; 0x01
    12d8:	8d 81       	ldd	r24, Y+5	; 0x05
    12da:	89 23       	and	r24, r25
    12dc:	8c 93       	st	X, r24
		status=STD_enuOK;
    12de:	1b 82       	std	Y+3, r1	; 0x03

	}

	return status;
    12e0:	8b 81       	ldd	r24, Y+3	; 0x03
}
    12e2:	0f 90       	pop	r0
    12e4:	0f 90       	pop	r0
    12e6:	0f 90       	pop	r0
    12e8:	0f 90       	pop	r0
    12ea:	0f 90       	pop	r0
    12ec:	cf 91       	pop	r28
    12ee:	df 91       	pop	r29
    12f0:	08 95       	ret

000012f2 <DIO_enuGetPortValue>:
			pu8ValueCpy: pointer to read the value.
		Return: retutn execution State.
				STD_enuOK,
				STD_enuOutOfRange*/

STD_tenuReturn DIO_enuGetPortValue(u8 u8PortIdxCpy,u8 * pu8ValueCpy){
    12f2:	df 93       	push	r29
    12f4:	cf 93       	push	r28
    12f6:	00 d0       	rcall	.+0      	; 0x12f8 <DIO_enuGetPortValue+0x6>
    12f8:	00 d0       	rcall	.+0      	; 0x12fa <DIO_enuGetPortValue+0x8>
    12fa:	00 d0       	rcall	.+0      	; 0x12fc <DIO_enuGetPortValue+0xa>
    12fc:	cd b7       	in	r28, 0x3d	; 61
    12fe:	de b7       	in	r29, 0x3e	; 62
    1300:	8c 83       	std	Y+4, r24	; 0x04
    1302:	7e 83       	std	Y+6, r23	; 0x06
    1304:	6d 83       	std	Y+5, r22	; 0x05

	STD_tenuReturn status;


	if( u8PortIdxCpy>=DIO_PORT_NUM  ){
    1306:	8c 81       	ldd	r24, Y+4	; 0x04
    1308:	88 23       	and	r24, r24
    130a:	19 f0       	breq	.+6      	; 0x1312 <DIO_enuGetPortValue+0x20>

		status=STD_enuOutOfRange;
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	8b 83       	std	Y+3, r24	; 0x03
    1310:	27 c0       	rjmp	.+78     	; 0x1360 <DIO_enuGetPortValue+0x6e>

	}
	else if(pu8ValueCpy==STD_NULL){
    1312:	8d 81       	ldd	r24, Y+5	; 0x05
    1314:	9e 81       	ldd	r25, Y+6	; 0x06
    1316:	00 97       	sbiw	r24, 0x00	; 0
    1318:	19 f4       	brne	.+6      	; 0x1320 <DIO_enuGetPortValue+0x2e>

		status= STD_enuNullPtr;
    131a:	83 e0       	ldi	r24, 0x03	; 3
    131c:	8b 83       	std	Y+3, r24	; 0x03
    131e:	20 c0       	rjmp	.+64     	; 0x1360 <DIO_enuGetPortValue+0x6e>

	}
	else {

		//u8 * temptr=
		const DIO_tstrPORT *pstrCurrentPORTLoc= &DIO_kastrPortCg[u8PortIdxCpy];
    1320:	8c 81       	ldd	r24, Y+4	; 0x04
    1322:	28 2f       	mov	r18, r24
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	c9 01       	movw	r24, r18
    1328:	88 0f       	add	r24, r24
    132a:	99 1f       	adc	r25, r25
    132c:	88 0f       	add	r24, r24
    132e:	99 1f       	adc	r25, r25
    1330:	82 0f       	add	r24, r18
    1332:	93 1f       	adc	r25, r19
    1334:	80 59       	subi	r24, 0x90	; 144
    1336:	9f 4f       	sbci	r25, 0xFF	; 255
    1338:	9a 83       	std	Y+2, r25	; 0x02
    133a:	89 83       	std	Y+1, r24	; 0x01

		*pu8ValueCpy= *u8KarrPins[pstrCurrentPORTLoc->u8PortIdx];
    133c:	e9 81       	ldd	r30, Y+1	; 0x01
    133e:	fa 81       	ldd	r31, Y+2	; 0x02
    1340:	80 81       	ld	r24, Z
    1342:	88 2f       	mov	r24, r24
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	88 0f       	add	r24, r24
    1348:	99 1f       	adc	r25, r25
    134a:	fc 01       	movw	r30, r24
    134c:	eb 57       	subi	r30, 0x7B	; 123
    134e:	ff 4f       	sbci	r31, 0xFF	; 255
    1350:	01 90       	ld	r0, Z+
    1352:	f0 81       	ld	r31, Z
    1354:	e0 2d       	mov	r30, r0
    1356:	80 81       	ld	r24, Z
    1358:	ed 81       	ldd	r30, Y+5	; 0x05
    135a:	fe 81       	ldd	r31, Y+6	; 0x06
    135c:	80 83       	st	Z, r24
		status= STD_enuOK;
    135e:	1b 82       	std	Y+3, r1	; 0x03

	}

	return status;
    1360:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1362:	26 96       	adiw	r28, 0x06	; 6
    1364:	0f b6       	in	r0, 0x3f	; 63
    1366:	f8 94       	cli
    1368:	de bf       	out	0x3e, r29	; 62
    136a:	0f be       	out	0x3f, r0	; 63
    136c:	cd bf       	out	0x3d, r28	; 61
    136e:	cf 91       	pop	r28
    1370:	df 91       	pop	r29
    1372:	08 95       	ret

00001374 <DIO_enuSetPortDirecrion>:



STD_tenuReturn DIO_enuSetPortDirecrion(u8 u8PortIdxCpy,u8 u8DirCpy){
    1374:	df 93       	push	r29
    1376:	cf 93       	push	r28
    1378:	00 d0       	rcall	.+0      	; 0x137a <DIO_enuSetPortDirecrion+0x6>
    137a:	00 d0       	rcall	.+0      	; 0x137c <DIO_enuSetPortDirecrion+0x8>
    137c:	0f 92       	push	r0
    137e:	cd b7       	in	r28, 0x3d	; 61
    1380:	de b7       	in	r29, 0x3e	; 62
    1382:	8c 83       	std	Y+4, r24	; 0x04
    1384:	6d 83       	std	Y+5, r22	; 0x05
				STD_enuNOK.
	 */

	STD_tenuReturn status;

	if( u8PortIdxCpy>=DIO_PORT_NUM  ){
    1386:	8c 81       	ldd	r24, Y+4	; 0x04
    1388:	88 23       	and	r24, r24
    138a:	19 f0       	breq	.+6      	; 0x1392 <DIO_enuSetPortDirecrion+0x1e>

		status=STD_enuOutOfRange;
    138c:	81 e0       	ldi	r24, 0x01	; 1
    138e:	8b 83       	std	Y+3, r24	; 0x03
    1390:	21 c0       	rjmp	.+66     	; 0x13d4 <DIO_enuSetPortDirecrion+0x60>

	}
	else{

		const DIO_tstrPORT *pstrCurrentPORTLoc= &DIO_kastrPortCg[u8PortIdxCpy];
    1392:	8c 81       	ldd	r24, Y+4	; 0x04
    1394:	28 2f       	mov	r18, r24
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	c9 01       	movw	r24, r18
    139a:	88 0f       	add	r24, r24
    139c:	99 1f       	adc	r25, r25
    139e:	88 0f       	add	r24, r24
    13a0:	99 1f       	adc	r25, r25
    13a2:	82 0f       	add	r24, r18
    13a4:	93 1f       	adc	r25, r19
    13a6:	80 59       	subi	r24, 0x90	; 144
    13a8:	9f 4f       	sbci	r25, 0xFF	; 255
    13aa:	9a 83       	std	Y+2, r25	; 0x02
    13ac:	89 83       	std	Y+1, r24	; 0x01

		* u8KarrDdra[pstrCurrentPORTLoc->u8PortIdx]= u8DirCpy & pstrCurrentPORTLoc->u8Mask;
    13ae:	e9 81       	ldd	r30, Y+1	; 0x01
    13b0:	fa 81       	ldd	r31, Y+2	; 0x02
    13b2:	80 81       	ld	r24, Z
    13b4:	88 2f       	mov	r24, r24
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	88 0f       	add	r24, r24
    13ba:	99 1f       	adc	r25, r25
    13bc:	fc 01       	movw	r30, r24
    13be:	e3 58       	subi	r30, 0x83	; 131
    13c0:	ff 4f       	sbci	r31, 0xFF	; 255
    13c2:	a0 81       	ld	r26, Z
    13c4:	b1 81       	ldd	r27, Z+1	; 0x01
    13c6:	e9 81       	ldd	r30, Y+1	; 0x01
    13c8:	fa 81       	ldd	r31, Y+2	; 0x02
    13ca:	91 81       	ldd	r25, Z+1	; 0x01
    13cc:	8d 81       	ldd	r24, Y+5	; 0x05
    13ce:	89 23       	and	r24, r25
    13d0:	8c 93       	st	X, r24
		status=STD_enuOK;
    13d2:	1b 82       	std	Y+3, r1	; 0x03


	}

	return status;
    13d4:	8b 81       	ldd	r24, Y+3	; 0x03

}
    13d6:	0f 90       	pop	r0
    13d8:	0f 90       	pop	r0
    13da:	0f 90       	pop	r0
    13dc:	0f 90       	pop	r0
    13de:	0f 90       	pop	r0
    13e0:	cf 91       	pop	r28
    13e2:	df 91       	pop	r29
    13e4:	08 95       	ret

000013e6 <SEG_vidInit>:
static u8 u8arrSegCurVal[SEG_NUM];
static u8 u8arrSegCurStatus[SEG_NUM];

/*MMS: Init Shall only update the internal variables in this case as the POV might get distupted
when initializing*/
void SEG_vidInit(void){
    13e6:	df 93       	push	r29
    13e8:	cf 93       	push	r28
    13ea:	00 d0       	rcall	.+0      	; 0x13ec <SEG_vidInit+0x6>
    13ec:	0f 92       	push	r0
    13ee:	cd b7       	in	r28, 0x3d	; 61
    13f0:	de b7       	in	r29, 0x3e	; 62
	u8 u8SegIdxLoc=0;
    13f2:	1b 82       	std	Y+3, r1	; 0x03

	for (u8SegIdxLoc = 0; u8SegIdxLoc < SEG_NUM; ++u8SegIdxLoc){
    13f4:	1b 82       	std	Y+3, r1	; 0x03
    13f6:	48 c0       	rjmp	.+144    	; 0x1488 <SEG_vidInit+0xa2>


		const SEG_tstr * pstrCurrentSegLoc = & SEG_kastrCg[u8SegIdxLoc];
    13f8:	8b 81       	ldd	r24, Y+3	; 0x03
    13fa:	88 2f       	mov	r24, r24
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	88 0f       	add	r24, r24
    1400:	99 1f       	adc	r25, r25
    1402:	88 0f       	add	r24, r24
    1404:	99 1f       	adc	r25, r25
    1406:	83 57       	subi	r24, 0x73	; 115
    1408:	9f 4f       	sbci	r25, 0xFF	; 255
    140a:	9a 83       	std	Y+2, r25	; 0x02
    140c:	89 83       	std	Y+1, r24	; 0x01


		u8arrSegCurStatus[u8SegIdxLoc]=pstrCurrentSegLoc->u8InitState;
    140e:	8b 81       	ldd	r24, Y+3	; 0x03
    1410:	28 2f       	mov	r18, r24
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	e9 81       	ldd	r30, Y+1	; 0x01
    1416:	fa 81       	ldd	r31, Y+2	; 0x02
    1418:	83 81       	ldd	r24, Z+3	; 0x03
    141a:	86 95       	lsr	r24
    141c:	81 70       	andi	r24, 0x01	; 1
    141e:	f9 01       	movw	r30, r18
    1420:	ee 55       	subi	r30, 0x5E	; 94
    1422:	ff 4f       	sbci	r31, 0xFF	; 255
    1424:	80 83       	st	Z, r24

		if(pstrCurrentSegLoc->u8Type==SEG_COM_ANODE){
    1426:	e9 81       	ldd	r30, Y+1	; 0x01
    1428:	fa 81       	ldd	r31, Y+2	; 0x02
    142a:	83 81       	ldd	r24, Z+3	; 0x03
    142c:	81 70       	andi	r24, 0x01	; 1
    142e:	88 23       	and	r24, r24
    1430:	91 f4       	brne	.+36     	; 0x1456 <SEG_vidInit+0x70>



			u8arrSegCurVal[u8SegIdxLoc]=~u8SevenSegment[pstrCurrentSegLoc->u8InitValue];
    1432:	8b 81       	ldd	r24, Y+3	; 0x03
    1434:	28 2f       	mov	r18, r24
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	e9 81       	ldd	r30, Y+1	; 0x01
    143a:	fa 81       	ldd	r31, Y+2	; 0x02
    143c:	82 81       	ldd	r24, Z+2	; 0x02
    143e:	88 2f       	mov	r24, r24
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	fc 01       	movw	r30, r24
    1444:	eb 56       	subi	r30, 0x6B	; 107
    1446:	ff 4f       	sbci	r31, 0xFF	; 255
    1448:	80 81       	ld	r24, Z
    144a:	80 95       	com	r24
    144c:	f9 01       	movw	r30, r18
    144e:	e0 56       	subi	r30, 0x60	; 96
    1450:	ff 4f       	sbci	r31, 0xFF	; 255
    1452:	80 83       	st	Z, r24
    1454:	16 c0       	rjmp	.+44     	; 0x1482 <SEG_vidInit+0x9c>

		}
		else if (pstrCurrentSegLoc->u8Type==SEG_COM_CATHOD){
    1456:	e9 81       	ldd	r30, Y+1	; 0x01
    1458:	fa 81       	ldd	r31, Y+2	; 0x02
    145a:	83 81       	ldd	r24, Z+3	; 0x03
    145c:	81 70       	andi	r24, 0x01	; 1
    145e:	88 23       	and	r24, r24
    1460:	81 f0       	breq	.+32     	; 0x1482 <SEG_vidInit+0x9c>

			u8arrSegCurVal[u8SegIdxLoc]=u8SevenSegment[pstrCurrentSegLoc->u8InitValue];
    1462:	8b 81       	ldd	r24, Y+3	; 0x03
    1464:	28 2f       	mov	r18, r24
    1466:	30 e0       	ldi	r19, 0x00	; 0
    1468:	e9 81       	ldd	r30, Y+1	; 0x01
    146a:	fa 81       	ldd	r31, Y+2	; 0x02
    146c:	82 81       	ldd	r24, Z+2	; 0x02
    146e:	88 2f       	mov	r24, r24
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	fc 01       	movw	r30, r24
    1474:	eb 56       	subi	r30, 0x6B	; 107
    1476:	ff 4f       	sbci	r31, 0xFF	; 255
    1478:	80 81       	ld	r24, Z
    147a:	f9 01       	movw	r30, r18
    147c:	e0 56       	subi	r30, 0x60	; 96
    147e:	ff 4f       	sbci	r31, 0xFF	; 255
    1480:	80 83       	st	Z, r24
/*MMS: Init Shall only update the internal variables in this case as the POV might get distupted
when initializing*/
void SEG_vidInit(void){
	u8 u8SegIdxLoc=0;

	for (u8SegIdxLoc = 0; u8SegIdxLoc < SEG_NUM; ++u8SegIdxLoc){
    1482:	8b 81       	ldd	r24, Y+3	; 0x03
    1484:	8f 5f       	subi	r24, 0xFF	; 255
    1486:	8b 83       	std	Y+3, r24	; 0x03
    1488:	8b 81       	ldd	r24, Y+3	; 0x03
    148a:	82 30       	cpi	r24, 0x02	; 2
    148c:	08 f4       	brcc	.+2      	; 0x1490 <SEG_vidInit+0xaa>
    148e:	b4 cf       	rjmp	.-152    	; 0x13f8 <SEG_vidInit+0x12>


		}

	}
}
    1490:	0f 90       	pop	r0
    1492:	0f 90       	pop	r0
    1494:	0f 90       	pop	r0
    1496:	cf 91       	pop	r28
    1498:	df 91       	pop	r29
    149a:	08 95       	ret

0000149c <SEG_enuEnable>:

STD_tenuReturn SEG_enuEnable(u8 u8SegmentIdx){
    149c:	df 93       	push	r29
    149e:	cf 93       	push	r28
    14a0:	00 d0       	rcall	.+0      	; 0x14a2 <SEG_enuEnable+0x6>
    14a2:	cd b7       	in	r28, 0x3d	; 61
    14a4:	de b7       	in	r29, 0x3e	; 62
    14a6:	8a 83       	std	Y+2, r24	; 0x02

	STD_tenuReturn status;

	if(u8SegmentIdx>=SEG_NUM){
    14a8:	8a 81       	ldd	r24, Y+2	; 0x02
    14aa:	82 30       	cpi	r24, 0x02	; 2
    14ac:	18 f0       	brcs	.+6      	; 0x14b4 <SEG_enuEnable+0x18>
		status=STD_enuOutOfRange;
    14ae:	81 e0       	ldi	r24, 0x01	; 1
    14b0:	89 83       	std	Y+1, r24	; 0x01
    14b2:	7a c0       	rjmp	.+244    	; 0x15a8 <SEG_enuEnable+0x10c>
	}
	else{

		if (SEG_kastrCg[u8SegmentIdx].u8Type==SEG_COM_CATHOD){
    14b4:	8a 81       	ldd	r24, Y+2	; 0x02
    14b6:	88 2f       	mov	r24, r24
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	88 0f       	add	r24, r24
    14bc:	99 1f       	adc	r25, r25
    14be:	88 0f       	add	r24, r24
    14c0:	99 1f       	adc	r25, r25
    14c2:	fc 01       	movw	r30, r24
    14c4:	e0 57       	subi	r30, 0x70	; 112
    14c6:	ff 4f       	sbci	r31, 0xFF	; 255
    14c8:	80 81       	ld	r24, Z
    14ca:	81 70       	andi	r24, 0x01	; 1
    14cc:	81 30       	cpi	r24, 0x01	; 1
    14ce:	71 f5       	brne	.+92     	; 0x152c <SEG_enuEnable+0x90>

			DIO_enuSetPortValue(SEG_kastrCg[u8SegmentIdx].u8PortIdx,u8arrSegCurVal[u8SegmentIdx]);
    14d0:	8a 81       	ldd	r24, Y+2	; 0x02
    14d2:	88 2f       	mov	r24, r24
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	88 0f       	add	r24, r24
    14d8:	99 1f       	adc	r25, r25
    14da:	88 0f       	add	r24, r24
    14dc:	99 1f       	adc	r25, r25
    14de:	fc 01       	movw	r30, r24
    14e0:	e3 57       	subi	r30, 0x73	; 115
    14e2:	ff 4f       	sbci	r31, 0xFF	; 255
    14e4:	20 81       	ld	r18, Z
    14e6:	8a 81       	ldd	r24, Y+2	; 0x02
    14e8:	88 2f       	mov	r24, r24
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	fc 01       	movw	r30, r24
    14ee:	e0 56       	subi	r30, 0x60	; 96
    14f0:	ff 4f       	sbci	r31, 0xFF	; 255
    14f2:	90 81       	ld	r25, Z
    14f4:	82 2f       	mov	r24, r18
    14f6:	69 2f       	mov	r22, r25
    14f8:	0e 94 40 09 	call	0x1280	; 0x1280 <DIO_enuSetPortValue>
			DIO_enuSetPinValue(SEG_kastrCg[u8SegmentIdx].u8ControlPinIdx,DIO_LOW);
    14fc:	8a 81       	ldd	r24, Y+2	; 0x02
    14fe:	88 2f       	mov	r24, r24
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	88 0f       	add	r24, r24
    1504:	99 1f       	adc	r25, r25
    1506:	88 0f       	add	r24, r24
    1508:	99 1f       	adc	r25, r25
    150a:	fc 01       	movw	r30, r24
    150c:	e2 57       	subi	r30, 0x72	; 114
    150e:	ff 4f       	sbci	r31, 0xFF	; 255
    1510:	80 81       	ld	r24, Z
    1512:	60 e0       	ldi	r22, 0x00	; 0
    1514:	0e 94 c9 07 	call	0xf92	; 0xf92 <DIO_enuSetPinValue>
			u8arrSegCurStatus[u8SegmentIdx]=SEG_ENABLED;
    1518:	8a 81       	ldd	r24, Y+2	; 0x02
    151a:	88 2f       	mov	r24, r24
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	fc 01       	movw	r30, r24
    1520:	ee 55       	subi	r30, 0x5E	; 94
    1522:	ff 4f       	sbci	r31, 0xFF	; 255
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	80 83       	st	Z, r24
			status=STD_enuOK;
    1528:	19 82       	std	Y+1, r1	; 0x01
    152a:	3e c0       	rjmp	.+124    	; 0x15a8 <SEG_enuEnable+0x10c>
		}

		else if (SEG_kastrCg[u8SegmentIdx].u8Type==SEG_COM_ANODE){
    152c:	8a 81       	ldd	r24, Y+2	; 0x02
    152e:	88 2f       	mov	r24, r24
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	88 0f       	add	r24, r24
    1534:	99 1f       	adc	r25, r25
    1536:	88 0f       	add	r24, r24
    1538:	99 1f       	adc	r25, r25
    153a:	fc 01       	movw	r30, r24
    153c:	e0 57       	subi	r30, 0x70	; 112
    153e:	ff 4f       	sbci	r31, 0xFF	; 255
    1540:	80 81       	ld	r24, Z
    1542:	81 70       	andi	r24, 0x01	; 1
    1544:	88 23       	and	r24, r24
    1546:	71 f5       	brne	.+92     	; 0x15a4 <SEG_enuEnable+0x108>

			DIO_enuSetPortValue(SEG_kastrCg[u8SegmentIdx].u8PortIdx,u8arrSegCurVal[u8SegmentIdx]);
    1548:	8a 81       	ldd	r24, Y+2	; 0x02
    154a:	88 2f       	mov	r24, r24
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	88 0f       	add	r24, r24
    1550:	99 1f       	adc	r25, r25
    1552:	88 0f       	add	r24, r24
    1554:	99 1f       	adc	r25, r25
    1556:	fc 01       	movw	r30, r24
    1558:	e3 57       	subi	r30, 0x73	; 115
    155a:	ff 4f       	sbci	r31, 0xFF	; 255
    155c:	20 81       	ld	r18, Z
    155e:	8a 81       	ldd	r24, Y+2	; 0x02
    1560:	88 2f       	mov	r24, r24
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	fc 01       	movw	r30, r24
    1566:	e0 56       	subi	r30, 0x60	; 96
    1568:	ff 4f       	sbci	r31, 0xFF	; 255
    156a:	90 81       	ld	r25, Z
    156c:	82 2f       	mov	r24, r18
    156e:	69 2f       	mov	r22, r25
    1570:	0e 94 40 09 	call	0x1280	; 0x1280 <DIO_enuSetPortValue>
			DIO_enuSetPinValue(SEG_kastrCg[u8SegmentIdx].u8ControlPinIdx,DIO_HIGH);
    1574:	8a 81       	ldd	r24, Y+2	; 0x02
    1576:	88 2f       	mov	r24, r24
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	88 0f       	add	r24, r24
    157c:	99 1f       	adc	r25, r25
    157e:	88 0f       	add	r24, r24
    1580:	99 1f       	adc	r25, r25
    1582:	fc 01       	movw	r30, r24
    1584:	e2 57       	subi	r30, 0x72	; 114
    1586:	ff 4f       	sbci	r31, 0xFF	; 255
    1588:	80 81       	ld	r24, Z
    158a:	61 e0       	ldi	r22, 0x01	; 1
    158c:	0e 94 c9 07 	call	0xf92	; 0xf92 <DIO_enuSetPinValue>
			u8arrSegCurStatus[u8SegmentIdx]=SEG_ENABLED;
    1590:	8a 81       	ldd	r24, Y+2	; 0x02
    1592:	88 2f       	mov	r24, r24
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	fc 01       	movw	r30, r24
    1598:	ee 55       	subi	r30, 0x5E	; 94
    159a:	ff 4f       	sbci	r31, 0xFF	; 255
    159c:	81 e0       	ldi	r24, 0x01	; 1
    159e:	80 83       	st	Z, r24
			status=STD_enuOK;
    15a0:	19 82       	std	Y+1, r1	; 0x01
    15a2:	02 c0       	rjmp	.+4      	; 0x15a8 <SEG_enuEnable+0x10c>
		}
		else
		{
			status=STD_enuNOK;
    15a4:	82 e0       	ldi	r24, 0x02	; 2
    15a6:	89 83       	std	Y+1, r24	; 0x01
		}
	}


	return status;
    15a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    15aa:	0f 90       	pop	r0
    15ac:	0f 90       	pop	r0
    15ae:	cf 91       	pop	r28
    15b0:	df 91       	pop	r29
    15b2:	08 95       	ret

000015b4 <SEG_enuDisable>:

STD_tenuReturn SEG_enuDisable(u8 u8SegmentIdx){
    15b4:	df 93       	push	r29
    15b6:	cf 93       	push	r28
    15b8:	00 d0       	rcall	.+0      	; 0x15ba <SEG_enuDisable+0x6>
    15ba:	cd b7       	in	r28, 0x3d	; 61
    15bc:	de b7       	in	r29, 0x3e	; 62
    15be:	8a 83       	std	Y+2, r24	; 0x02


	STD_tenuReturn status;

	if(u8SegmentIdx>=SEG_NUM){
    15c0:	8a 81       	ldd	r24, Y+2	; 0x02
    15c2:	82 30       	cpi	r24, 0x02	; 2
    15c4:	18 f0       	brcs	.+6      	; 0x15cc <SEG_enuDisable+0x18>
		status=STD_enuOutOfRange;
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	89 83       	std	Y+1, r24	; 0x01
    15ca:	4c c0       	rjmp	.+152    	; 0x1664 <SEG_enuDisable+0xb0>
	}
	else{

		if (SEG_kastrCg[u8SegmentIdx].u8Type==SEG_COM_CATHOD){
    15cc:	8a 81       	ldd	r24, Y+2	; 0x02
    15ce:	88 2f       	mov	r24, r24
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	88 0f       	add	r24, r24
    15d4:	99 1f       	adc	r25, r25
    15d6:	88 0f       	add	r24, r24
    15d8:	99 1f       	adc	r25, r25
    15da:	fc 01       	movw	r30, r24
    15dc:	e0 57       	subi	r30, 0x70	; 112
    15de:	ff 4f       	sbci	r31, 0xFF	; 255
    15e0:	80 81       	ld	r24, Z
    15e2:	81 70       	andi	r24, 0x01	; 1
    15e4:	81 30       	cpi	r24, 0x01	; 1
    15e6:	b9 f4       	brne	.+46     	; 0x1616 <SEG_enuDisable+0x62>

			DIO_enuSetPinValue(SEG_kastrCg[u8SegmentIdx].u8ControlPinIdx,DIO_HIGH);
    15e8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ea:	88 2f       	mov	r24, r24
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	88 0f       	add	r24, r24
    15f0:	99 1f       	adc	r25, r25
    15f2:	88 0f       	add	r24, r24
    15f4:	99 1f       	adc	r25, r25
    15f6:	fc 01       	movw	r30, r24
    15f8:	e2 57       	subi	r30, 0x72	; 114
    15fa:	ff 4f       	sbci	r31, 0xFF	; 255
    15fc:	80 81       	ld	r24, Z
    15fe:	61 e0       	ldi	r22, 0x01	; 1
    1600:	0e 94 c9 07 	call	0xf92	; 0xf92 <DIO_enuSetPinValue>
			u8arrSegCurStatus[u8SegmentIdx]=SEG_DISABLED;
    1604:	8a 81       	ldd	r24, Y+2	; 0x02
    1606:	88 2f       	mov	r24, r24
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	fc 01       	movw	r30, r24
    160c:	ee 55       	subi	r30, 0x5E	; 94
    160e:	ff 4f       	sbci	r31, 0xFF	; 255
    1610:	10 82       	st	Z, r1
			status=STD_enuOK;
    1612:	19 82       	std	Y+1, r1	; 0x01
    1614:	27 c0       	rjmp	.+78     	; 0x1664 <SEG_enuDisable+0xb0>
		}

		else if (SEG_kastrCg[u8SegmentIdx].u8Type==SEG_COM_ANODE){
    1616:	8a 81       	ldd	r24, Y+2	; 0x02
    1618:	88 2f       	mov	r24, r24
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	88 0f       	add	r24, r24
    161e:	99 1f       	adc	r25, r25
    1620:	88 0f       	add	r24, r24
    1622:	99 1f       	adc	r25, r25
    1624:	fc 01       	movw	r30, r24
    1626:	e0 57       	subi	r30, 0x70	; 112
    1628:	ff 4f       	sbci	r31, 0xFF	; 255
    162a:	80 81       	ld	r24, Z
    162c:	81 70       	andi	r24, 0x01	; 1
    162e:	88 23       	and	r24, r24
    1630:	b9 f4       	brne	.+46     	; 0x1660 <SEG_enuDisable+0xac>

			DIO_enuSetPinValue(SEG_kastrCg[u8SegmentIdx].u8ControlPinIdx,DIO_LOW);
    1632:	8a 81       	ldd	r24, Y+2	; 0x02
    1634:	88 2f       	mov	r24, r24
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	88 0f       	add	r24, r24
    163a:	99 1f       	adc	r25, r25
    163c:	88 0f       	add	r24, r24
    163e:	99 1f       	adc	r25, r25
    1640:	fc 01       	movw	r30, r24
    1642:	e2 57       	subi	r30, 0x72	; 114
    1644:	ff 4f       	sbci	r31, 0xFF	; 255
    1646:	80 81       	ld	r24, Z
    1648:	60 e0       	ldi	r22, 0x00	; 0
    164a:	0e 94 c9 07 	call	0xf92	; 0xf92 <DIO_enuSetPinValue>
			u8arrSegCurStatus[u8SegmentIdx]=SEG_DISABLED;
    164e:	8a 81       	ldd	r24, Y+2	; 0x02
    1650:	88 2f       	mov	r24, r24
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	fc 01       	movw	r30, r24
    1656:	ee 55       	subi	r30, 0x5E	; 94
    1658:	ff 4f       	sbci	r31, 0xFF	; 255
    165a:	10 82       	st	Z, r1
			status=STD_enuOK;
    165c:	19 82       	std	Y+1, r1	; 0x01
    165e:	02 c0       	rjmp	.+4      	; 0x1664 <SEG_enuDisable+0xb0>
		}
		else
		{
			status=STD_enuNOK;
    1660:	82 e0       	ldi	r24, 0x02	; 2
    1662:	89 83       	std	Y+1, r24	; 0x01
		}
	}


	return status;
    1664:	89 81       	ldd	r24, Y+1	; 0x01


}
    1666:	0f 90       	pop	r0
    1668:	0f 90       	pop	r0
    166a:	cf 91       	pop	r28
    166c:	df 91       	pop	r29
    166e:	08 95       	ret

00001670 <SEG_enuWrite>:

STD_tenuReturn SEG_enuWrite (u8 u8SegmentIdx,u8 u8Number){
    1670:	df 93       	push	r29
    1672:	cf 93       	push	r28
    1674:	00 d0       	rcall	.+0      	; 0x1676 <SEG_enuWrite+0x6>
    1676:	0f 92       	push	r0
    1678:	cd b7       	in	r28, 0x3d	; 61
    167a:	de b7       	in	r29, 0x3e	; 62
    167c:	8a 83       	std	Y+2, r24	; 0x02
    167e:	6b 83       	std	Y+3, r22	; 0x03

	STD_tenuReturn status;

	if(u8Number>9 || u8SegmentIdx>=SEG_NUM ){
    1680:	8b 81       	ldd	r24, Y+3	; 0x03
    1682:	8a 30       	cpi	r24, 0x0A	; 10
    1684:	18 f4       	brcc	.+6      	; 0x168c <SEG_enuWrite+0x1c>
    1686:	8a 81       	ldd	r24, Y+2	; 0x02
    1688:	82 30       	cpi	r24, 0x02	; 2
    168a:	18 f0       	brcs	.+6      	; 0x1692 <SEG_enuWrite+0x22>
		status=STD_enuOutOfRange;
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	89 83       	std	Y+1, r24	; 0x01
    1690:	5a c0       	rjmp	.+180    	; 0x1746 <SEG_enuWrite+0xd6>
	}
	else {


		if (SEG_kastrCg[u8SegmentIdx].u8Type==SEG_COM_CATHOD){
    1692:	8a 81       	ldd	r24, Y+2	; 0x02
    1694:	88 2f       	mov	r24, r24
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	88 0f       	add	r24, r24
    169a:	99 1f       	adc	r25, r25
    169c:	88 0f       	add	r24, r24
    169e:	99 1f       	adc	r25, r25
    16a0:	fc 01       	movw	r30, r24
    16a2:	e0 57       	subi	r30, 0x70	; 112
    16a4:	ff 4f       	sbci	r31, 0xFF	; 255
    16a6:	80 81       	ld	r24, Z
    16a8:	81 70       	andi	r24, 0x01	; 1
    16aa:	81 30       	cpi	r24, 0x01	; 1
    16ac:	79 f4       	brne	.+30     	; 0x16cc <SEG_enuWrite+0x5c>

			u8arrSegCurVal[u8SegmentIdx]= u8SevenSegment[u8Number];
    16ae:	8a 81       	ldd	r24, Y+2	; 0x02
    16b0:	28 2f       	mov	r18, r24
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	8b 81       	ldd	r24, Y+3	; 0x03
    16b6:	88 2f       	mov	r24, r24
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	fc 01       	movw	r30, r24
    16bc:	eb 56       	subi	r30, 0x6B	; 107
    16be:	ff 4f       	sbci	r31, 0xFF	; 255
    16c0:	80 81       	ld	r24, Z
    16c2:	f9 01       	movw	r30, r18
    16c4:	e0 56       	subi	r30, 0x60	; 96
    16c6:	ff 4f       	sbci	r31, 0xFF	; 255
    16c8:	80 83       	st	Z, r24
    16ca:	1d c0       	rjmp	.+58     	; 0x1706 <SEG_enuWrite+0x96>
		}

		else if(SEG_kastrCg[u8SegmentIdx].u8Type==SEG_COM_ANODE)
    16cc:	8a 81       	ldd	r24, Y+2	; 0x02
    16ce:	88 2f       	mov	r24, r24
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	88 0f       	add	r24, r24
    16d4:	99 1f       	adc	r25, r25
    16d6:	88 0f       	add	r24, r24
    16d8:	99 1f       	adc	r25, r25
    16da:	fc 01       	movw	r30, r24
    16dc:	e0 57       	subi	r30, 0x70	; 112
    16de:	ff 4f       	sbci	r31, 0xFF	; 255
    16e0:	80 81       	ld	r24, Z
    16e2:	81 70       	andi	r24, 0x01	; 1
    16e4:	88 23       	and	r24, r24
    16e6:	79 f4       	brne	.+30     	; 0x1706 <SEG_enuWrite+0x96>
		{
			u8arrSegCurVal[u8SegmentIdx]= ~(u8SevenSegment[u8Number]);
    16e8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ea:	28 2f       	mov	r18, r24
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	8b 81       	ldd	r24, Y+3	; 0x03
    16f0:	88 2f       	mov	r24, r24
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	fc 01       	movw	r30, r24
    16f6:	eb 56       	subi	r30, 0x6B	; 107
    16f8:	ff 4f       	sbci	r31, 0xFF	; 255
    16fa:	80 81       	ld	r24, Z
    16fc:	80 95       	com	r24
    16fe:	f9 01       	movw	r30, r18
    1700:	e0 56       	subi	r30, 0x60	; 96
    1702:	ff 4f       	sbci	r31, 0xFF	; 255
    1704:	80 83       	st	Z, r24
		}



		if(u8arrSegCurStatus[u8SegmentIdx]==SEG_ENABLED){
    1706:	8a 81       	ldd	r24, Y+2	; 0x02
    1708:	88 2f       	mov	r24, r24
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	fc 01       	movw	r30, r24
    170e:	ee 55       	subi	r30, 0x5E	; 94
    1710:	ff 4f       	sbci	r31, 0xFF	; 255
    1712:	80 81       	ld	r24, Z
    1714:	81 30       	cpi	r24, 0x01	; 1
    1716:	b1 f4       	brne	.+44     	; 0x1744 <SEG_enuWrite+0xd4>

			DIO_enuSetPortValue(SEG_kastrCg[u8SegmentIdx].u8PortIdx,u8arrSegCurVal[u8SegmentIdx]);
    1718:	8a 81       	ldd	r24, Y+2	; 0x02
    171a:	88 2f       	mov	r24, r24
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	88 0f       	add	r24, r24
    1720:	99 1f       	adc	r25, r25
    1722:	88 0f       	add	r24, r24
    1724:	99 1f       	adc	r25, r25
    1726:	fc 01       	movw	r30, r24
    1728:	e3 57       	subi	r30, 0x73	; 115
    172a:	ff 4f       	sbci	r31, 0xFF	; 255
    172c:	20 81       	ld	r18, Z
    172e:	8a 81       	ldd	r24, Y+2	; 0x02
    1730:	88 2f       	mov	r24, r24
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	fc 01       	movw	r30, r24
    1736:	e0 56       	subi	r30, 0x60	; 96
    1738:	ff 4f       	sbci	r31, 0xFF	; 255
    173a:	90 81       	ld	r25, Z
    173c:	82 2f       	mov	r24, r18
    173e:	69 2f       	mov	r22, r25
    1740:	0e 94 40 09 	call	0x1280	; 0x1280 <DIO_enuSetPortValue>
		}
		status=STD_enuOK;
    1744:	19 82       	std	Y+1, r1	; 0x01
	}



	return status;
    1746:	89 81       	ldd	r24, Y+1	; 0x01
}
    1748:	0f 90       	pop	r0
    174a:	0f 90       	pop	r0
    174c:	0f 90       	pop	r0
    174e:	cf 91       	pop	r28
    1750:	df 91       	pop	r29
    1752:	08 95       	ret

00001754 <main>:
#include "util/delay.h"
#include "DIO_int.h"
#include "SEG_int.h"
#include "STD_BITMAN.h"

int main(void){
    1754:	0f 93       	push	r16
    1756:	1f 93       	push	r17
    1758:	df 93       	push	r29
    175a:	cf 93       	push	r28
    175c:	cd b7       	in	r28, 0x3d	; 61
    175e:	de b7       	in	r29, 0x3e	; 62
    1760:	c9 54       	subi	r28, 0x49	; 73
    1762:	d0 40       	sbci	r29, 0x00	; 0
    1764:	0f b6       	in	r0, 0x3f	; 63
    1766:	f8 94       	cli
    1768:	de bf       	out	0x3e, r29	; 62
    176a:	0f be       	out	0x3f, r0	; 63
    176c:	cd bf       	out	0x3d, r28	; 61

	DIO_vidInit();
    176e:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vidInit>
	SEG_vidInit();
    1772:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <SEG_vidInit>
	u8 index=0;
    1776:	fe 01       	movw	r30, r28
    1778:	e9 5b       	subi	r30, 0xB9	; 185
    177a:	ff 4f       	sbci	r31, 0xFF	; 255
    177c:	10 82       	st	Z, r1

	while(1){


		u8 u8Switch1;
		DIO_enuGetPinValue(0,&u8Switch1);
    177e:	9e 01       	movw	r18, r28
    1780:	28 5b       	subi	r18, 0xB8	; 184
    1782:	3f 4f       	sbci	r19, 0xFF	; 255
    1784:	80 e0       	ldi	r24, 0x00	; 0
    1786:	b9 01       	movw	r22, r18
    1788:	0e 94 57 08 	call	0x10ae	; 0x10ae <DIO_enuGetPinValue>


		u8 u8Switch2;
		DIO_enuGetPinValue(1,&u8Switch2);
    178c:	9e 01       	movw	r18, r28
    178e:	27 5b       	subi	r18, 0xB7	; 183
    1790:	3f 4f       	sbci	r19, 0xFF	; 255
    1792:	81 e0       	ldi	r24, 0x01	; 1
    1794:	b9 01       	movw	r22, r18
    1796:	0e 94 57 08 	call	0x10ae	; 0x10ae <DIO_enuGetPinValue>





		if(u8Switch1==DIO_LOW)
    179a:	fe 01       	movw	r30, r28
    179c:	e8 5b       	subi	r30, 0xB8	; 184
    179e:	ff 4f       	sbci	r31, 0xFF	; 255
    17a0:	80 81       	ld	r24, Z
    17a2:	88 23       	and	r24, r24
    17a4:	09 f0       	breq	.+2      	; 0x17a8 <main+0x54>
    17a6:	9a c0       	rjmp	.+308    	; 0x18dc <main+0x188>
    17a8:	fe 01       	movw	r30, r28
    17aa:	ed 5b       	subi	r30, 0xBD	; 189
    17ac:	ff 4f       	sbci	r31, 0xFF	; 255
    17ae:	80 e0       	ldi	r24, 0x00	; 0
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	a6 e9       	ldi	r26, 0x96	; 150
    17b4:	b3 e4       	ldi	r27, 0x43	; 67
    17b6:	80 83       	st	Z, r24
    17b8:	91 83       	std	Z+1, r25	; 0x01
    17ba:	a2 83       	std	Z+2, r26	; 0x02
    17bc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17be:	8e 01       	movw	r16, r28
    17c0:	01 5c       	subi	r16, 0xC1	; 193
    17c2:	1f 4f       	sbci	r17, 0xFF	; 255
    17c4:	fe 01       	movw	r30, r28
    17c6:	ed 5b       	subi	r30, 0xBD	; 189
    17c8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ca:	60 81       	ld	r22, Z
    17cc:	71 81       	ldd	r23, Z+1	; 0x01
    17ce:	82 81       	ldd	r24, Z+2	; 0x02
    17d0:	93 81       	ldd	r25, Z+3	; 0x03
    17d2:	20 e0       	ldi	r18, 0x00	; 0
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	4a ef       	ldi	r20, 0xFA	; 250
    17d8:	54 e4       	ldi	r21, 0x44	; 68
    17da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17de:	dc 01       	movw	r26, r24
    17e0:	cb 01       	movw	r24, r22
    17e2:	f8 01       	movw	r30, r16
    17e4:	80 83       	st	Z, r24
    17e6:	91 83       	std	Z+1, r25	; 0x01
    17e8:	a2 83       	std	Z+2, r26	; 0x02
    17ea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    17ec:	fe 01       	movw	r30, r28
    17ee:	ff 96       	adiw	r30, 0x3f	; 63
    17f0:	60 81       	ld	r22, Z
    17f2:	71 81       	ldd	r23, Z+1	; 0x01
    17f4:	82 81       	ldd	r24, Z+2	; 0x02
    17f6:	93 81       	ldd	r25, Z+3	; 0x03
    17f8:	20 e0       	ldi	r18, 0x00	; 0
    17fa:	30 e0       	ldi	r19, 0x00	; 0
    17fc:	40 e8       	ldi	r20, 0x80	; 128
    17fe:	5f e3       	ldi	r21, 0x3F	; 63
    1800:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1804:	88 23       	and	r24, r24
    1806:	2c f4       	brge	.+10     	; 0x1812 <main+0xbe>
		__ticks = 1;
    1808:	81 e0       	ldi	r24, 0x01	; 1
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	9e af       	std	Y+62, r25	; 0x3e
    180e:	8d af       	std	Y+61, r24	; 0x3d
    1810:	46 c0       	rjmp	.+140    	; 0x189e <main+0x14a>
	else if (__tmp > 65535)
    1812:	fe 01       	movw	r30, r28
    1814:	ff 96       	adiw	r30, 0x3f	; 63
    1816:	60 81       	ld	r22, Z
    1818:	71 81       	ldd	r23, Z+1	; 0x01
    181a:	82 81       	ldd	r24, Z+2	; 0x02
    181c:	93 81       	ldd	r25, Z+3	; 0x03
    181e:	20 e0       	ldi	r18, 0x00	; 0
    1820:	3f ef       	ldi	r19, 0xFF	; 255
    1822:	4f e7       	ldi	r20, 0x7F	; 127
    1824:	57 e4       	ldi	r21, 0x47	; 71
    1826:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    182a:	18 16       	cp	r1, r24
    182c:	64 f5       	brge	.+88     	; 0x1886 <main+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    182e:	fe 01       	movw	r30, r28
    1830:	ed 5b       	subi	r30, 0xBD	; 189
    1832:	ff 4f       	sbci	r31, 0xFF	; 255
    1834:	60 81       	ld	r22, Z
    1836:	71 81       	ldd	r23, Z+1	; 0x01
    1838:	82 81       	ldd	r24, Z+2	; 0x02
    183a:	93 81       	ldd	r25, Z+3	; 0x03
    183c:	20 e0       	ldi	r18, 0x00	; 0
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	40 e2       	ldi	r20, 0x20	; 32
    1842:	51 e4       	ldi	r21, 0x41	; 65
    1844:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1848:	dc 01       	movw	r26, r24
    184a:	cb 01       	movw	r24, r22
    184c:	bc 01       	movw	r22, r24
    184e:	cd 01       	movw	r24, r26
    1850:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1854:	dc 01       	movw	r26, r24
    1856:	cb 01       	movw	r24, r22
    1858:	9e af       	std	Y+62, r25	; 0x3e
    185a:	8d af       	std	Y+61, r24	; 0x3d
    185c:	0f c0       	rjmp	.+30     	; 0x187c <main+0x128>
    185e:	88 ec       	ldi	r24, 0xC8	; 200
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	9c af       	std	Y+60, r25	; 0x3c
    1864:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1866:	8b ad       	ldd	r24, Y+59	; 0x3b
    1868:	9c ad       	ldd	r25, Y+60	; 0x3c
    186a:	01 97       	sbiw	r24, 0x01	; 1
    186c:	f1 f7       	brne	.-4      	; 0x186a <main+0x116>
    186e:	9c af       	std	Y+60, r25	; 0x3c
    1870:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1872:	8d ad       	ldd	r24, Y+61	; 0x3d
    1874:	9e ad       	ldd	r25, Y+62	; 0x3e
    1876:	01 97       	sbiw	r24, 0x01	; 1
    1878:	9e af       	std	Y+62, r25	; 0x3e
    187a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    187c:	8d ad       	ldd	r24, Y+61	; 0x3d
    187e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1880:	00 97       	sbiw	r24, 0x00	; 0
    1882:	69 f7       	brne	.-38     	; 0x185e <main+0x10a>
    1884:	16 c0       	rjmp	.+44     	; 0x18b2 <main+0x15e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1886:	fe 01       	movw	r30, r28
    1888:	ff 96       	adiw	r30, 0x3f	; 63
    188a:	60 81       	ld	r22, Z
    188c:	71 81       	ldd	r23, Z+1	; 0x01
    188e:	82 81       	ldd	r24, Z+2	; 0x02
    1890:	93 81       	ldd	r25, Z+3	; 0x03
    1892:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1896:	dc 01       	movw	r26, r24
    1898:	cb 01       	movw	r24, r22
    189a:	9e af       	std	Y+62, r25	; 0x3e
    189c:	8d af       	std	Y+61, r24	; 0x3d
    189e:	8d ad       	ldd	r24, Y+61	; 0x3d
    18a0:	9e ad       	ldd	r25, Y+62	; 0x3e
    18a2:	9a af       	std	Y+58, r25	; 0x3a
    18a4:	89 af       	std	Y+57, r24	; 0x39
    18a6:	89 ad       	ldd	r24, Y+57	; 0x39
    18a8:	9a ad       	ldd	r25, Y+58	; 0x3a
    18aa:	01 97       	sbiw	r24, 0x01	; 1
    18ac:	f1 f7       	brne	.-4      	; 0x18aa <main+0x156>
    18ae:	9a af       	std	Y+58, r25	; 0x3a
    18b0:	89 af       	std	Y+57, r24	; 0x39

		{
			_delay_ms(300);

			index++;
    18b2:	de 01       	movw	r26, r28
    18b4:	a9 5b       	subi	r26, 0xB9	; 185
    18b6:	bf 4f       	sbci	r27, 0xFF	; 255
    18b8:	fe 01       	movw	r30, r28
    18ba:	e9 5b       	subi	r30, 0xB9	; 185
    18bc:	ff 4f       	sbci	r31, 0xFF	; 255
    18be:	80 81       	ld	r24, Z
    18c0:	8f 5f       	subi	r24, 0xFF	; 255
    18c2:	8c 93       	st	X, r24

			if(index>=20)
    18c4:	fe 01       	movw	r30, r28
    18c6:	e9 5b       	subi	r30, 0xB9	; 185
    18c8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ca:	80 81       	ld	r24, Z
    18cc:	84 31       	cpi	r24, 0x14	; 20
    18ce:	08 f4       	brcc	.+2      	; 0x18d2 <main+0x17e>
    18d0:	93 c0       	rjmp	.+294    	; 0x19f8 <main+0x2a4>

			{

				index=0;
    18d2:	fe 01       	movw	r30, r28
    18d4:	e9 5b       	subi	r30, 0xB9	; 185
    18d6:	ff 4f       	sbci	r31, 0xFF	; 255
    18d8:	10 82       	st	Z, r1
    18da:	8e c0       	rjmp	.+284    	; 0x19f8 <main+0x2a4>

				//Do Nothing

			}

		}else if(u8Switch2==DIO_LOW)
    18dc:	fe 01       	movw	r30, r28
    18de:	e7 5b       	subi	r30, 0xB7	; 183
    18e0:	ff 4f       	sbci	r31, 0xFF	; 255
    18e2:	80 81       	ld	r24, Z
    18e4:	88 23       	and	r24, r24
    18e6:	09 f0       	breq	.+2      	; 0x18ea <main+0x196>
    18e8:	87 c0       	rjmp	.+270    	; 0x19f8 <main+0x2a4>
    18ea:	80 e0       	ldi	r24, 0x00	; 0
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	a6 e9       	ldi	r26, 0x96	; 150
    18f0:	b3 e4       	ldi	r27, 0x43	; 67
    18f2:	8d ab       	std	Y+53, r24	; 0x35
    18f4:	9e ab       	std	Y+54, r25	; 0x36
    18f6:	af ab       	std	Y+55, r26	; 0x37
    18f8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18fa:	6d a9       	ldd	r22, Y+53	; 0x35
    18fc:	7e a9       	ldd	r23, Y+54	; 0x36
    18fe:	8f a9       	ldd	r24, Y+55	; 0x37
    1900:	98 ad       	ldd	r25, Y+56	; 0x38
    1902:	20 e0       	ldi	r18, 0x00	; 0
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	4a ef       	ldi	r20, 0xFA	; 250
    1908:	54 e4       	ldi	r21, 0x44	; 68
    190a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    190e:	dc 01       	movw	r26, r24
    1910:	cb 01       	movw	r24, r22
    1912:	89 ab       	std	Y+49, r24	; 0x31
    1914:	9a ab       	std	Y+50, r25	; 0x32
    1916:	ab ab       	std	Y+51, r26	; 0x33
    1918:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    191a:	69 a9       	ldd	r22, Y+49	; 0x31
    191c:	7a a9       	ldd	r23, Y+50	; 0x32
    191e:	8b a9       	ldd	r24, Y+51	; 0x33
    1920:	9c a9       	ldd	r25, Y+52	; 0x34
    1922:	20 e0       	ldi	r18, 0x00	; 0
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	40 e8       	ldi	r20, 0x80	; 128
    1928:	5f e3       	ldi	r21, 0x3F	; 63
    192a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    192e:	88 23       	and	r24, r24
    1930:	2c f4       	brge	.+10     	; 0x193c <main+0x1e8>
		__ticks = 1;
    1932:	81 e0       	ldi	r24, 0x01	; 1
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	98 ab       	std	Y+48, r25	; 0x30
    1938:	8f a7       	std	Y+47, r24	; 0x2f
    193a:	3f c0       	rjmp	.+126    	; 0x19ba <main+0x266>
	else if (__tmp > 65535)
    193c:	69 a9       	ldd	r22, Y+49	; 0x31
    193e:	7a a9       	ldd	r23, Y+50	; 0x32
    1940:	8b a9       	ldd	r24, Y+51	; 0x33
    1942:	9c a9       	ldd	r25, Y+52	; 0x34
    1944:	20 e0       	ldi	r18, 0x00	; 0
    1946:	3f ef       	ldi	r19, 0xFF	; 255
    1948:	4f e7       	ldi	r20, 0x7F	; 127
    194a:	57 e4       	ldi	r21, 0x47	; 71
    194c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1950:	18 16       	cp	r1, r24
    1952:	4c f5       	brge	.+82     	; 0x19a6 <main+0x252>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1954:	6d a9       	ldd	r22, Y+53	; 0x35
    1956:	7e a9       	ldd	r23, Y+54	; 0x36
    1958:	8f a9       	ldd	r24, Y+55	; 0x37
    195a:	98 ad       	ldd	r25, Y+56	; 0x38
    195c:	20 e0       	ldi	r18, 0x00	; 0
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	40 e2       	ldi	r20, 0x20	; 32
    1962:	51 e4       	ldi	r21, 0x41	; 65
    1964:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1968:	dc 01       	movw	r26, r24
    196a:	cb 01       	movw	r24, r22
    196c:	bc 01       	movw	r22, r24
    196e:	cd 01       	movw	r24, r26
    1970:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1974:	dc 01       	movw	r26, r24
    1976:	cb 01       	movw	r24, r22
    1978:	98 ab       	std	Y+48, r25	; 0x30
    197a:	8f a7       	std	Y+47, r24	; 0x2f
    197c:	0f c0       	rjmp	.+30     	; 0x199c <main+0x248>
    197e:	88 ec       	ldi	r24, 0xC8	; 200
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	9e a7       	std	Y+46, r25	; 0x2e
    1984:	8d a7       	std	Y+45, r24	; 0x2d
    1986:	8d a5       	ldd	r24, Y+45	; 0x2d
    1988:	9e a5       	ldd	r25, Y+46	; 0x2e
    198a:	01 97       	sbiw	r24, 0x01	; 1
    198c:	f1 f7       	brne	.-4      	; 0x198a <main+0x236>
    198e:	9e a7       	std	Y+46, r25	; 0x2e
    1990:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1992:	8f a5       	ldd	r24, Y+47	; 0x2f
    1994:	98 a9       	ldd	r25, Y+48	; 0x30
    1996:	01 97       	sbiw	r24, 0x01	; 1
    1998:	98 ab       	std	Y+48, r25	; 0x30
    199a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    199c:	8f a5       	ldd	r24, Y+47	; 0x2f
    199e:	98 a9       	ldd	r25, Y+48	; 0x30
    19a0:	00 97       	sbiw	r24, 0x00	; 0
    19a2:	69 f7       	brne	.-38     	; 0x197e <main+0x22a>
    19a4:	14 c0       	rjmp	.+40     	; 0x19ce <main+0x27a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19a6:	69 a9       	ldd	r22, Y+49	; 0x31
    19a8:	7a a9       	ldd	r23, Y+50	; 0x32
    19aa:	8b a9       	ldd	r24, Y+51	; 0x33
    19ac:	9c a9       	ldd	r25, Y+52	; 0x34
    19ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19b2:	dc 01       	movw	r26, r24
    19b4:	cb 01       	movw	r24, r22
    19b6:	98 ab       	std	Y+48, r25	; 0x30
    19b8:	8f a7       	std	Y+47, r24	; 0x2f
    19ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    19bc:	98 a9       	ldd	r25, Y+48	; 0x30
    19be:	9c a7       	std	Y+44, r25	; 0x2c
    19c0:	8b a7       	std	Y+43, r24	; 0x2b
    19c2:	8b a5       	ldd	r24, Y+43	; 0x2b
    19c4:	9c a5       	ldd	r25, Y+44	; 0x2c
    19c6:	01 97       	sbiw	r24, 0x01	; 1
    19c8:	f1 f7       	brne	.-4      	; 0x19c6 <main+0x272>
    19ca:	9c a7       	std	Y+44, r25	; 0x2c
    19cc:	8b a7       	std	Y+43, r24	; 0x2b
		{

			_delay_ms(300);


			if(index>0)
    19ce:	fe 01       	movw	r30, r28
    19d0:	e9 5b       	subi	r30, 0xB9	; 185
    19d2:	ff 4f       	sbci	r31, 0xFF	; 255
    19d4:	80 81       	ld	r24, Z
    19d6:	88 23       	and	r24, r24
    19d8:	51 f0       	breq	.+20     	; 0x19ee <main+0x29a>

			{

				index--;
    19da:	de 01       	movw	r26, r28
    19dc:	a9 5b       	subi	r26, 0xB9	; 185
    19de:	bf 4f       	sbci	r27, 0xFF	; 255
    19e0:	fe 01       	movw	r30, r28
    19e2:	e9 5b       	subi	r30, 0xB9	; 185
    19e4:	ff 4f       	sbci	r31, 0xFF	; 255
    19e6:	80 81       	ld	r24, Z
    19e8:	81 50       	subi	r24, 0x01	; 1
    19ea:	8c 93       	st	X, r24
    19ec:	05 c0       	rjmp	.+10     	; 0x19f8 <main+0x2a4>

			}else

			{

				index=20;
    19ee:	fe 01       	movw	r30, r28
    19f0:	e9 5b       	subi	r30, 0xB9	; 185
    19f2:	ff 4f       	sbci	r31, 0xFF	; 255
    19f4:	84 e1       	ldi	r24, 0x14	; 20
    19f6:	80 83       	st	Z, r24


		}


		SEG_enuEnable(0);
    19f8:	80 e0       	ldi	r24, 0x00	; 0
    19fa:	0e 94 4e 0a 	call	0x149c	; 0x149c <SEG_enuEnable>

		//DIO_enuSetPinValue(2,DIO_LOW);
		SEG_enuWrite(0,(index/10));
    19fe:	fe 01       	movw	r30, r28
    1a00:	e9 5b       	subi	r30, 0xB9	; 185
    1a02:	ff 4f       	sbci	r31, 0xFF	; 255
    1a04:	80 81       	ld	r24, Z
    1a06:	9a e0       	ldi	r25, 0x0A	; 10
    1a08:	69 2f       	mov	r22, r25
    1a0a:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <__udivmodqi4>
    1a0e:	98 2f       	mov	r25, r24
    1a10:	80 e0       	ldi	r24, 0x00	; 0
    1a12:	69 2f       	mov	r22, r25
    1a14:	0e 94 38 0b 	call	0x1670	; 0x1670 <SEG_enuWrite>
    1a18:	80 e0       	ldi	r24, 0x00	; 0
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	a0 ea       	ldi	r26, 0xA0	; 160
    1a1e:	b0 e4       	ldi	r27, 0x40	; 64
    1a20:	8f a3       	std	Y+39, r24	; 0x27
    1a22:	98 a7       	std	Y+40, r25	; 0x28
    1a24:	a9 a7       	std	Y+41, r26	; 0x29
    1a26:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a28:	6f a1       	ldd	r22, Y+39	; 0x27
    1a2a:	78 a5       	ldd	r23, Y+40	; 0x28
    1a2c:	89 a5       	ldd	r24, Y+41	; 0x29
    1a2e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a30:	20 e0       	ldi	r18, 0x00	; 0
    1a32:	30 e0       	ldi	r19, 0x00	; 0
    1a34:	4a ef       	ldi	r20, 0xFA	; 250
    1a36:	54 e4       	ldi	r21, 0x44	; 68
    1a38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a3c:	dc 01       	movw	r26, r24
    1a3e:	cb 01       	movw	r24, r22
    1a40:	8b a3       	std	Y+35, r24	; 0x23
    1a42:	9c a3       	std	Y+36, r25	; 0x24
    1a44:	ad a3       	std	Y+37, r26	; 0x25
    1a46:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a48:	6b a1       	ldd	r22, Y+35	; 0x23
    1a4a:	7c a1       	ldd	r23, Y+36	; 0x24
    1a4c:	8d a1       	ldd	r24, Y+37	; 0x25
    1a4e:	9e a1       	ldd	r25, Y+38	; 0x26
    1a50:	20 e0       	ldi	r18, 0x00	; 0
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	40 e8       	ldi	r20, 0x80	; 128
    1a56:	5f e3       	ldi	r21, 0x3F	; 63
    1a58:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a5c:	88 23       	and	r24, r24
    1a5e:	2c f4       	brge	.+10     	; 0x1a6a <main+0x316>
		__ticks = 1;
    1a60:	81 e0       	ldi	r24, 0x01	; 1
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	9a a3       	std	Y+34, r25	; 0x22
    1a66:	89 a3       	std	Y+33, r24	; 0x21
    1a68:	3f c0       	rjmp	.+126    	; 0x1ae8 <main+0x394>
	else if (__tmp > 65535)
    1a6a:	6b a1       	ldd	r22, Y+35	; 0x23
    1a6c:	7c a1       	ldd	r23, Y+36	; 0x24
    1a6e:	8d a1       	ldd	r24, Y+37	; 0x25
    1a70:	9e a1       	ldd	r25, Y+38	; 0x26
    1a72:	20 e0       	ldi	r18, 0x00	; 0
    1a74:	3f ef       	ldi	r19, 0xFF	; 255
    1a76:	4f e7       	ldi	r20, 0x7F	; 127
    1a78:	57 e4       	ldi	r21, 0x47	; 71
    1a7a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a7e:	18 16       	cp	r1, r24
    1a80:	4c f5       	brge	.+82     	; 0x1ad4 <main+0x380>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a82:	6f a1       	ldd	r22, Y+39	; 0x27
    1a84:	78 a5       	ldd	r23, Y+40	; 0x28
    1a86:	89 a5       	ldd	r24, Y+41	; 0x29
    1a88:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a8a:	20 e0       	ldi	r18, 0x00	; 0
    1a8c:	30 e0       	ldi	r19, 0x00	; 0
    1a8e:	40 e2       	ldi	r20, 0x20	; 32
    1a90:	51 e4       	ldi	r21, 0x41	; 65
    1a92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a96:	dc 01       	movw	r26, r24
    1a98:	cb 01       	movw	r24, r22
    1a9a:	bc 01       	movw	r22, r24
    1a9c:	cd 01       	movw	r24, r26
    1a9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aa2:	dc 01       	movw	r26, r24
    1aa4:	cb 01       	movw	r24, r22
    1aa6:	9a a3       	std	Y+34, r25	; 0x22
    1aa8:	89 a3       	std	Y+33, r24	; 0x21
    1aaa:	0f c0       	rjmp	.+30     	; 0x1aca <main+0x376>
    1aac:	88 ec       	ldi	r24, 0xC8	; 200
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	98 a3       	std	Y+32, r25	; 0x20
    1ab2:	8f 8f       	std	Y+31, r24	; 0x1f
    1ab4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ab6:	98 a1       	ldd	r25, Y+32	; 0x20
    1ab8:	01 97       	sbiw	r24, 0x01	; 1
    1aba:	f1 f7       	brne	.-4      	; 0x1ab8 <main+0x364>
    1abc:	98 a3       	std	Y+32, r25	; 0x20
    1abe:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ac0:	89 a1       	ldd	r24, Y+33	; 0x21
    1ac2:	9a a1       	ldd	r25, Y+34	; 0x22
    1ac4:	01 97       	sbiw	r24, 0x01	; 1
    1ac6:	9a a3       	std	Y+34, r25	; 0x22
    1ac8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aca:	89 a1       	ldd	r24, Y+33	; 0x21
    1acc:	9a a1       	ldd	r25, Y+34	; 0x22
    1ace:	00 97       	sbiw	r24, 0x00	; 0
    1ad0:	69 f7       	brne	.-38     	; 0x1aac <main+0x358>
    1ad2:	14 c0       	rjmp	.+40     	; 0x1afc <main+0x3a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ad4:	6b a1       	ldd	r22, Y+35	; 0x23
    1ad6:	7c a1       	ldd	r23, Y+36	; 0x24
    1ad8:	8d a1       	ldd	r24, Y+37	; 0x25
    1ada:	9e a1       	ldd	r25, Y+38	; 0x26
    1adc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ae0:	dc 01       	movw	r26, r24
    1ae2:	cb 01       	movw	r24, r22
    1ae4:	9a a3       	std	Y+34, r25	; 0x22
    1ae6:	89 a3       	std	Y+33, r24	; 0x21
    1ae8:	89 a1       	ldd	r24, Y+33	; 0x21
    1aea:	9a a1       	ldd	r25, Y+34	; 0x22
    1aec:	9e 8f       	std	Y+30, r25	; 0x1e
    1aee:	8d 8f       	std	Y+29, r24	; 0x1d
    1af0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1af2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1af4:	01 97       	sbiw	r24, 0x01	; 1
    1af6:	f1 f7       	brne	.-4      	; 0x1af4 <main+0x3a0>
    1af8:	9e 8f       	std	Y+30, r25	; 0x1e
    1afa:	8d 8f       	std	Y+29, r24	; 0x1d

		//DIO_enuSetPortValue(0, u8SevenSegment[index/10]);

		_delay_ms(5);

		SEG_enuDisable(0);
    1afc:	80 e0       	ldi	r24, 0x00	; 0
    1afe:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <SEG_enuDisable>
    1b02:	80 e0       	ldi	r24, 0x00	; 0
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	a0 ea       	ldi	r26, 0xA0	; 160
    1b08:	b0 e4       	ldi	r27, 0x40	; 64
    1b0a:	89 8f       	std	Y+25, r24	; 0x19
    1b0c:	9a 8f       	std	Y+26, r25	; 0x1a
    1b0e:	ab 8f       	std	Y+27, r26	; 0x1b
    1b10:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b12:	69 8d       	ldd	r22, Y+25	; 0x19
    1b14:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b16:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b18:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b1a:	20 e0       	ldi	r18, 0x00	; 0
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	4a ef       	ldi	r20, 0xFA	; 250
    1b20:	54 e4       	ldi	r21, 0x44	; 68
    1b22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b26:	dc 01       	movw	r26, r24
    1b28:	cb 01       	movw	r24, r22
    1b2a:	8d 8b       	std	Y+21, r24	; 0x15
    1b2c:	9e 8b       	std	Y+22, r25	; 0x16
    1b2e:	af 8b       	std	Y+23, r26	; 0x17
    1b30:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b32:	6d 89       	ldd	r22, Y+21	; 0x15
    1b34:	7e 89       	ldd	r23, Y+22	; 0x16
    1b36:	8f 89       	ldd	r24, Y+23	; 0x17
    1b38:	98 8d       	ldd	r25, Y+24	; 0x18
    1b3a:	20 e0       	ldi	r18, 0x00	; 0
    1b3c:	30 e0       	ldi	r19, 0x00	; 0
    1b3e:	40 e8       	ldi	r20, 0x80	; 128
    1b40:	5f e3       	ldi	r21, 0x3F	; 63
    1b42:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b46:	88 23       	and	r24, r24
    1b48:	2c f4       	brge	.+10     	; 0x1b54 <main+0x400>
		__ticks = 1;
    1b4a:	81 e0       	ldi	r24, 0x01	; 1
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	9c 8b       	std	Y+20, r25	; 0x14
    1b50:	8b 8b       	std	Y+19, r24	; 0x13
    1b52:	3f c0       	rjmp	.+126    	; 0x1bd2 <main+0x47e>
	else if (__tmp > 65535)
    1b54:	6d 89       	ldd	r22, Y+21	; 0x15
    1b56:	7e 89       	ldd	r23, Y+22	; 0x16
    1b58:	8f 89       	ldd	r24, Y+23	; 0x17
    1b5a:	98 8d       	ldd	r25, Y+24	; 0x18
    1b5c:	20 e0       	ldi	r18, 0x00	; 0
    1b5e:	3f ef       	ldi	r19, 0xFF	; 255
    1b60:	4f e7       	ldi	r20, 0x7F	; 127
    1b62:	57 e4       	ldi	r21, 0x47	; 71
    1b64:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b68:	18 16       	cp	r1, r24
    1b6a:	4c f5       	brge	.+82     	; 0x1bbe <main+0x46a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b6c:	69 8d       	ldd	r22, Y+25	; 0x19
    1b6e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b70:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b72:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b74:	20 e0       	ldi	r18, 0x00	; 0
    1b76:	30 e0       	ldi	r19, 0x00	; 0
    1b78:	40 e2       	ldi	r20, 0x20	; 32
    1b7a:	51 e4       	ldi	r21, 0x41	; 65
    1b7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b80:	dc 01       	movw	r26, r24
    1b82:	cb 01       	movw	r24, r22
    1b84:	bc 01       	movw	r22, r24
    1b86:	cd 01       	movw	r24, r26
    1b88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b8c:	dc 01       	movw	r26, r24
    1b8e:	cb 01       	movw	r24, r22
    1b90:	9c 8b       	std	Y+20, r25	; 0x14
    1b92:	8b 8b       	std	Y+19, r24	; 0x13
    1b94:	0f c0       	rjmp	.+30     	; 0x1bb4 <main+0x460>
    1b96:	88 ec       	ldi	r24, 0xC8	; 200
    1b98:	90 e0       	ldi	r25, 0x00	; 0
    1b9a:	9a 8b       	std	Y+18, r25	; 0x12
    1b9c:	89 8b       	std	Y+17, r24	; 0x11
    1b9e:	89 89       	ldd	r24, Y+17	; 0x11
    1ba0:	9a 89       	ldd	r25, Y+18	; 0x12
    1ba2:	01 97       	sbiw	r24, 0x01	; 1
    1ba4:	f1 f7       	brne	.-4      	; 0x1ba2 <main+0x44e>
    1ba6:	9a 8b       	std	Y+18, r25	; 0x12
    1ba8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1baa:	8b 89       	ldd	r24, Y+19	; 0x13
    1bac:	9c 89       	ldd	r25, Y+20	; 0x14
    1bae:	01 97       	sbiw	r24, 0x01	; 1
    1bb0:	9c 8b       	std	Y+20, r25	; 0x14
    1bb2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bb4:	8b 89       	ldd	r24, Y+19	; 0x13
    1bb6:	9c 89       	ldd	r25, Y+20	; 0x14
    1bb8:	00 97       	sbiw	r24, 0x00	; 0
    1bba:	69 f7       	brne	.-38     	; 0x1b96 <main+0x442>
    1bbc:	14 c0       	rjmp	.+40     	; 0x1be6 <main+0x492>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bbe:	6d 89       	ldd	r22, Y+21	; 0x15
    1bc0:	7e 89       	ldd	r23, Y+22	; 0x16
    1bc2:	8f 89       	ldd	r24, Y+23	; 0x17
    1bc4:	98 8d       	ldd	r25, Y+24	; 0x18
    1bc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bca:	dc 01       	movw	r26, r24
    1bcc:	cb 01       	movw	r24, r22
    1bce:	9c 8b       	std	Y+20, r25	; 0x14
    1bd0:	8b 8b       	std	Y+19, r24	; 0x13
    1bd2:	8b 89       	ldd	r24, Y+19	; 0x13
    1bd4:	9c 89       	ldd	r25, Y+20	; 0x14
    1bd6:	98 8b       	std	Y+16, r25	; 0x10
    1bd8:	8f 87       	std	Y+15, r24	; 0x0f
    1bda:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bdc:	98 89       	ldd	r25, Y+16	; 0x10
    1bde:	01 97       	sbiw	r24, 0x01	; 1
    1be0:	f1 f7       	brne	.-4      	; 0x1bde <main+0x48a>
    1be2:	98 8b       	std	Y+16, r25	; 0x10
    1be4:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(5);

		SEG_enuEnable(1);
    1be6:	81 e0       	ldi	r24, 0x01	; 1
    1be8:	0e 94 4e 0a 	call	0x149c	; 0x149c <SEG_enuEnable>

		SEG_enuWrite(1,(index%10));
    1bec:	fe 01       	movw	r30, r28
    1bee:	e9 5b       	subi	r30, 0xB9	; 185
    1bf0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf2:	80 81       	ld	r24, Z
    1bf4:	9a e0       	ldi	r25, 0x0A	; 10
    1bf6:	69 2f       	mov	r22, r25
    1bf8:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <__udivmodqi4>
    1bfc:	89 2f       	mov	r24, r25
    1bfe:	98 2f       	mov	r25, r24
    1c00:	81 e0       	ldi	r24, 0x01	; 1
    1c02:	69 2f       	mov	r22, r25
    1c04:	0e 94 38 0b 	call	0x1670	; 0x1670 <SEG_enuWrite>
    1c08:	80 e0       	ldi	r24, 0x00	; 0
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	a0 ea       	ldi	r26, 0xA0	; 160
    1c0e:	b0 e4       	ldi	r27, 0x40	; 64
    1c10:	8b 87       	std	Y+11, r24	; 0x0b
    1c12:	9c 87       	std	Y+12, r25	; 0x0c
    1c14:	ad 87       	std	Y+13, r26	; 0x0d
    1c16:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c18:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c1a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c20:	20 e0       	ldi	r18, 0x00	; 0
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	4a ef       	ldi	r20, 0xFA	; 250
    1c26:	54 e4       	ldi	r21, 0x44	; 68
    1c28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c2c:	dc 01       	movw	r26, r24
    1c2e:	cb 01       	movw	r24, r22
    1c30:	8f 83       	std	Y+7, r24	; 0x07
    1c32:	98 87       	std	Y+8, r25	; 0x08
    1c34:	a9 87       	std	Y+9, r26	; 0x09
    1c36:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c38:	6f 81       	ldd	r22, Y+7	; 0x07
    1c3a:	78 85       	ldd	r23, Y+8	; 0x08
    1c3c:	89 85       	ldd	r24, Y+9	; 0x09
    1c3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c40:	20 e0       	ldi	r18, 0x00	; 0
    1c42:	30 e0       	ldi	r19, 0x00	; 0
    1c44:	40 e8       	ldi	r20, 0x80	; 128
    1c46:	5f e3       	ldi	r21, 0x3F	; 63
    1c48:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c4c:	88 23       	and	r24, r24
    1c4e:	2c f4       	brge	.+10     	; 0x1c5a <main+0x506>
		__ticks = 1;
    1c50:	81 e0       	ldi	r24, 0x01	; 1
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	9e 83       	std	Y+6, r25	; 0x06
    1c56:	8d 83       	std	Y+5, r24	; 0x05
    1c58:	3f c0       	rjmp	.+126    	; 0x1cd8 <main+0x584>
	else if (__tmp > 65535)
    1c5a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c5c:	78 85       	ldd	r23, Y+8	; 0x08
    1c5e:	89 85       	ldd	r24, Y+9	; 0x09
    1c60:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c62:	20 e0       	ldi	r18, 0x00	; 0
    1c64:	3f ef       	ldi	r19, 0xFF	; 255
    1c66:	4f e7       	ldi	r20, 0x7F	; 127
    1c68:	57 e4       	ldi	r21, 0x47	; 71
    1c6a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c6e:	18 16       	cp	r1, r24
    1c70:	4c f5       	brge	.+82     	; 0x1cc4 <main+0x570>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c72:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c74:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c76:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c78:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c7a:	20 e0       	ldi	r18, 0x00	; 0
    1c7c:	30 e0       	ldi	r19, 0x00	; 0
    1c7e:	40 e2       	ldi	r20, 0x20	; 32
    1c80:	51 e4       	ldi	r21, 0x41	; 65
    1c82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c86:	dc 01       	movw	r26, r24
    1c88:	cb 01       	movw	r24, r22
    1c8a:	bc 01       	movw	r22, r24
    1c8c:	cd 01       	movw	r24, r26
    1c8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c92:	dc 01       	movw	r26, r24
    1c94:	cb 01       	movw	r24, r22
    1c96:	9e 83       	std	Y+6, r25	; 0x06
    1c98:	8d 83       	std	Y+5, r24	; 0x05
    1c9a:	0f c0       	rjmp	.+30     	; 0x1cba <main+0x566>
    1c9c:	88 ec       	ldi	r24, 0xC8	; 200
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	9c 83       	std	Y+4, r25	; 0x04
    1ca2:	8b 83       	std	Y+3, r24	; 0x03
    1ca4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ca8:	01 97       	sbiw	r24, 0x01	; 1
    1caa:	f1 f7       	brne	.-4      	; 0x1ca8 <main+0x554>
    1cac:	9c 83       	std	Y+4, r25	; 0x04
    1cae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cb0:	8d 81       	ldd	r24, Y+5	; 0x05
    1cb2:	9e 81       	ldd	r25, Y+6	; 0x06
    1cb4:	01 97       	sbiw	r24, 0x01	; 1
    1cb6:	9e 83       	std	Y+6, r25	; 0x06
    1cb8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cba:	8d 81       	ldd	r24, Y+5	; 0x05
    1cbc:	9e 81       	ldd	r25, Y+6	; 0x06
    1cbe:	00 97       	sbiw	r24, 0x00	; 0
    1cc0:	69 f7       	brne	.-38     	; 0x1c9c <main+0x548>
    1cc2:	14 c0       	rjmp	.+40     	; 0x1cec <main+0x598>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cc4:	6f 81       	ldd	r22, Y+7	; 0x07
    1cc6:	78 85       	ldd	r23, Y+8	; 0x08
    1cc8:	89 85       	ldd	r24, Y+9	; 0x09
    1cca:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ccc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cd0:	dc 01       	movw	r26, r24
    1cd2:	cb 01       	movw	r24, r22
    1cd4:	9e 83       	std	Y+6, r25	; 0x06
    1cd6:	8d 83       	std	Y+5, r24	; 0x05
    1cd8:	8d 81       	ldd	r24, Y+5	; 0x05
    1cda:	9e 81       	ldd	r25, Y+6	; 0x06
    1cdc:	9a 83       	std	Y+2, r25	; 0x02
    1cde:	89 83       	std	Y+1, r24	; 0x01
    1ce0:	89 81       	ldd	r24, Y+1	; 0x01
    1ce2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ce4:	01 97       	sbiw	r24, 0x01	; 1
    1ce6:	f1 f7       	brne	.-4      	; 0x1ce4 <main+0x590>
    1ce8:	9a 83       	std	Y+2, r25	; 0x02
    1cea:	89 83       	std	Y+1, r24	; 0x01
		//DIO_enuSetPortValue(0, u8SevenSegment[index%10]);


		_delay_ms(5);
		SEG_enuDisable(1);
    1cec:	81 e0       	ldi	r24, 0x01	; 1
    1cee:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <SEG_enuDisable>
    1cf2:	45 cd       	rjmp	.-1398   	; 0x177e <main+0x2a>

00001cf4 <__udivmodqi4>:
    1cf4:	99 1b       	sub	r25, r25
    1cf6:	79 e0       	ldi	r23, 0x09	; 9
    1cf8:	04 c0       	rjmp	.+8      	; 0x1d02 <__udivmodqi4_ep>

00001cfa <__udivmodqi4_loop>:
    1cfa:	99 1f       	adc	r25, r25
    1cfc:	96 17       	cp	r25, r22
    1cfe:	08 f0       	brcs	.+2      	; 0x1d02 <__udivmodqi4_ep>
    1d00:	96 1b       	sub	r25, r22

00001d02 <__udivmodqi4_ep>:
    1d02:	88 1f       	adc	r24, r24
    1d04:	7a 95       	dec	r23
    1d06:	c9 f7       	brne	.-14     	; 0x1cfa <__udivmodqi4_loop>
    1d08:	80 95       	com	r24
    1d0a:	08 95       	ret

00001d0c <__prologue_saves__>:
    1d0c:	2f 92       	push	r2
    1d0e:	3f 92       	push	r3
    1d10:	4f 92       	push	r4
    1d12:	5f 92       	push	r5
    1d14:	6f 92       	push	r6
    1d16:	7f 92       	push	r7
    1d18:	8f 92       	push	r8
    1d1a:	9f 92       	push	r9
    1d1c:	af 92       	push	r10
    1d1e:	bf 92       	push	r11
    1d20:	cf 92       	push	r12
    1d22:	df 92       	push	r13
    1d24:	ef 92       	push	r14
    1d26:	ff 92       	push	r15
    1d28:	0f 93       	push	r16
    1d2a:	1f 93       	push	r17
    1d2c:	cf 93       	push	r28
    1d2e:	df 93       	push	r29
    1d30:	cd b7       	in	r28, 0x3d	; 61
    1d32:	de b7       	in	r29, 0x3e	; 62
    1d34:	ca 1b       	sub	r28, r26
    1d36:	db 0b       	sbc	r29, r27
    1d38:	0f b6       	in	r0, 0x3f	; 63
    1d3a:	f8 94       	cli
    1d3c:	de bf       	out	0x3e, r29	; 62
    1d3e:	0f be       	out	0x3f, r0	; 63
    1d40:	cd bf       	out	0x3d, r28	; 61
    1d42:	09 94       	ijmp

00001d44 <__epilogue_restores__>:
    1d44:	2a 88       	ldd	r2, Y+18	; 0x12
    1d46:	39 88       	ldd	r3, Y+17	; 0x11
    1d48:	48 88       	ldd	r4, Y+16	; 0x10
    1d4a:	5f 84       	ldd	r5, Y+15	; 0x0f
    1d4c:	6e 84       	ldd	r6, Y+14	; 0x0e
    1d4e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1d50:	8c 84       	ldd	r8, Y+12	; 0x0c
    1d52:	9b 84       	ldd	r9, Y+11	; 0x0b
    1d54:	aa 84       	ldd	r10, Y+10	; 0x0a
    1d56:	b9 84       	ldd	r11, Y+9	; 0x09
    1d58:	c8 84       	ldd	r12, Y+8	; 0x08
    1d5a:	df 80       	ldd	r13, Y+7	; 0x07
    1d5c:	ee 80       	ldd	r14, Y+6	; 0x06
    1d5e:	fd 80       	ldd	r15, Y+5	; 0x05
    1d60:	0c 81       	ldd	r16, Y+4	; 0x04
    1d62:	1b 81       	ldd	r17, Y+3	; 0x03
    1d64:	aa 81       	ldd	r26, Y+2	; 0x02
    1d66:	b9 81       	ldd	r27, Y+1	; 0x01
    1d68:	ce 0f       	add	r28, r30
    1d6a:	d1 1d       	adc	r29, r1
    1d6c:	0f b6       	in	r0, 0x3f	; 63
    1d6e:	f8 94       	cli
    1d70:	de bf       	out	0x3e, r29	; 62
    1d72:	0f be       	out	0x3f, r0	; 63
    1d74:	cd bf       	out	0x3d, r28	; 61
    1d76:	ed 01       	movw	r28, r26
    1d78:	08 95       	ret

00001d7a <_exit>:
    1d7a:	f8 94       	cli

00001d7c <__stop_program>:
    1d7c:	ff cf       	rjmp	.-2      	; 0x1d7c <__stop_program>
